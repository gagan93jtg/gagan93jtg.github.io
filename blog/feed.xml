<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2024-10-16T08:49:32+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh — Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">1:1 conversations with 10 Software Engineers</title><link href="https://gagan93.me/blog/2024/10/15/1-on-1-with-10-software-enginers.html" rel="alternate" type="text/html" title="1:1 conversations with 10 Software Engineers" /><published>2024-10-15T00:00:00+05:30</published><updated>2024-10-15T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/10/15/1-on-1-with-10-software-enginers</id><content type="html" xml:base="https://gagan93.me/blog/2024/10/15/1-on-1-with-10-software-enginers.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-10-15-one-on-one-with-engineers.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-dylan-ferreira-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@dylanferreira?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Dylan Ferreira&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/person-in-red-and-black-plaid-long-sleeve-shirt-using-black-laptop-computer-HJmxky8Fvmo?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I’m always looking for ways to network with like-minded people. Last month, I &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7236405029618774016/&quot;&gt;posted on LinkedIn&lt;/a&gt; to connect with like minded people using a Google Form. I received about 10 responses! All the engineers were based out of India, except one from Switzerland. It was amazing to connect with them and learn about their work, challenges, and growth over the years. I even shared some cool stats from these calls in &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7243656624869949440/&quot;&gt;another LinkedIn post&lt;/a&gt;. I’m excited to connect with more people in the future and want to capture some highlights from these discussions in a blog post. Many of these calls included requests for guidance, and I’m eager to share my thoughts publicly to help even more people. If you wish to connect anytime in future, fill &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScRLZv4vIHkOm68vmrTLw3KCnnQG1lOGkEkWNahphcKCt7HKg/viewform&quot;&gt;this form&lt;/a&gt; and add me on &lt;a href=&quot;https://www.linkedin.com/in/gagan93/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-all-we-discussed&quot;&gt;What all we discussed?&lt;/h2&gt;

&lt;p&gt;Most of the engineers had 4-7 years of experience and wanted advice on career growth along with potential future work and challenges. Here’s what we talked about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why am I doing this for free? Do I offer paid mentorship? -&lt;/strong&gt; Not everyone asked this but two separate people asked each of these questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interview preparation&lt;/strong&gt; - Half of them were either in their notice period or actively searching for new opportunities. I was able to provide detailed insights on this topic, having recently gone through a job transition myself. Additionally, I shared thoughts on various learning resources because all available content is not of good quality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How large teams work?&lt;/strong&gt; - Surprisingly, I’ve never worked in really large teams or organisations, but I’ve handled cross team collaborations and also read how teams operate in large companies. So I could give them some idea on this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How do I hire people?&lt;/strong&gt; - I’ve given interviews at about 6-8 companies before switching this time. But at LocoNav, I had interviewed &amp;gt; 200 people for various engineering roles including Senior Engineers, Managers, QA engineers, Devops. So I shared some insights here based on my experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cultural differences between Indian and non-Indian teams&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How do you handle/convey delays across layers of stakeholders?&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Big Tech engineers are superior to us&lt;/strong&gt; - Someone had this in their mind, so had to discuss around this inferiority complex. Another guy had a question - &lt;em&gt;Why my friends in big tech companies get paid so much if they do same work as we do?&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Growing as an Engineer, not a Java Engineer or Ruby Engineer&lt;/strong&gt; - It’s important to be skilled in at least one language, but it’s even more important to stay flexible and ready to learn anything new that comes your way.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to know about scale without working on scale&lt;/strong&gt;? - Not everyone gets a chance to work on scale or work on certain things like Devops, but many companies seek that experience. How to counter that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How I generally approach learning anything new?&lt;/strong&gt; - I was asked this question in an interview also. I’ll also share what I call as &lt;strong&gt;continuous learning&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How often your managers sync and how does it impact your growth&lt;/strong&gt;? - I’ve been managed by all sorts of people — from those who didn’t sync in months to the current org where managers mostly sync weekly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to know about team’s culture before joining?&lt;/strong&gt; - While salary details are clear before you join, it’s tough to understand a company’s culture until you start working there. However, there’s a simple trick you can use to learn about the company before accepting an offer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to be good at real world HLD?&lt;/strong&gt; - As I spoke with mid-level engineers aiming to become senior engineers, they were eager to learn about real-world system design. In many companies, you rarely get the chance to design large systems because high-level designs are costly to redo, and most people work on systems that are already designed. Despite this, it’s crucial to understand core system design concepts so that even when making small changes to an existing design, you are aware of their implications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I’m not working on Kubernetes or Microservices, will I be easily able to switch? -&lt;/strong&gt; While I believe that it’s not important to get your hands dirty in every single hot technology to be relevant in the current market, you must remain updated with a few things.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s discuss about each of these one by one. This is going to be one a long blog post because it’s summary of more than 13 hours of discussion. If you find this really long or parts of it not relevant to you, feel free to read specific parts using table of contents on the top.&lt;/p&gt;

&lt;h2 id=&quot;why-am-i-doing-this-for-free-do-i-offer-paid-mentorship&quot;&gt;&lt;strong&gt;Why am I doing this for free? Do I offer paid mentorship?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Many engineers, especially those at Big Tech companies, offer paid mentorships through platforms like Topmate, charging varying fees. While having a second income is fine, I’ve received help throughout my 9-year career without being charged. It doesn’t feel right to start charging for sharing the same knowledge. My religious beliefs also motivate me to offer help for free. I’ve encouraged others to help for free whenever possible. My job pays well, so I don’t want to charge for an hour of conversation. Additionally, not all calls are about mentorship; some people just want honest chats about work, experiences, productivity, team culture, and more. As of now, I don’t plan to offer paid mentorship services. Feel free to message me on LinkedIn if there’s anything I can help with.&lt;/p&gt;

&lt;h2 id=&quot;interview-preparation&quot;&gt;Interview Preparation&lt;/h2&gt;

&lt;p&gt;As half of the engineers were in their notice period, this was a pretty common question — How to prepare for interviews and what all things to study. I’ve already written in detail about my &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;interview experiences&lt;/a&gt;, &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;resume improvement journey&lt;/a&gt;, &lt;a href=&quot;https://blog.gagan93.me/low-level-design-interviews&quot;&gt;low level design interviews&lt;/a&gt; and &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;job titles&lt;/a&gt; on my blog. I’ll still share more based on their specific questions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Learn about different companies&lt;/strong&gt; &lt;strong&gt;and target accordingly&lt;/strong&gt; - Talking specifically about engineering roles, there are different types of companies like services companies, consultant companies, early/mid-age startups (Seed/Series-A/Series-B), Scale-ups (Series C+, post IPO), and Big-Tech companies. To explain a bit about each of them:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Services companies&lt;/strong&gt; typically include (but not limited to) Infosys, TCS, Accenture, Cognizant etc.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Consultant&lt;/strong&gt; ones could include &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Three_\(management_consultancies\)&quot;&gt;MBB&lt;/a&gt;, Thoughtworks, etc. Similar to the first one, you are working for others (not on your own products) but the role consultant-based where you completely handles client, not just code.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Early/mid age startups&lt;/strong&gt; could include any company that is going 0-1 (building MVP) or 1-10 (secured some funding and building for real customers). People in such companies are expected to be &lt;strong&gt;generalists&lt;/strong&gt;, who can wear multiple hats and can get work done really fast.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Scale ups&lt;/strong&gt; could include post IPO companies like Zomato, Paytm, Delhivery, and similar companies. I could categorize them as young, agile, fast-moving but having lot of governance and processes because of being a public entity.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Big Tech&lt;/strong&gt; (as you’d expect) includes FAANG, and similar sized companies like Atlassian, Uber, Stripe etc. I’d call any other company as BigTech if they have &amp;gt;1000 engineers. In comparison to any other kind of company, here you’d find a lot of internal tooling.&lt;/p&gt;

        &lt;p&gt;There’s a trend of people moving from services companies and startups to Big Tech companies, but I’ve also seen people move from startups to other startups or from Big Tech to startups. For example, I started at a services company (not as big as the ones mentioned) and then moved to startups. So I’d recommend you to decide types of companies you want to target and prepare for them accordingly. There are many websites, videos, and interview experience blogs that explain the interview processes for each of these.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Process familiarity&lt;/strong&gt; - All companies have their own process for selecting candidates. While common rounds like DSA, LLD, HLD, and HM exist in most companies, always get the details from your recruiter. If you’re interviewing with a large company, the recruiter will likely give you a document explaining the process with resources to help you prepare. In smaller companies, you often need to ask questions to get clarifications. I’ve met engineers who didn’t know the total number of rounds because the recruiter didn’t explain, and they didn’t ask. You must ask these questions to understand what is expected in each round so you can prepare accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt; &lt;strong&gt;for preparation&lt;/strong&gt; - A lot of my work over the past 2-3 years has focused on refactoring and migrating systems, which has improved my low-level design skills. One way to prepare is by taking on similar work in your current role to naturally enhance your design skills. However, this approach doesn’t work for DSA and HLD rounds. That’s why I view the LLD round differently from the DSA/HLD rounds. Generally, people in roles like SE, SSE, or Staff, who are individual contributors, are involved in building or maintaining systems, writing, and deleting a lot of code. Engaging in similar work will automatically improve your low-level design skills as you create and refine system designs. On the other hand, most of us don’t use the advanced data structures that are tested in interviews, making DSA a topic specifically for interview preparation. Similarly, few engineers get the opportunity to build or modify high-level designs, so they don’t improve practically in System Design. Working at an early-stage startup in my last role gave me a solid understanding of cloud and system design, which many engineers don’t get. To succeed in these rounds, I recommend spending a few weeks or months (depending on your current skills and preparation time) to master the basics of these areas:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Resume building&lt;/strong&gt; - &lt;strong&gt;Please please please&lt;/strong&gt; spend time in building and continuously improving your resume. Eliminate all spelling mistakes, punctuation errors, and any other beginner mistakes. For a detailed overview on how I did it, read &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;DSA&lt;/strong&gt; - Leetcode helped me improve my DSA skills, but for my role (Senior/Staff) the questions were mostly easy-medium level. Based on your level and companies you’re targeting, you might be asked a combination of easy/medium/hard questions, so prepare accordingly.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;LLD&lt;/strong&gt; - I studied from multiple youtube channels and solved some problems in Ruby and Java (available &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning&quot;&gt;here&lt;/a&gt;) so that I can solve them on a decent speed during the interview. I did not spend a single penny on a paid resource for LLD. If you want to know more about different kinds of LLD interviews I gave, I’ve written a &lt;a href=&quot;https://blog.gagan93.me/low-level-design-interviews&quot;&gt;detailed blog&lt;/a&gt; on it already. Feel free to check it out.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;HLD&lt;/strong&gt; - I was skeptical on my HLD skills so I took a paid course but that was badly structured. It was enough to confuse any beginner but having a good idea of those concepts already, I was able to navigate through it and complete about 70% of it before giving interviews. Later, someone told me about Educative.io and it looked much better organised. I’m not pushing you to use the same resource because of a few reasons. First of all, it’s a paid course and I do not promote anything paid on my blogs. Secondly, it’s a text based course while most of the other courses are video based. I’m fond of reading so I purchased it, you may not like it if you’re not into reading. And third, their well-known system design course (Grokking) is very long. So I’d recommend this only if you want to learn the concepts beyond interviews and the course falls within your budget. Although I don’t endorse it, I can vouch for the quality of content.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Behavioural / Hiring manager&lt;/strong&gt; - Watch some free youtube videos to understand the structure of this round and what people generally ask. Beyond that, just be true to yourself and be good at communicating your thoughts. You might struggle here if you’re not an efficient communicator.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Where to apply? -&lt;/strong&gt; There are plenty of websites could help you. Again, I didn’t spend anything for my job search but these are the websites I used - LinkedIn jobs (set relevant job alerts), Tophire (I got Branch’s offer through them), Bigshyft (I still get calls from them 😂), Instahyre (Atlassian reached out through this) and Hirist. I also registered on Indeed and Naukri but never got relevant openings through them. You can find and register on more platforms but at least register yourself on these.&lt;/p&gt;

    &lt;p&gt;I hope this helps for interview preparation. Moving on to the next topic 😎.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-large-teams-work&quot;&gt;How large teams work?&lt;/h2&gt;

&lt;p&gt;Let me add more context to this question — This was asked by someone who was working for a startup for about 4 years, and was wondering how things would unfold if their team scaled 2x-3x in strength. How would the projects be managed and what challenges would exist for them being an old member of the team who is transitioning more towards a managerial role. This is a common question for people working in small teams. They sometimes wonder how large teams operate to make something as large as Youtube, Google Maps, or Amazon S3.&lt;/p&gt;

&lt;p&gt;Having worked for startups mostly, this question was slightly out of syllabus for me 🤣. But I’ve read about large organisations and how they work, so I could add some insights.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First of all, no large system is built in a day, or week, or even a month. Smart engineers start building things in the most stupid way, and iterate on them as they find bottlenecks in the system that prevents it from scaling further, so that they can replace those specific parts of the system. I remember my last company’s co-founder (who was also a Ruby engineer) using a hacky way for partitioning tables in Postgres 9.3. If you’ve used that version of Postgres vs Postgres 12+, you’d know that the current partitioning features didn’t even exist in that version. But at that time we didn’t have enough choices because we were pretty early stage and had limited exposure to good tech. Once it was no more scalable for us (at 38TB single Postgres database, when the cost was really huge), the team handling that system redesigned the same into a separate data layer that used a suitable technologies. It’s very important to start stupid initially and satisfy the business needs so that you can sell whatever you made. For example, it would be hard to assume that YouTube used MySQL to begin with, and they made it work till a &lt;a href=&quot;https://www.reddit.com/r/programming/comments/1d4u12d/how_youtube_was_able_to_support_249_billion_users/&quot;&gt;massive scale&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having large systems doesn’t mean that you have really large teams that run them in a monolith fashion. For example, Amazon’s &lt;a href=&quot;https://aws.amazon.com/executive-insights/content/amazon-two-pizza-team/&quot;&gt;two pizza rule&lt;/a&gt; is very popular in the software industry that says — &lt;em&gt;No team should be big enough that it would take more than two pizzas to feed them&lt;/em&gt;. &lt;em&gt;Ideally, this is a team of less than 10 people: smaller teams minimize lines of communication and decrease overhead of bureaucracy and decision-making.&lt;/em&gt; Also, because we’re talking about large teams and about Amazon, &lt;a href=&quot;https://highscalability.com/behind-aws-s3s-massive-scale/&quot;&gt;this article&lt;/a&gt; is a great reference. The most popular blob storage service, Amazon S3 alone is composed of more than 300 micro-services, and you cannot assume all the teams building them to come in a one giant standup thrice a week to talk about their work. It’s obvious that a lot of engineers and managers would be managing these services so that they can focus on specific areas. At the same time, it’s very easy to talk about good engineering management at that scale, than doing it efficiently. So I always appreciate how these large organisations remain agile and build massive applications for their customers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your company is building really large systems, they also invest in building Internal tools so that developers in different teams follow same standards and do not reinvent the wheel for solving similar problems. In my previous role, I’ve worked in the developer productivity team for more than one year. As our team was scaling in strength and developers were breaking the system into microservices, we were building internal tools for configuration management and deployment so that we could easily deploy the applications to EC2 machines, dockers or kubernetes. We were required to support multiple deployment systems because we had not transitioned fully to kubernetes and different applications (both old and new) were getting deployed to different platforms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not all the processes of large organisations make sense for small organisations, or for those organisations that are scaling to a larger one but I’d like to emphasize on one very important rule that impacts the success of projects — &lt;a href=&quot;https://daily.stoa.com/newsletter/single-threaded-leadership&quot;&gt;Amazon’s Single threaded leadership principle&lt;/a&gt;. In startups, we generally don’t hire people as new initiatives begin. As a result, same set of people are juggling (and sometimes struggling) with multiple initiatives. If there are some gaps in the quality of delivered products, it’s acceptable to the leadership because they know that people are trying their best. With teams scaling to a larger strength, it is important to revisit this culture. If it is not acceptable going forward, it’s important to improve the team’s culture in a way where people are not overwhelmed with projects and whatever they deliver is of much better quality. The &lt;strong&gt;Single Threaded Leadership&lt;/strong&gt; &lt;strong&gt;Principle&lt;/strong&gt; might make some sense for the scaling organisation because at a specific point, teams might be catering enterprise clients where quality is very important.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-i-hire-people&quot;&gt;&lt;strong&gt;How do I hire people&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I’ve been contributing to hiring efforts from my second year as a Software Engineer, where I use to take DSA round. I’ve taken hundreds of interviews since that time, which include the same for Engineers (junior / senior / lead), Managers, QAs and Devops. I personally believe that it’s very important to understand the candidate and their aspirations, rather than just throwing a problem in front of them and talking about it for an hour. Interviews of a candidate should happen in a way where each interview helps you to paint a clearer picture of their behaviour and skills rather than every round starting with the old “please introduce yourself” question. To hire anyone in future, I’d look for these things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical excellence&lt;/strong&gt; - If it’s a hands-on technical role, it’s very important to ensure that the candidate understands code and should be fluently coding in one language of their choice. I always focus on the basics rather than evaluating someone on a fancy leetcode problem. As an example — while interviewing Devops people, my favorite interview question use to be &lt;em&gt;“You’re trying to SSH to a machine but the command is unresponsive unless you cancel it. How would you debug this?”.&lt;/em&gt; I want to see how people respond to such basic questions —What clarifications do they take on this small question? Do they talk about network barriers like security groups or VPC route tables? Do they consider the fact that if the authentication key is wrong, then you immediately get an error rather than having a hung connection. I appreciate good debugging skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ability to break a problem&lt;/strong&gt; - You could learn about this while evaluating design rounds, or when they explain some of their projects. IMO, if someone can break problems into parts, they can work on things incrementally rather than doing big-bang releases/refactors. Also, these people estimate projects better than those who do not understand the &lt;a href=&quot;https://blog.gagan93.me/classify-your-codebase&quot;&gt;power of small changes&lt;/a&gt;. This is an under-rated technical skill.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Programming language agnostic&lt;/strong&gt; - I’ve done one wrong hiring in the past where the candidate was too much tied with Spring boot framework (not just Java). They told about the same after joining but I was not managing projects that were Java based. In the end I had to move them in some other team because the other option was to let them go. As a learning, I’d not expect a person to be &lt;a href=&quot;https://www.techtarget.com/searchsoftwarequality/definition/polyglot-programming&quot;&gt;polyglot&lt;/a&gt; already, but open enough to work in any language.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quality of work -&lt;/strong&gt; When evaluating their solution in any round, check if their solution meets the ask of the problem statement. How well do they handle the edge cases? Do they ask enough clarifications where required (or they just assumed those)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Getting things done -&lt;/strong&gt; While quality of work matters, I’ve seen people getting stuck on small things and not having enough bias for action. Having worked in startups, I think this is something I’d look for all kinds of roles. If you’re a good engineer who writes optimised code but do you not push the barriers that come your way, you might not be able to release something real that gets used by the customers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cultural aspects&lt;/strong&gt; - In small organizations, while we may not conduct formal behavioral interviews, all interviewers are vigilant about observing a candidate’s behavior throughout the interview process. This careful observation is crucial to ensure that we do not end up hiring someone who might not be a good fit for the team. From my experience, I have witnessed the consequences of hiring the wrong person, ranging from fresh graduates to Heads of Engineering (HOEs). Depending on their role and influence within the team, a poor hiring decision can lead to significant negative impacts, even within a short timeframe.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Good basics + great debugging skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ability to break problems and some past experience working on quality projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bias for action, humble and eager to learn.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cultural-differences-between-indian-and-non-indian-teams&quot;&gt;&lt;strong&gt;Cultural differences between Indian and non-Indian teams&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I think all of you have heard of a few cases in the recent past where employees died at work or committed suicide due to work pressure. It’s very unfortunate to see the same companies having great working culture outside India and highly toxic culture in India. I wrote about &lt;a href=&quot;https://blog.gagan93.me/blameless-culture&quot;&gt;blameless culture&lt;/a&gt; recently where I shared some examples of how good or bad culture propagates from the top to bottom, or from old employees to new employees. It all boils down to a few people on the top that we call as &lt;strong&gt;the leadership.&lt;/strong&gt; These people define:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Code values and principles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Quality of work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Communication Style.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response to mistakes / failures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And most importantly - Work life balance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For me, the 16-hour workday philosophy is nonsense. If I don’t have time to think about other things in life, I can’t grow personally or professionally. I’ve worked with US teams in my first organization, and now I work with both US and Africa teams (in addition to the India team). Fortunately, the overall culture encourages taking leave whenever needed, whether for a personal emergency, rest, or vacation. People in the US don’t work beyond a certain limit, but that doesn’t mean they haven’t created good products or scaled companies.&lt;/p&gt;

&lt;p&gt;In a nutshell,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Do not over-work regularly. Doing the same for a few days should be fine based on the business needs and your physical/mental health.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you or your team overworks everyday, figure out what could be wrong (some ideas &lt;a href=&quot;https://blog.gagan93.me/eight-productive-hours&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://blog.gagan93.me/efficient-fullstack-delivery&quot;&gt;here&lt;/a&gt; for engineering teams).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not value any work or opportunity above your health or family.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fix the company culture if something is wrong. If the leaders do not support you, find a new job.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Take your work seriously. In the 8-9 hrs you put, give your 100%.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-you-handleconvey-delays-across-layers-of-stakeholders&quot;&gt;&lt;strong&gt;How do you handle/convey delays across layers of stakeholders?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let’s consider this hierarchy: developers (including you) → project manager → business teams → customer. Anyone who has successfully launched a product knows that initial estimates are often inaccurate. The accuracy of your estimates depends on many factors, such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How &lt;strong&gt;undefined&lt;/strong&gt; is the problem? - Do we need to check if it’s feasible? Are there dependencies on other teams?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How much &lt;strong&gt;experience&lt;/strong&gt; does our team have in building something like this? - This includes the experience of senior engineers, product managers, and designers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How well did we &lt;strong&gt;break down the problem&lt;/strong&gt; while estimating? - If you break it down well, you’ll likely complete half of the software design, and your estimates will be closer to accurate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How &lt;strong&gt;new&lt;/strong&gt; is the team? - If there are many new members, there is a possibility of inaccurately estimating their speed in developing production-ready systems.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beyond this, each layer should understand that the previous layers might exceed their estimates, so they should include their own buffers. For example, if developers estimate 6 weeks, managers should say 7-8 weeks, and the business team should tell the end customer 8-10 weeks. It’s okay to &lt;em&gt;under-commit and over-deliver&lt;/em&gt; (but not the reverse).&lt;/p&gt;

&lt;p&gt;If your team can follow this kind of framework, it‘s great. Because then you don’t need to do the hard part of convincing the customer who was waiting for a feature. I’d like to add one point for the managers — Your team could be bad at estimating something. But that doesn’t mean that you give your own estimates to the business team. A non-engineer should never estimate on behalf of engineers. If you think their estimates are wrong everytime, sit with them and retrospect.&lt;/p&gt;

&lt;h2 id=&quot;big-tech-engineers-are-superior-to-us&quot;&gt;&lt;strong&gt;Big Tech engineers are superior to us&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I respect great engineers and managers who have built really large systems without which the world would have been very different. At the same time, do not think that they are of a different breed. I think engineers in startups typically work in environments with fewer resources, less structure, and more uncertainty. They wear multiple hats, tackling everything from backend to frontend, cloud and even take product decisions. This exposure forces them to develop a holistic understanding of technology and the business. In contrast, engineers at Big Tech firms may specialize in a narrow domain within a larger system, where their role and responsibilities are more clearly defined. While specialization can lead to deep expertise in specific areas, it may also mean less exposure to the end-to-end development process, product strategy, or direct customer interaction.&lt;/p&gt;

&lt;p&gt;The perception of Big Tech engineers being superior is often tied to the prestige of working at a well-known company and the assumption that these engineers have passed rigorous technical interviews. Another key difference is the sense of ownership and impact. In startups, engineers are closer to the product and customers. The features they build, the bugs they fix, and the architectural decisions they make have a direct influence on the company’s trajectory. This proximity to the business side creates a different kind of pressure but also provides unique learning opportunities that many Big Tech engineers may not experience. Ultimately, the skills and experiences gained in startups can be just as valuable as those acquired in Big Tech. Both environments have their strengths, and neither is inherently superior to the other. So the engineers in startups shouldn’t view themselves as “inferior” simply because they don’t work for a large company.&lt;/p&gt;

&lt;p&gt;On the other hand, big tech companies manage vast products, extensive business operations, and significant overall revenue. In such environments, even small optimizations made by engineers can lead to substantial financial benefits. For instance, a minor improvement in code efficiency or system performance can save millions of dollars due to the scale at which these companies operate. Therefore, it’s important not to assume that engineers in big tech are performing the same tasks as those working on an app serving only 1,000 users. The scale, complexity, and potential impact of their work are vastly different. Engineers in big tech often deal with challenges related to scalability, security, and global user bases, which require a different set of skills and approaches compared to those needed in smaller-scale applications.&lt;/p&gt;

&lt;h2 id=&quot;growing-as-an-engineer-not-a-java-engineer-or-ruby-engineer&quot;&gt;&lt;strong&gt;Growing as an Engineer, not a Java Engineer or Ruby Engineer&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I’ve been fortunate to be mentored by someone who was a polyglot programmer. Although I’ve majorly written only Ruby in production throughout my career, I’m mentally aligned to think about problems without tying them with language specific constructs. Knowing multiple languages help you to apply good things of one language in another language and build something in a unique way. With this knowledge, you can also plan to build certain parts of a system in a different language that is more optimised for the use case, especially when you get a chance to split them into services.&lt;/p&gt;

&lt;p&gt;In many of these discussions that I had with these engineers, I told them to start thinking of solving problems without talking about the language. Also, whenever given a chance, do not shy away from learning a new programming language. The maturity that comes with this mindset also helps you to write build documentations where you use more generic / industry standard terms rather than using the names of specific libraries that were used to implement the same (eg. calling part of system as &lt;strong&gt;background job processor&lt;/strong&gt; rather than &lt;a href=&quot;https://github.com/celery/celery&quot;&gt;celery&lt;/a&gt;, &lt;a href=&quot;https://www.jobrunr.io/en/&quot;&gt;jobrunnr&lt;/a&gt; or &lt;a href=&quot;https://github.com/sidekiq/sidekiq/&quot;&gt;sidekiq&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;how-to-know-about-scale-without-working-on-scale&quot;&gt;&lt;strong&gt;How to know about scale without working on scale&lt;/strong&gt;?&lt;/h2&gt;

&lt;p&gt;This question came from someone who was asked about database query optimisation in an interview. While they knew about indexes and a few other things that help you optimise queries, they had never done something like this in the past. I think there are two ways to learn about scale:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build something (in a company or as a personal project) that scales to millions of users.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or, see how others did it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By “others,” I mean learning from the experiences and mistakes of other people. Almost all large tech companies have blogs where they publish case studies, failure stories, and success stories. In addition, there are independent bloggers who write about their experiences in building and debugging large systems. Subscribe to some of these blogs, and you’ll notice a difference in your knowledge in the next three months.&lt;/p&gt;

&lt;p&gt;If you’re not sure where to start from, I’ll give you some ideas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Think of the big tech companies that your admire (examples - &lt;a href=&quot;https://github.blog/engineering/&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://engineering.atspotify.com/&quot;&gt;Shopify&lt;/a&gt;, &lt;a href=&quot;https://stripe.com/blog/engineering&quot;&gt;Stripe&lt;/a&gt;, &lt;a href=&quot;https://instagram-engineering.com/&quot;&gt;Instagram&lt;/a&gt;, &lt;a href=&quot;https://slack.engineering/&quot;&gt;Slack&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow some good substack newsletters. I really like &lt;a href=&quot;https://www.pragmaticengineer.com/&quot;&gt;Pragmatic engineer’s&lt;/a&gt; newsletter (although a lot of content is paid).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A lot of people reading this might already be familiar with &lt;a href=&quot;https://www.youtube.com/@AsliEngineering&quot;&gt;Arpit’s youtube&lt;/a&gt; channel. I really admire the quality of this content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You could consider subscribing to &lt;a href=&quot;https://blog.gagan93.me/newsletter&quot;&gt;my blog&lt;/a&gt; if you find the content good enough 🫣.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-i-generally-approach-learning-anything-new&quot;&gt;&lt;strong&gt;How I generally approach learning anything new?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are generally two kinds of things that anyone is learning:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re learning something to quickly build a prototype where you do not care about quality, use any source to learn. It could be a 10 minute youtube video, or a brief documentation, or ChatGPT prompts, that help you write some code, or understand a few basic concepts about a new technology.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re serious about learning that topic, still follow step 1 so that you build some interest and then &lt;strong&gt;learn from a book&lt;/strong&gt;. I’m old an school guy here, who would prefer books over videos. I think these days, anyone can put their camera on a tripod stand to record a video after a little bit of research. Here the quality of content might be good, average, or bad. But if you’re picking a book of a good publisher, the chances of getting a good quality content are much higher. This is my own theory, feel free to disagree 😂.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I learnt docker back in 2022 using this method. Earlier I just created a Dockerfile for one microservice that I was building. It wasn’t optimised at all (I copied it from somewhere). Later I read &lt;a href=&quot;https://www.manning.com/books/learn-docker-in-a-month-of-lunches&quot;&gt;DIAMOL&lt;/a&gt; to get a deeper understanding of Docker, after which I did a lot of optimisations in different Dockerfiles and wrote this &lt;a href=&quot;https://blog.gagan93.me/optimising-docker-builds&quot;&gt;detailed article&lt;/a&gt; to help the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous learning&lt;/strong&gt; - Your work might be very challenging, but it can still limit your learning to certain areas. Make sure to set aside some time regularly (weekly or monthly, if not daily) for learning. I understand that not every day is the same. Some days are more stressful, while others are more relaxed. Create a list of blogs you want to read or videos you want to watch, and learn from them whenever you have some free time.&lt;/p&gt;

&lt;h2 id=&quot;how-often-your-managers-sync-and-how-does-it-impact-your-growth&quot;&gt;&lt;strong&gt;How often your managers sync and how does it impact your growth&lt;/strong&gt;?&lt;/h2&gt;

&lt;p&gt;In my first organization, there was no formal manager hierarchy in my team. We all reported to one of the three founders. Our project was in maintenance mode, so we didn’t have a senior resource like a Tech Lead assigned, as they were in other teams. I wouldn’t say my growth was halted because of this, but now that I have managers who sync weekly, I see the benefits of regular manager check-ins. Many people in these calls mentioned their managers don’t sync with them regularly. Here, &lt;em&gt;regular&lt;/em&gt; doesn’t mean weekly but rather on a fixed schedule. This depends on factors like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The company culture might not encourage managers to have regular meetings with all their direct reports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your manager might be on a technical role like tech lead and not a “manager-only” role where they have a tight schedule with their own deliverables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You might be part of a fast-paced team where these meetings aren’t prioritized because delivering products is the main focus. The team may be learning a lot during this process, but that doesn’t ensure your goals align with the company’s goals.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my previous role, I met with my manager once every 2-3 months, and I was managing a team of 7 people myself. Since I hadn’t experienced regular meetings with my managers before and wondered, “What would we even discuss every week?” I didn’t schedule regular meetings with my team. Instead, I told them to reach out to me at least once a month if they felt the need. In my current role, all managers meet with their direct reports weekly. They discuss everything from professional to personal topics to help you feel comfortable and aligned for growth. In short, managers should set up regular meetings (weekly, every two weeks, or at most monthly) to ensure that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Their direct reports do not feel disconnected from them, especially in a remote setup. A strong connection is important to ensure that employees are motivated and feel comfortable enough to give feedback for the team’s overall improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If there are performance issues or expectation gaps, they should be addressed early, rather than during the appraisal cycle. This ensures you have enough time to fix those gaps promptly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your career goals are aligned with the company’s goals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;These meetings can also cover topics beyond work, like how you are planning an extended weekend or how everyone is doing at home. After all, a healthy team is like a family :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-i-know-about-teams-culture-before-joining&quot;&gt;&lt;strong&gt;How do I know about team’s culture before joining?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;A strong team culture fosters productivity by creating a supportive environment, while a toxic culture can decrease morale, leading to disengagement, lack of collaboration, and ultimately, low productivity. More than compensation, culture is crucial, yet many people overlook it before joining a company. If you’ve only experienced companies with good culture, you might not recognize bad culture till you get to see it first-hand. It’s important to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If the team engages in productive meetings or they just setup long meaningless meetings with a lot of folks. Do meetings have agenda and end with either action items or followup meetings?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How is failure handled? Does the team engage in blame game or fixes the root cause and learns from it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do people generally feel about the product they’re working on? Are they proud of it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do people encourage sharing feedbacks openly or does everyone think “they’re right”?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, you might be thinking — how do I know about these things before joining? It’s not that hard. I’d do all this to confirm the same:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;During your interviews, pay attention to how organized and punctual the interviewers are. Notice their communication style, how they evaluate your solutions, and the feedback they provide. A big red flag for me in design rounds is when people have fixed solutions in mind and &lt;strong&gt;force&lt;/strong&gt; you to change your design to match theirs. Such people won’t let you innovate even after you join the team.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check online reviews on some websites to get a sense of the company. Remember, some reviews can be biased, so this should &lt;strong&gt;not be the only thing&lt;/strong&gt; you consider.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talk to current or former employees to see how they feel about their work. Ask specific questions (like those listed above) instead of just asking, “How do you feel working at &amp;lt;company_name&amp;gt;?” Make sure you &lt;a href=&quot;https://blog.gagan93.me/asking-good-questions&quot;&gt;ask good questions&lt;/a&gt;. If they’re unhappy, they likely won’t want someone else to join and be unhappy too. To get a better idea, talk to at least two people.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In discussions with your recruiter or hiring manager, ask about work-life balance, leadership principles, and other factors that affect productivity. Compare their responses to what employees have shared about their experiences.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-be-good-at-real-world-hld&quot;&gt;&lt;strong&gt;How to be good at real world HLD?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This response overlaps with “&lt;em&gt;How to know scale without working at scale?&lt;/em&gt;”. You don’t easily get the chance to build something large or join a team scaling their systems. The best thing you can do without much investment is to learn from others’ designs and mistakes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;IIf you work for a company with large systems, talk to the people who built them or have been working on them for a long time. Read documentation to understand design decisions and how they’ve evolved. Look for &lt;a href=&quot;https://github.com/joelparkerhenderson/architecture-decision-record&quot;&gt;ADR&lt;/a&gt; documents in large companies to learn the reasons behind these decisions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re on a small team with scaling products, it’s a great opportunity to learn how to optimize the system for scaling without overspending. Understand how indexes speed up queries and which types you need. Learn about caching and cache invalidation (the &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;second hardest thing in computer science&lt;/a&gt;). Learn how you can write modular code to make future changes easier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re on a team with unstable products, find out what causes outages and read past outage postmortems. You’ll learn more from outage calls than from regular work. Don’t miss this learning opportunity (I’ve also shared my insights from &lt;a href=&quot;https://blog.gagan93.me/debugging-production-downtimes&quot;&gt;debugging production outages&lt;/a&gt; here).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If none of these apply to you, learn from others through newsletters, blogs, and videos that explain these concepts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Being good at HLD is not building scalable systems on day 1, but starting with a stupid solution and innovating on the go. And in this process, you should know (or learn) what part of systems can potentially be a bottleneck so that you plan your changes accordingly.&lt;/p&gt;

&lt;h2 id=&quot;im-not-working-on-kubernetes-or-microservices-will-i-be-easily-able-to-switch&quot;&gt;&lt;strong&gt;I’m not working on Kubernetes or Microservices, will I be easily able to switch?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;No system needs micro-services architecture, an EKS cluster or Kafka to begin with. Even when they acquire real customers, they still might not need these technologies. Mature technical leaders know the challenge of introducing fancy parts in the infrastructure, and they make sure that you do not have them unless you can pay for the operational cost of running and maintaining them. It’s easy to spin a Redis cluster, an EKS cluster or even an API gateway with a few clicks on your favourite cloud provider. But it’s not easy to get away with these technologies once you’re in. For example, an EKS cluster has a starting cost of ~ $70-$80. In a similar cost, you can launch 2 small EC2 machines behind an Application loan balancer along with a small RDS. While EKS solves for your “scaling needs”, you don’t need to solve them on day 1. I remember my last company was running a single EC2 server that was also running background jobs in a 4 core, 16G machine when I joined in 2018. It worked pretty well for them at that time and we didn’t introduce an ALB till late 2018 because that has a fixed monthly cost + data transfer cost that no one wants to pay from the first day.&lt;/p&gt;

&lt;p&gt;This question came from someone who had 5+ YOE experience but no experience working on microservices. My suggestion here is that you should read about microservices and when it’s good to have them in your system. I’ve worked on transitioning monolith to microservices after reading &lt;a href=&quot;https://www.amazon.in/Monolith-Microservices-Sam-Newman/dp/1492047848&quot;&gt;this book&lt;/a&gt;, and trust me that it’s not everyone’s cup of tea. You need a dedicated team to work on it rather than a few engineers working on it part-time. Even then, there are high chances that you end up building a more convoluted architecture (some thoughts shared &lt;a href=&quot;https://blog.gagan93.me/monolith-microservices&quot;&gt;here&lt;/a&gt;). For you as an engineer, it’s important to know all the challenges so that whenever you get a chance to do such a migration, your chances of being successful are high.&lt;/p&gt;

&lt;p&gt;Working on distributed systems isn’t something everyone gets to do, but it’s important to understand their pros and cons. This way, future interviewers can assess your knowledge, and you won’t appear uninformed about these systems. So be it microservices, kubernetes or containers — know little bit about everything even when you don’t get to work on them in production.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thank you for taking the time to read through this post. I hope the insights were worth the time you spent. Hearing firsthand about the diverse challenges, growth experiences, and problem-solving approaches was a reminder of how valuable open dialogue is for learning and professional development. Whether you’re navigating similar paths or different ones, I hope these reflections offer useful perspectives. Do share this with your friends who are looking for similar advice. Let me know your thoughts in the comments. See you in the next blog post 🚀.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="networking" /><category term="engineering" /><category term="learning" /><category term="growth" /><category term="interviews" /><summary type="html">This is a long blog post that captures some queries that people had in the 1:1 that I had with 10 engineers last month.</summary></entry><entry><title type="html">Blameless culture</title><link href="https://gagan93.me/blog/2024/09/22/blameless-culture.html" rel="alternate" type="text/html" title="Blameless culture" /><published>2024-09-22T00:00:00+05:30</published><updated>2024-09-22T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/09/22/blameless-culture</id><content type="html" xml:base="https://gagan93.me/blog/2024/09/22/blameless-culture.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-09-24-blameless-culture.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-krakenimages-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@krakenimages?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;krakenimages&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/man-in-white-dress-shirt-sitting-beside-woman-in-black-long-sleeve-shirt-376KN_ISplE?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Mistakes are inevitable in any project, especially when it comes to complex software projects. However, the way we respond to those mistakes can make or break the motivation and productivity of our teams. This post discusses how fostering a blameless culture can enhance team productivity.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-blameless-culture&quot;&gt;What is a Blameless Culture?&lt;/h2&gt;

&lt;p&gt;Have you ever heard of teams where individuals blame each other when a product release is delayed? Or perhaps, unfortunately, worked with such teams? It is quite disheartening to be part of a team where such inefficiencies outweigh productive work. A few reasons why this happens are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If managers do not invest sufficient time in designing a system that promotes transparency,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or when most of the team members encourage the blame-game, and no one steps up to highlight that this approach harms team motivation,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or where it is normal to delay releases or shift responsibilities, rather than maintaining clarity.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is exactly opposite of how &lt;strong&gt;Blameless culture&lt;/strong&gt; looks like. In a Blameless culture, we emphasize on &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;improving&lt;/strong&gt; but &lt;strong&gt;without pointing fingers&lt;/strong&gt;. So when a mistake happens, the focus is on analysing the &lt;strong&gt;root cause&lt;/strong&gt; and &lt;strong&gt;fixing it&lt;/strong&gt;. In such a culture, people are open to communicate and accept their mistakes rather than hiding them or shifting blames.&lt;/p&gt;

&lt;h2 id=&quot;role-of-processes&quot;&gt;Role of processes&lt;/h2&gt;

&lt;p&gt;Let’s say you work in a startup with less than 10 people. There are high chances that you won’t have a process defined for anything. So if you are working in the leadership team and someone comes and asks for a leave, or wants to get their laptop repaired, or needs a comfortable chair — you will need to define a process for them. On the contrary, in a large organisation you will see a process and budget defined for almost everything. While processes are important for any organisation, startups can’t prioritise defining these processes, as their goal is to get the first few paying customers for their product(s). At the same time, they can’t even inherit the processes from a large company because a lot of those will not make sense for a startup.&lt;/p&gt;

&lt;p&gt;As of now, I have over 9 years of industry experience, all in startups (including one at a &lt;strong&gt;very early stage&lt;/strong&gt;). I believe that team members should be open to learning new processes to tackle new challenges. They shouldn’t have a fixed mindset that makes them think in just one way. What worked at your previous company might not work at the next one. So, having an open mindset helps you adapt to the environment and come up with new, specific, and innovative solutions.&lt;/p&gt;

&lt;p&gt;Processes in startups evolve as the company grows. For instance, they determine which leave plan is effective and what kind of release schedule works best for their software. The evolution of these processes also addresses many cultural issues. I recall in my previous role, we began to develop a culture of shifting blame to individuals and teams when our product manager inquired “&lt;strong&gt;Why is the Android release delayed?”&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the frontend team, it was the QA team that approved the API too late.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the QA team, it was the backend team whose estimates were off by days or weeks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the backend team, it was the product team that didn’t consider all scenarios, leading to changes in the code design after they started building the backend..&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We saw this as a chance to improve our processes. It took us 3-4 retrospective meetings to identify what needed improvement. Our &lt;strong&gt;open mindset&lt;/strong&gt; helped us eliminate the &lt;strong&gt;wrong culture&lt;/strong&gt; and address the &lt;strong&gt;root cause&lt;/strong&gt; of our problem. I also wrote a detailed &lt;a href=&quot;https://blog.gagan93.me/efficient-fullstack-delivery&quot;&gt;blog post&lt;/a&gt; about it many years later.&lt;/p&gt;

&lt;h2 id=&quot;culture--accountability&quot;&gt;Culture &amp;lt;&amp;gt; Accountability&lt;/h2&gt;

&lt;p&gt;Blameless culture doesn’t mean avoiding accountability; it means redefining it. Accountability is about ownership of tasks and outcomes. When an issue arises, the goal is to improve the process and systems that allowed the problem to occur, rather than penalizing the individual (or team) involved. This empowers team members to take responsibility without fear.&lt;/p&gt;

&lt;p&gt;Another story I remember is from a recent interaction with a junior colleague in my last role. Both of us were in our notice period at that time. I met them face to face for the first time on their last working day 😅. They were moving to a large investment bank as a Software Engineer. Moving from a startup to a big company that deals with money, they were worried about what would happen if their code caused a loss of real money in production. My shortest answer to them was —&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;If it’s easy to cause loss of money in their systems, it’s a process problem and not an engineer’s fault. There should be sufficient processes and checks in place to make sure this doesn’t happen very easily&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, every now and then, I see a meme where an intern claims to accidentally destroy the production database. The problem is not the intern, but the policies that gave them write access to production database 😄.&lt;/p&gt;

&lt;h2 id=&quot;founding-teams-impact&quot;&gt;Founding Team’s Impact&lt;/h2&gt;

&lt;p&gt;The founding team has a profound impact on a company’s culture and processes, Founders establish the core values that reflect their work ethic and vision, setting the tone for how employees interact, make decisions, and solve problems. Whether intentional or not, the founding team’s leadership style influences the company’s norms — whether it encourages open communication, innovation, or strict hierarchy. I recently interacted with an old friend who works as a Senior Business analyst. They recently changed their job and told that the culture is very poor. In their words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our managers do not treat their reportees well. If you don’t answer their Slack messages quickly, they’ll ping others in the team asking, “Where is XYZ person and why aren’t they responding?” It doesn’t matter if the person went to the washroom for five minutes. They expect immediate responses to everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I asked about their skip manager’s behavior, they said, &lt;em&gt;“Everyone is the same here. Skip managers shout at managers, and managers shout at us.”&lt;/em&gt; 😿 This shows how a bad culture spreads from top to bottom. Another example is a story shared by &lt;em&gt;The Pragmatic Engineer&lt;/em&gt; in &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/stripe-part-2&quot;&gt;their blog&lt;/a&gt;. It’s about Stripe’s &lt;strong&gt;strong writing culture&lt;/strong&gt;. Because their CEO and CTO write a lot, it encourages everyone to do the same. As a result, all engineers and managers write long internal documents. I wrote about the impact of the founding team on the rest of the team on &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_culture-writing-team-activity-7170322475212374016-UjEc/&quot;&gt;my LinkedIn&lt;/a&gt; a few months ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re an old member of a team, your work is beyond your work profile. One major role is to ensure a positive team culture. Culture propagates in two ways:&lt;/p&gt;

  &lt;p&gt;1. Vertically (CEO -&amp;gt; Dept leads -&amp;gt; managers -&amp;gt; seniors -&amp;gt; freshers).
2. Horizontally (Among peers / among old and new people).&lt;/p&gt;

  &lt;p&gt;If there is a blame-game culture in a team of 10 members, then chances are that 11th member will also start doing that, or will leave. On the positive side, if there’s a bar of “high quality” code or processes in a team, then the new member will have to match that in order to survive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you work in a team with cultural issues, collaborate with your peers and manager to improve it. If you’re in a startup or a growing team, make sure the culture develops positively. Small habits have a big impact when others follow them, whether good or bad.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Have a good day.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Gagandeep Singh</name></author><category term="culture" /><category term="team" /><category term="motivation" /><summary type="html">Mistakes are inevitable in any project, especially when it comes to complex software projects. However, the way we respond to those mistakes can make or break the motivation and productivity of our teams. This post discusses how fostering a blameless culture can enhance team productivity....</summary></entry><entry><title type="html">Problems with generic code</title><link href="https://gagan93.me/blog/2024/09/22/problems-with-generic-code.html" rel="alternate" type="text/html" title="Problems with generic code" /><published>2024-09-22T00:00:00+05:30</published><updated>2024-09-22T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/09/22/problems-with-generic-code</id><content type="html" xml:base="https://gagan93.me/blog/2024/09/22/problems-with-generic-code.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-09-24-generic-code.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-kier-in-sight-archives-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kierinsightarchives?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Kier in Sight Archives&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/black-and-white-heart-sketch-4bhhwmsYl-c?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I’m a Senior Engineer with nearly 9 years of experience in the software industry. In one of my previous projects, I had to migrate the background job processing engine of a Ruby-based application from &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot;&gt;delayed-job&lt;/a&gt; to &lt;a href=&quot;https://github.com/sidekiq/sidekiq/&quot;&gt;sidekiq&lt;/a&gt;. For those not familiar with Ruby, think of these as two libraries that help you run async jobs in a distributed system, similar to &lt;a href=&quot;https://www.jobrunr.io/en/&quot;&gt;JobRunr&lt;/a&gt; in Java projects or &lt;a href=&quot;https://docs.celeryq.dev/en/stable/&quot;&gt;Celery&lt;/a&gt; in Python projects. We encountered several issues with the old library and realized that Sidekiq would be a much better option as we scaled. To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sidekiq runs multiple threads per process to execute jobs, while Delayed Job runs one thread per process. This means Delayed Job uses more memory for executing the same set of jobs per unit time, especially if your workloads are IO-bound.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delayed Job uses SQL table to store jobs, whereas Sidekiq uses Redis. Redis, being an in-memory database, is much faster than traditional disk-based SQL databases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sidekiq is a very popular Ruby library, so there are many extensions available for performing other common tasks. These include &lt;a href=&quot;https://github.com/sidekiq-cron/sidekiq-cron&quot;&gt;running crons&lt;/a&gt; and ensuring &lt;a href=&quot;https://github.com/mhenrixon/sidekiq-unique-jobs&quot;&gt;unique jobs&lt;/a&gt;. Additionally, Sidekiq’s author has &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/Using-Dragonfly&quot;&gt;started supporting&lt;/a&gt; a drop-in &lt;a href=&quot;https://www.mikeperham.com/2024/02/01/supporting-dragonfly/&quot;&gt;replacement for Redis&lt;/a&gt; for storing jobs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While many open-source extensions exist for Sidekiq, companies can get more features and premium support with &lt;a href=&quot;https://sidekiq.org/products/pro.html&quot;&gt;Sidekiq Pro&lt;/a&gt;.Migration phase&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We added both libraries together for a few months and gradually migrated from DJ to Sidekiq. The two most common uses of background jobs were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Calling an instance method asynchronously, like loading a model entry from the database and calling a method on it asynchronously (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.find(some_id).process_it_async&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Calling a class method asynchronously, which might initialize more classes or call methods as needed (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeClass.process_class_method_async(some_data&lt;/code&gt;).)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At that time, I was a typical &lt;strong&gt;startup engineer&lt;/strong&gt; with limited knowledge of code quality, focused primarily on &lt;strong&gt;getting things done.&lt;/strong&gt; Consequently, I wrote a small class that facilitated the migration of many usages to Sidekiq:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericAsyncWorker&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not the exact code but gives an idea of what I wrote. In short:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt; had an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, I loaded the model object and called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If not, I called the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class method&lt;/code&gt; with the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For non-Ruby developers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include Sidekiq::Worker&lt;/code&gt; makes this class a background job processor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; loads a table row from the database based on ID. It’s part of Rails’ ORM.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; dynamically calls methods of a class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was a very kind Senior Engineer who reviewed my code later and said, “&lt;em&gt;this is not good, this is too generic&lt;/em&gt;.” I didn’t understand what they meant at the time. My thought process was — &lt;em&gt;it’s working and it helped complete the migration faster, so what’s the problem?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before you read on, take a moment to think about whether this is good or bad.&lt;/p&gt;

&lt;h2 id=&quot;the-problems&quot;&gt;The Problems&lt;/h2&gt;

&lt;p&gt;Even though the code above works, it breaks key principles of good, maintainable code:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;According to the &lt;strong&gt;S&lt;/strong&gt; in &lt;strong&gt;SOLID&lt;/strong&gt; principles, a class should have one reason to change. I also apply this to methods — a method should do one thing really well. This method is trying to do two things. You might think the method is small and only doing two things, so what’s the issue? Read on to understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The code inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement expects to load the model object and then call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; on it. What if someone wants to pass arguments to that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; also? Would we add another argument or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement to handle that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What if this class is a plain Ruby class (not a Rails model) that needs to initialize the constructor and then call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;? Another flag to handle that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you might know, we assign &lt;strong&gt;queues&lt;/strong&gt; to process &lt;strong&gt;specific jobs&lt;/strong&gt;. Queues are chosen based on the urgency of the task. If many tasks start running with this generic code, how do we determine the urgency of this job class?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By just looking at the code for a minute, I quickly spotted these problems. I laugh now, thinking I wrote this back in 2019. But that’s a good sign because if you don’t like your old code, it means your design skills are matured 😇.&lt;/p&gt;

&lt;p&gt;The above is an example of &lt;strong&gt;Generic Code.&lt;/strong&gt; Such classes evolve into &lt;a href=&quot;https://refactoring.guru/smells/long-method&quot;&gt;long methods&lt;/a&gt; with a &lt;a href=&quot;https://refactoring.guru/smells/long-parameter-list&quot;&gt;lot of arguments&lt;/a&gt;, creating a mess. Over time, multiple developers change the code in these classes to fit new use-cases, often breaking existing ones. There are only two ways to solve such problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t create such classes in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you created them somehow, gradually move to specific classes and delete the old one later.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t suggest spending time untangling the mess built up over the years by different developers unless you have test cases and very strong reasons to do so. It’s better to create specific classes for each use case and migrate to them slowly.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about-testing&quot;&gt;Let’s talk about testing&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Many developers and teams don’t write unit tests. If you’re one of them, I strongly recommend you start. They make future maintenance easier and provide feedback on your design.&lt;/p&gt;

&lt;p&gt;If you write tests regularly, you’ll see that this class is hard to test. The reason is simple - it has a lot of generic behavior, making it difficult to identify all the combinations you need to test. From my past experience, &lt;strong&gt;if a class is hard to test, it likely needs refactoring&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I still see developers writing generic code for production projects. This isn’t necessarily a problem, as they are on the same learning journey I once experienced. When I encounter this, I take the time to discuss it with them. I emphasize the importance of writing specific, maintainable code. I share my experiences and lessons learned over the years.&lt;/p&gt;

&lt;h3 id=&quot;extending-the-same-thought-process-to-tables&quot;&gt;Extending the same thought process to “tables”&lt;/h3&gt;

&lt;p&gt;Developers love writing code that goes beyond their current needs. As we saw earlier, they often create solutions that are more complex than necessary. But this issue isn’t just limited to classes — we also tend to generalize tables and columns to handle more problems than they were meant to solve.&lt;/p&gt;

&lt;p&gt;Let’s imagine a developer named “John” created a table called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; to handle authentication for their app. At first, this table had only six columns:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                 Table &quot;public.users&quot;

Column         |            Type             | Nullable  |         Default
---------------+-----------------------------+-----------+----------+-----------------------
 id            | integer                     | not null  | nextval(&apos;users_id_seq&apos;::regclass)
 first_name    | character varying           |           |
 last_name     | character varying           |           |
 email         | character varying           | not null  |
 created_at    | timestamp without time zone | not null  |
 updated_at    | timestamp without time zone | not null  |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As time went by, they realized they needed more columns like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;middle_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country_code&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone&lt;/code&gt;. So, they added those columns as needed (sounds good, right?). As their product expanded to multiple countries, they needed to track specific attributes for each country. They decided to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonb&lt;/code&gt; column to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; table to handle these “country-specific” attributes because some keys were valid in one country but not in another. Adding separate columns for each attribute seemed like overkill. Thinking ahead, they named this field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A month later, another developer, Lee, decided to add their data to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_attributes&lt;/code&gt; column since it was a similar use case (but not dependent on country). Within a year, this column had different values for different users, and no one knew all the use cases for this column. This is why I sometimes don’t like NoSQL schemas — they are too flexible unless you have proper safeguards. To avoid this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;John could have named this column something other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_attributes&lt;/code&gt; to indicate it was for storing country-specific attributes only (better naming).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John could have created different tables with a 1:1 relation to users for such use cases. Anyone could check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country_code&lt;/code&gt; column and figure out which table(s) are relevant for a specific country’s user (better design).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whenever we introduce a bit of &lt;strong&gt;generic behavior&lt;/strong&gt; in our code or database design, it is likely to be misused later. This happens because everyone thinks differently and wants to deliver quickly 🚀.&lt;/p&gt;

&lt;p&gt;This is just the first level of misuse. Another common &lt;strong&gt;generic mistake&lt;/strong&gt; is creating tables like &lt;strong&gt;tags&lt;/strong&gt; or &lt;strong&gt;attachments&lt;/strong&gt;. Once these tables exist, everyone adds their own use cases, making them very large. I’ve seen cases where more than 50% of data is in a generic table, just to avoid adding a column to the primary table. While querying the primary table is easy, querying this table requires a large index, which can be even bigger than the table itself. The problems with large generic table are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You can’t archive old data even if the index and table size keep growing. So you end up paying the cost of keeping all this data in hot storage (eg. SSDs).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can’t partition the table easily.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Queries become slower over time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Internal tasks like &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-vacuum.html&quot;&gt;Vacuuming&lt;/a&gt; take longer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you upgrade your database, these tables take more time to analyze and start serving data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And all these problems exist because there are too many use cases being served, and you have no idea how your solution could affect the users. Just like with generic classes, the solution is to eliminate this table and gradually migrate the data to specific columns (or perhaps specific tables).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While generic code and database design can offer flexibility and quick solutions in the short term, they often lead to significant long-term challenges. Over-reliance on generic patterns makes testing difficult, as it’s hard to test all the supported cases. Similarly, abusing generic database structures can result in performance bottlenecks, scalability issues, and maintainability problems. The key takeaway is to strike a balance between flexibility and specificity. While some level of generalization is beneficial for code reuse and rapid development, it is essential to maintain a clear structure, define boundaries, and optimize for performance and future growth to avoid technical debt.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Have a good day.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, please read these too:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.gagan93.me/multi-tasking-is-not-so-cool&quot;&gt;Multitasking is not that cool&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are you planning to transition from monolith to microservices? Read &lt;a href=&quot;https://blog.gagan93.me/monolith-microservices&quot;&gt;this&lt;/a&gt; once.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re planning data migration from one system to another, read &lt;a href=&quot;https://blog.gagan93.me/migrating-data-across-services&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gagandeep Singh</name></author><category term="generic-code" /><category term="refactoring" /><category term="solid" /><summary type="html">I try to explain the pitfalls of overly generic code and why it&apos;s beneficial to avoid it. I share my experiences and lessons learned over the years. I explain how generic code can become a maintenance nightmare in the long run..</summary></entry><entry><title type="html">Unseen risks of Inheritance</title><link href="https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance.html" rel="alternate" type="text/html" title="Unseen risks of Inheritance" /><published>2024-08-25T00:00:00+05:30</published><updated>2024-08-25T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance</id><content type="html" xml:base="https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-08-25-unseen-risks-inheritance.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@flyd2069?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;FlyD&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/text-5lU_WmKVus4?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I started learning Object-Oriented Programming (OOP) with C++ during my college days, and &lt;strong&gt;Inheritance&lt;/strong&gt; is one of the key concepts you can’t miss when learning OOP. In fact, inheritance is one of the four core principles of OOP, along with &lt;strong&gt;Encapsulation&lt;/strong&gt;, &lt;strong&gt;Abstraction&lt;/strong&gt;, and &lt;strong&gt;Polymorphism&lt;/strong&gt;. In our textbooks, the examples of inheritance were quite simple. The one I remember involved a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, where classes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; inherited from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; and override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;area&lt;/code&gt; method. Unfortunately, real-life classes are never that simple 😄.&lt;/p&gt;

&lt;h2 id=&quot;problems-with-inheritance&quot;&gt;Problems with Inheritance&lt;/h2&gt;

&lt;p&gt;I have written a significant amount of code using the Inheritance pattern, which complicated the overall design of my system over time. A common issue was that many classes in the hierarchy contained methods that were not useful to them. These methods were inherited from somewhere in the inheritance chain. This problem often arises when you use this pattern early in the design and fail to refactor the design when things become more complicated. So basically, if you stick with the design and keep adding more behavior to the classes without rethinking the design for new requirements, you’ll end up with the same problem. As a result, your classes might have methods that don’t make much sense for them. A few other problems that come with Inheritance are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tight coupling&lt;/strong&gt; - Inheriting classes from each other inevitably increases coupling. While changes in a subclass do not affect the parent class, the reverse is not true. In a lengthy inheritance chain, any modifications to the base class design can impact all subclasses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long chain -&lt;/strong&gt; Inheritance is beneficial only when the chain is kept short. In a long chain of classes, it becomes challenging to trace the origin of method definitions and understand where they are overridden. Such a design complicates debugging and maintenance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigid design&lt;/strong&gt; - Because of the coupling introduced by inheritance, the design becomes less flexible and more rigid. When you make modifications to the base class, these changes can unintentionally affect all derived classes. This can lead to unexpected bugs or require changes in multiple places throughout the codebase.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-people-still-use-it&quot;&gt;Why people still use it?&lt;/h2&gt;

&lt;p&gt;We all know that &lt;strong&gt;low coupling&lt;/strong&gt;, &lt;strong&gt;ease of debugging&lt;/strong&gt; and &lt;strong&gt;flexibility&lt;/strong&gt; are the traits of a good design. So why should we use Inheritance if we do not get all of this? The answer to this is &lt;strong&gt;—&lt;/strong&gt; Inheritance is beautiful, only if you know how to do it nicely. For example, the Java’s collection framework hierarchy neatly implements inheritance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-08-25-unseen-risks-inheritance-java-collections.jpg&quot; alt=&quot;Java collections framework - Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above design is better because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Clean Abstraction&lt;/strong&gt; - It uses abstract classes and interfaces. Your language might not provide the same functionality (e.g., &lt;strong&gt;Ruby&lt;/strong&gt; doesn’t have &lt;strong&gt;interfaces&lt;/strong&gt;), but the general idea of breaking down the functionality should help.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; - They clearly define the role of each level, and they have been heavily refactoring the hierarchy since the collections framework was released in 1998.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design Patterns&lt;/strong&gt; - Beyond just inheritance, the framework also uses some design patterns internally to simplify the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inheritance Chain&lt;/strong&gt; - Although there is no strict rule on how long or wide your inheritance hierarchy should be, it’s good to keep an eye on it so you don’t end up with 10-20 levels of inheritance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beyond these points, the classes in the Java collection framework adhere to the SOLID principles, which are crucial for maintaining a robust and flexible design.&lt;/p&gt;

&lt;h2 id=&quot;clean-inheritance&quot;&gt;Clean Inheritance&lt;/h2&gt;

&lt;p&gt;There’s an excellent talk by &lt;a href=&quot;https://sandimetz.com/&quot;&gt;Sandi Metz&lt;/a&gt; from RailsConf 2014 (&lt;a href=&quot;https://www.youtube.com/watch?app=desktop&amp;amp;v=8bZh5LMaSmEhttps://www.youtube.com/watch?app=desktop&amp;amp;v=8bZh5LMaSmE&quot;&gt;link&lt;/a&gt;) where they explain how they refactored a code with high cyclomatic complexity to a much simpler design using Inheritance. While they are on it, they also explain when inheritance is good. Quoting from the same talk:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Despite of what you have have heard, Inheritance is not evil, and I can tell you exactly when it’s safe to use it. Here’s what you want - You want a shallow, narrow hierarchy. You don’t want it to be deep, and you don’t want it to be wide, alright? If that’s the problem you have, there’s no better solution that inheritance and you’re free to use it. Inheritance is not, evil but sometimes we are.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although I’ve provided the gist of the talk in context of inheritance, there are a lot of other good things that you can learn from the talk, so you must watch it.&lt;/p&gt;

&lt;h2 id=&quot;other-patterns&quot;&gt;Other patterns&lt;/h2&gt;

&lt;p&gt;I also wrote a bit about the use of design patterns in the Java collections framework. That’s something I’d like to explain further. As a developer, you should always look for better ways to write cleaner, simpler code. So beyond inheritance, try these things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Small classes&lt;/strong&gt; - The entire idea of maintainable software comes from writing small, extensible classes that can work together to complete a task. Make sure that your classes do a single task nicely. If you feel that the new requirements are leading to some bloat in the existing class, plan to refactor it rather than adding behaviour that doesn’t belong to it. I’ll touch on &lt;em&gt;refactoring safely&lt;/em&gt; in my next blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design patterns&lt;/strong&gt; - There’s nothing new that I’m suggesting here. It’s important for all engineers to read about design patterns at least once so that you do not make the same mistakes that these patterns solve. I’ve personally found &lt;a href=&quot;https://refactoring.guru/design-patterns&quot;&gt;this website&lt;/a&gt; excellent for design patterns (and &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;code smells&lt;/a&gt;) but it’s ok if you’ve read &lt;a href=&quot;https://www.amazon.in/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8&quot;&gt;GOF&lt;/a&gt; or some other book. I’ve personally used Facade, Adapter, Decorator, Proxy, Strategy and a few more design patterns in my projects to simplify the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Composition over Inheritance&lt;/strong&gt; (&lt;a href=&quot;https://www.geeksforgeeks.org/favoring-composition-over-inheritance-in-java-with-examples/&quot;&gt;more here&lt;/a&gt;) - A lot of code that we write using Inheritance can be simplified using Composition pattern. By composing objects from simpler, reusable components, you create more flexible and maintainable code. Composition allows you to change or extend behaviours dynamically without altering existing code, unlike inheritance that leads to rigid hierarchies and tight coupling.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While inheritance has been a cornerstone of Object-Oriented Design, it’s important to recognise its limitations and explore alternatives that offer more flexibility and maintainability. As your software evolves, adopting these approaches can lead to more maintainable code.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="inheritance" /><category term="oops" /><category term="design" /><summary type="html">I started learning Object-Oriented Programming (OOP) with C++ during my college days, and Inheritance is one of the key concepts you can&apos;t miss when learning OOP. In fact, inheritance is one of the four core principles of OOP, along with...</summary></entry><entry><title type="html">Branch International Interview Experience</title><link href="https://gagan93.me/blog/2024/06/27/branch-interview-experience.html" rel="alternate" type="text/html" title="Branch International Interview Experience" /><published>2024-06-27T00:00:00+05:30</published><updated>2024-06-27T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/06/27/branch-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/06/27/branch-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-06-27-branch-international-interview-experience.png&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;After giving a lot of interviews in small and large companies, I’ve &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7203321685398212609/&quot;&gt;joined Branch International&lt;/a&gt; this month. As I’ve shared my past interview experiences &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;here&lt;/a&gt;, I’m sharing this one too. My profile was shortlisted for the position of &lt;strong&gt;Senior Software Engineer&lt;/strong&gt; through the &lt;a href=&quot;https://tophire.co/&quot;&gt;Tophire&lt;/a&gt; platform. After that, their account executive contacted me. Once they finished, I was connected to a recruiter from Branch, who explained the company and the role to me. Those who do not know much about the company:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Branch is a &lt;strong&gt;registered non-banking financial company&lt;/strong&gt; (NBFC) regulated by the RBI, offering services in India and select international markets&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Branch’s &lt;strong&gt;fully-remote team&lt;/strong&gt; is spread across India, the US, and Africa, bringing together diverse expertise.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We offer a range of financial solutions, including &lt;strong&gt;micro-loans&lt;/strong&gt; and &lt;strong&gt;investment products&lt;/strong&gt;, to help you achieve your financial goals&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interview-process&quot;&gt;Interview Process&lt;/h2&gt;

&lt;p&gt;After speaking with the Tophire account manager and the company’s recruiter, these were the interview rounds:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hiring Manager Conversation&lt;/strong&gt; - This round was scheduled with the Chief Technology Officer. The aim of this round was to understand my current role, aspirations and what I am looking for in the next role. We discussed about my projects and about a few more technical things briefly. I took this as a chance to learn more about the company and their tech stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical Screening Round&lt;/strong&gt; - This round was scheduled with a Senior Engineer from the India team. It consisted of two parts - a data structures problem (easy) and rapid questions and answers based on web. I solved the data structures problem on &lt;a href=&quot;https://coderpad.io/&quot;&gt;Coderpad platform&lt;/a&gt; where I could choose any language to implement the solution. I was able to wind up with a working solution in 18-20 mins. There were no modifications done in the problem statement to make it harder so we moved to the next part. The rapid fire QnA part was quite unique. The questions were related to databases, security, scalability, low-level design, authentication mechanisms, etc. No coding was required to answer these questions, but they were great for assessing someone’s experience in backend development.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Low Level Design Round&lt;/strong&gt; - This round was scheduled with a Senior Engineer from the US team. The problem statement was designed in a way to see how would someone design APIs. I did not write any code in this round. We picked one problem and discussed how the APIs would look for that problem. Apart from a few APIs, rest of them were quite simple. In these (slightly complex) APIs, there were multiple ways to implement but I chose the RESTful method and explained the reasoning behind my decision. For a very specific requirement, I was also asked to write a SQL query.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;High Level Design Round&lt;/strong&gt; - This round was scheduled with an Engineering Manager from the India team. The problem statement was around one of their products. I started sketching the system after understanding the initial requirements. They asked about the role of each box (the service) in my design, the choice of database, protocols etc. After discussing each design decision in detail, we also discussed how I would test, deploy and monitor this system. We winded up the discussion in an hour.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Presentation Round&lt;/strong&gt; - This round was very unique where I was asked to prepare a presentation on my past projects and present that in front of a panel. The panel included all the previous round interviewers, and a few more people. I had submitted the presentation to company recruiter few days before the round. I presented 3-4 major projects and the panel cross questioned me wherever they needed more details. According to their job description, this round was to better understand:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Verbal and written communication skills, and ability to handle questions,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Complexity and scale of work,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ability to execute on a project, in particular around evaluating tradeoffs and making decisions&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Final Discussion Round&lt;/strong&gt; - After clearing all the rounds, the company recruiter informed me that they want to extend an offer and scheduled a call with the hiring manager again. During this call, the hiring manager asked for any feedback I had about the overall process. They explained the compensation structure, and I asked a few questions that I had noted down. They gave me time to think before accepting the offer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After careful consideration, I accepted the offer and resigned from my position at LocoNav where I had worked for over six years. It was a tough decision to leave after spending such a long time. I joined Branch on June 3, 2024, and it has been great since then.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="branch" /><category term="interview" /><category term="senior-software-engineer" /><summary type="html">I interviewed for the position of Staff Engineer II at Bain and Company in Jan-Feb 2024. They were hiring engineers for the Gurgaon team (that&apos;s a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to..</summary></entry><entry><title type="html">Tech Interview Mistakes</title><link href="https://gagan93.me/blog/2024/05/24/tech-interview-mistakes.html" rel="alternate" type="text/html" title="Tech Interview Mistakes" /><published>2024-05-24T00:00:00+05:30</published><updated>2024-05-24T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/24/tech-interview-mistakes</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/24/tech-interview-mistakes.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-24-tech-interview-mistakes.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@francisco_legarreta?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Francisco De Legarreta C.&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/a-man-with-glasses-is-looking-at-a-laptop-hHg9MC-G8_Y?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;There are a lot of mistakes people make while preparing for and giving technical interviews. Like everyone else, I also made a lot of mistakes during my interview journey and learned the hard way (by getting rejected). Generally speaking, rejections shouldn’t hurt you because they teach you a lot. But in tech interviews, there are scenarios when things are outside your control, despite the best preparation. We’ll discuss about such scenarios in the end of this post.&lt;/p&gt;

&lt;p&gt;To start with, I’ll divide this post into two parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Preparation mistakes (during preparation).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Execution mistakes (during interview).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;during-preparation&quot;&gt;During Preparation&lt;/h3&gt;

&lt;p&gt;When I started looking out, I was completely unaware of industry expectations. I got in touch with a few people who had switched roles in last few years to understand the same. Apart from industry expectations, there were many other things that I had to know, like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How titles work in different companies?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to prepare for the specific rounds? What sources are good (free / paid)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How interviews are different from real work?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the companies hire me if my tech stack doesn’t overlap much with theirs?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The more you know about all these things, the better you can prepare and manage your expectations. Let’s talk about all these things one by one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not understanding industry expectations&lt;/strong&gt; - There are two types of companies (or roles that are open). Some roles explicitly mention that you need to be an expert in a specific technology stack to even get shortlisted. The other category is of roles that require you to be a good problem solver who can learn the tech stack and get things done. Both the roles have their own significance and we cannot blame the hiring team for being stringent in the first case. If the product is in early stage, the company would prefer to hire someone who is familiar with the stack so that they can contribute fast without the need of ramping up. If the product is in later stage, it’s upto the choice of hiring team - they could hire people from a different technology stack, or they may still prefer to hire people with the same stack only. It depends on the stack also - incase they’re using something very niche (for which developers are not available easily), the hiring team relaxes the tech stack expectations. But incase hiring for that tech stack is easy, they’d prefer someone who knows the stack. In my experience, it’s easier for companies to find Java developers so rather than hiring for &lt;em&gt;Senior Software Engineer&lt;/em&gt;, they put the job title as &lt;em&gt;Senior Java Engineer&lt;/em&gt;. For medium-large organisations, the positions are tech stack agnostic for candidates who are good at problem solving. In the first case, some interview rounds focus on specific technologies (e.g., Core Java, Spring Boot). In the second case, you can choose your favorite programming language for the coding rounds.
 The above information is from my job hunt experience in the last 6-8 months. Obviously, exceptions are always there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Strong tech stack inclination&lt;/strong&gt; - This point is interesting because, deep down, programmers have strong opinions about languages. For example, some people hate PHP (&lt;a href=&quot;https://www.reddit.com/r/PHP/comments/1fy71s/why_do_so_many_developers_hate_php/&quot;&gt;example&lt;/a&gt;) while some make fun of java for it’s verbosity (&lt;a href=&quot;https://www.youtube.com/watch?v=kdMG40wUCm4&quot;&gt;example 1&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=m4-HM_sCvtQ&quot;&gt;example 2&lt;/a&gt;, &lt;a href=&quot;https://github.com/Hello-World-EE/Java-Hello-World-Enterprise-Edition/tree/master/src/com/example&quot;&gt;example 3&lt;/a&gt;). This could still be seen as a personal choice. The bigger issue comes when people &lt;strong&gt;associate themselves&lt;/strong&gt; with one tech stack only. Let’s take my example - I’ve been majorly writing Ruby for the past 9 years but I’ve also written a little bit of C, Java for Android, Powershell, Bash, jQuery, BackboneJS, and a few other languages in my current and previous role. While I too have opinions about what languages to avoid, I did not limit my job search to Ruby/Rails openings only. Limiting my job search to only Ruby/Rails positions would have been stupid, especially in the current market where openings are less. I’d recommend the same to everyone - do not call yourself a Ruby developer, Java developer or GoLang developer. Call yourself a Software Engineer who can learn syntax and be productive in any language. Having this mindset helps a lot in the long run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confusion in job titles&lt;/strong&gt; - This is the most important thing to know when you’re searching for a new role. Some websites allow you to search jobs with years of experience, while some websites (like LinkedIn) allow you to search with job titles. LinkedIn also helps you to set job alerts for specific titles. Based on multiple factors, you could be eligible for multiple roles. Taking my example again - I work as a Staff Software Engineer in a small team but when it comes to job search, I search for Software Engineer, Senior Software Engineer, Staff Engineer, Team lead and Engineering manager roles. All these roles overlap with my experience range based on the size of organisation where I’m applying. I’ve already explained this point in a &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;detailed blog post&lt;/a&gt;, so I’ll rather leave you with a link to read the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Building Resume only once&lt;/strong&gt; - Resume building is an underrated exercise. When you’re looking out, there are high chances that you’re applying to many positions without a referral. In such cases, your resume is your first impression. If you’ve not spent enough time in build the same, there are high chances that you’ll not get calls from good companies. Resume building is not a one time effort. You need to work on it continuously to reword your tasks in a more impactful manner. Just like job titles, I’ve already written a &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;detailed blog post&lt;/a&gt; on how I did more than 5 iterations on my resume in past 8-9 months. Even today, I don’t think my resume is the best it can be, so I keep improving it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not preparing an Introduction&lt;/strong&gt; - In all the companies, the first thing people ask is to introduce yourself. In some companies, each interviewer asks this question (although that sounds repetitive). Generally, you get a minute or less to talk about yourself before they ask about your specific projects or give you a problem to solve. You might have built a lot of products but it’s important to summarise your journey in this one minute and talk about everything that you find important. Write a long introduction of yourself, use AI to summarise it and keep improving it (just like your resume). I skipped this initially and found myself struggling while explaining my role/journey. I clearly remember that I forgot to explain to one employer that I manage a team of seven people in my current role. So my role might have sounded more of an &lt;strong&gt;IC&lt;/strong&gt; than a &lt;strong&gt;Manager&lt;/strong&gt; that could have good/bad impact based on what they were hiring for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applying directly to dream companies&lt;/strong&gt; - If you’re interviewing after a long time, do not get discouraged by rejections. Despite building a lot of things and being hands-on after 9 years of total experience (6+ in my current role), I faced a lot of rejections in the beginning. The current way of tech hiring is not the best way to hire good candidates, it’s a way to filter out candidates who are not interview ready. And being interview ready means something else for technical roles. You might not have built anything in real world but if you are prepared for the interviews, you’ll get the job. And the reverse is also true. For this reason, it is important to not apply for your dream companies directly (in case you are targeting some). Do many interviews at different companies to see if you can handle the questions under pressure before applying to your target company. Given the competitive nature of the market, I’ve heard from many experienced people that you should give a few interviews every year even if you’re not looking out. It’s just to bridge the gap between your current preparation and market expectations.Another way of practising to a decent level is by taking mock interviews. While there are many paid websites for the same, a free solution for the same is by using ChatGPT as your interviewer. I’ve tried it and it is decently good, if not the best. You need to do some initial conversation with it to explain what it is supposed to do (otherwise it will give you both question and answer). I’ll share my prompt for reference:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-24-tech-interview-mistakes-chatgpt.png&quot; alt=&quot;chatgpt&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The above screenshot is of my conversation with ChatGPT when I was preparing for my final round at Bain &amp;amp; Co (read the &lt;a href=&quot;https://blog.gagan93.me/bain-and-company-interview-experience&quot;&gt;complete interview experience&lt;/a&gt;). It’s important to set context for ChatGPT before you start the conversation. You can modify the above prompt for technical roles as well. I also prepared for System Design interview using this format.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Overconfidence&lt;/strong&gt; - Assuming that you already know everything can be bad. It happened with me when I was learning LLD and HLD. Because the problems seemed familiar/simple, I thought I’ll be able to crack the rounds (till I failed 1-2 of them initially). Everything demands your time and some practice. Tech interviews demand even more practice because you’re expected to build (LLD) or talk about a MVP (HLD) within a period of 40-50 minutes. Although problems seem simple, thinking about the models, APIs, writing code, or talking about high level design, databases, protocols, challenges within this time period is very hard if you’ve not spent time in practising the same. I always recommend everyone to solve at least 5-10 problems for both LLD/HLD (without looking at the solutions) before appearing for any company.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the top six things that came to my mind from my experience. Now let’s talk about mistakes during interviews.&lt;/p&gt;

&lt;h3 id=&quot;during-interviews&quot;&gt;During Interviews&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not talking enough / talking a lot&lt;/strong&gt; - In an interview, you have an hour to talk about yourself and showcase your skills. It’s important that you portray best of your skills. A good technical interview is a collaborative exercise where you and your interviewer solve a particular problem. In most of the cases, the interviewer has a fair idea around possible solution(s) because they have asked the same problem many times. A good candidate would ask questions (not cleverly seek hints) to understand the problem in depth before jumping towards the solution. There are generally three technical rounds - Data Structures, LLD and HLD. While Data structures question is a mathematical question (i.e. can be judged as right or wrong), the other two are somewhat open-ended. In many cases, ambiguities are present in the problem statement (even in DS round) to see how the candidate interprets the problem and asks questions. It’s our responsibility to make sure that we’re querying the interviewer to frame the problem better, scope the boundaries of the problem and present a solution that works for it. It’s quite possible that some iterations are needed to tailor the solution to cover edge cases or changing requirements. I’ll just recommend to keep on talking with your interviewer to make share what’s going on your mind. On the opposite side, don’t keep talking so much that you don’t leave space for them to talk or share their feedback on your solution. A balance is important here. In my experience as an interviewer, very few candidates talk more than what is required, but talking less is a common problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Assuming without discussing&lt;/strong&gt; - While you’re talking, make sure that you don’t &lt;strong&gt;assume&lt;/strong&gt; anything in your mind. Assumptions can lead to different solutions, hence it is important to speak about your assumptions. If that assumption is wrong, your interviewer will point out the same. For example: In most of the LLD problems if I’m talking about APIs, I assume that authentication is always in place and some header is coming in all the requests that is interpreted by the server for identifying the user. While most of the interviewers agree to this assumption, one of the interviewer asked this question- &lt;em&gt;What are the different authentication mechanisms you know about, and which one you’d like to use here (and why)?&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Design Interviews) Stubborn with choices&lt;/strong&gt; - In design interviews, you try to solve a problem by using some components like Databases, Load balancers, API Gateways, Firewalls, Protocols, API Servers, etc. Let’s take an example of a System Design interview. The most common discussion that happens in almost all the interviews is around the choice of database - SQL vs NoSQL (let’s assume we’re comparing SQL databases with Document oriented databases like Mongo/Elastic). We need to have strong reasons to choose one kind of database for the specific use case rather than &lt;a href=&quot;https://www.youtube.com/watch?v=b2F-DItXtZs&quot;&gt;this guy&lt;/a&gt; who is a MongoDB fan. There are many more places in a design interview where we need to make choices (eg. protocols). Just choosing one side is not enough - you need to justify your choice (or your interviewer will ask you to). Stubborn candidates leave a very bad impression on the interviewer and usually get rejected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Design Interviews) Finding the core problem / not catching hints -&lt;/strong&gt; In both LLD and HLD interviews, there is &lt;strong&gt;one core problem&lt;/strong&gt; that we’re solving. As we talk more with our interviewer and frame the actual problem from that &lt;em&gt;one liner ambiguous problem statement,&lt;/em&gt; we get closer to the problem. For example:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;In a cab booking platform like Uber, matching the driver with rider could be a core problem because you need to choose the drivers using some algorithm (you can’t just search them based on displacement as they might be a river apart).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;In a movie booking platform like BookMyShow, holding the seats while user is in process of paying for the tickets, or releasing the seats when payment fails / times out could be the core problems.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Similarly, your problem statement has one core problem which you need to identity. Although other parts of the systems are also important but this is one part that interests the interviewer. While you’re talking with your interviewer, try to see if they’re impressed with your design or are they like - &lt;em&gt;there’s something more to the problem.&lt;/em&gt; Incase you’re missing something important or are going wrong, they try to give you a hint (eg. &lt;em&gt;How are you making sure that &amp;lt;this&amp;gt; problem is also addressed?&lt;/em&gt; ). Do not miss these inputs, they may impact your overall design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bad luck -&lt;/strong&gt; In the beginning of this post, I wrote about a problem that is outside your control. That’s bad luck. I’ll share some scenarios to explain this:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Untrained interviewers -&lt;/strong&gt; This usually happens in small companies where they’re trying to expand the team. The interviewers might not be trained to conduct the discussion properly. Generally, some senior person &lt;a href=&quot;https://www.metaview.ai/resources/blog/interviewer-shadowing-the-secret-of-the-most-effective-hiring-machines-in-the-world&quot;&gt;shadows the new interviewer&lt;/a&gt; to make sure they are ready to interview but in small companies (due to multiple things running in parallel) such processes are not mature and training is not sufficient.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Stubborn interviewers&lt;/strong&gt; - Not only candidates, interviewers can be stubborn. It’s hard not only to work with them but even harder to do an interview. Such interviewers have one approach in mind and would expect you to give exactly same solution. I’ve faced this once where despite doing everything well, I was rejected. And this was because there was &lt;strong&gt;one thing&lt;/strong&gt; that they wanted to happen in a certain way and I suggested something else (with a valid reason). This person also gave me feedback (I generally ask for the same at the end of interview) that I should have asked about scale of system (in a LLD problem) so that I had modified that one thing in my solution early. I’ve &lt;strong&gt;never seen&lt;/strong&gt; anyone else talking about “scale of system” in a LLD interview. We generally go into details of API design, database design and the core problem.
 The best part - they were junior to me by designation, years of experience, and attitude towards better solutions :)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from this, many other things (like mood of the interviewer) can impact your performance. Such things are generally not in your hands. Just like for candidates, interviewers also need training and feedback. In the organisations where interview process is more formalised and where interview calls are recorded, there are high chances that the interviewer would get feedback(s) if they need to improve on certain axes. In many organisations the feedback process is completely missing, which leads to bad candidate experience. If you face such a situation, you can also share your feedback with the recruiter / hiring manager. Make sure your tone is professional and not rude if you want them to consider your feedback.&lt;/p&gt;

&lt;p&gt;I hope the above points would help you to avoid mistakes that people (including myself) generally make. Good luck for your preparation 👍.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="mistakes" /><category term="software-design" /><summary type="html">There are a lot of mistakes people make while preparing for and giving technical interviews. Like everyone else, I also made a lot of mistakes during my interview journey and learned the hard way (by getting rejected). Generally speaking, rejections shouldn&apos;t hurt...</summary></entry><entry><title type="html">Low Level Design Interviews</title><link href="https://gagan93.me/blog/2024/05/17/low-level-design-interviews.html" rel="alternate" type="text/html" title="Low Level Design Interviews" /><published>2024-05-17T00:00:00+05:30</published><updated>2024-05-17T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/17/low-level-design-interviews</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/17/low-level-design-interviews.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-17-lld.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@sambourke?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Samuel Bourke&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/woman-in-gray-hoodie-sitting-on-chair-in-front-of-laptop-computer-foH9owaHXng?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I work as a Staff Software Engineer at LocoNav. When I give interviews with my current experience (that is close to 9 years), I am considered for these roles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Software Engineer / Senior Software Engineer,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Staff Software Engineer / Lead,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Engineering Manager (incase I want to move to a management role).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The responsibilities for each role are highly dependent on the organisation’s needs, and it doesn’t harm me in the long run if I switch from &lt;em&gt;Staff Engineer&lt;/em&gt; to &lt;em&gt;Senior Engineer&lt;/em&gt; in my next role, as some might think (&lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;explained here&lt;/a&gt;). According to the role, the Low Level Design round and the overall interview process can be very different. Although the aim of this post is to talk about LLD with respect to interviews, but I believe it’s a skill that should help you on your job as well. So don’t limit your learning to interviews only.&lt;/p&gt;

&lt;h2 id=&quot;what-is-lld&quot;&gt;What is LLD?&lt;/h2&gt;

&lt;p&gt;From wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Low-level design&lt;/strong&gt; (LLD) is a component-level design process that follows a step-by-step refinement process. This process can be used for designing data structures, required software architecture, source code and ultimately, performance algorithms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s a reason for sharing this formal definition. Unfortunately, the &lt;strong&gt;interview directed preparation&lt;/strong&gt; has spoiled the &lt;strong&gt;step-by-step&lt;/strong&gt; nature of Low Level Design for many people. In many cases, the interviewers expect you to magically present the best design with working code and test cases within 45-50 minutes. While this is somewhat doable by practising the common problems, this is not what design means in Software Engineering.&lt;/p&gt;

&lt;p&gt;I’ve given about 5-6 LLD interviews and all of them were not of the same kind. I’ll first share &lt;strong&gt;how I prepared&lt;/strong&gt; for the interviews and improved my low level design skills in general. After that I’ll share &lt;strong&gt;my experience&lt;/strong&gt; with different kind of LLD interviews I gave. In the end, I’ll share different &lt;strong&gt;categories of problems&lt;/strong&gt; that I found in different playlists, courses and interviews.&lt;/p&gt;

&lt;h2 id=&quot;learning-and-improving-lld&quot;&gt;Learning and Improving LLD&lt;/h2&gt;

&lt;p&gt;Somewhere in late 2023, I was reached out by &lt;a href=&quot;https://blog.gagan93.me/atlassian-interview-experience&quot;&gt;Atlassian&lt;/a&gt; recruiting team on Instahyre when they were hiring for the position of Senior Software Engineer. At that time, I was having zero preparation and almost zero idea of the overall process. Their team phone called me to explain the entire process and shared &lt;a href=&quot;https://online.flippingbook.com/view/325478/&quot;&gt;documents&lt;/a&gt; that would help me to understand more about each round. I figured out there were three major things on the tech side - Data Structures, Low level design (LLD) and High level design (HLD/System Design). Going through details of each round, I figured out that I had practically worked on everything they would need, but I need to prepare in a way that I’m able to portray that during interviews.&lt;/p&gt;

&lt;p&gt;As anyone would do, I searched for free content. There were plenty of excellent videos on YouTube but they varied in quality. This was a typical &lt;a href=&quot;https://blog.gagan93.me/information-overflow&quot;&gt;information overflow&lt;/a&gt; problem - pick anything you want to learn and there will be 100 people on YouTube already sharing how to do it. Not all of them are the best, and almost none of them are wrong but you need to choose and stick to one or two (else you’ll get lost).&lt;/p&gt;

&lt;p&gt;This was the pattern of each channel/playlist that was teaching LLD:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Teach SOLID principles,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Teach Design Patterns,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose 5-10 of the common problems (A TicTacToe Game, Snakes and Ladders Game, Elevators System, Building Splitwise, Car Rental platform, etc.). While solving these problems, they will try to fit in at least one / two design patterns in each problem.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think this is a pretty good roadmap if you’re only targeting interviews. Practice 5-10 problems in a way that you do not look into solutions before attempting them on your own. If you look into their solutions, they look very obvious and you get fake confidence that you know everything. I was in this situation for both LLD/HLD rounds where I thought that I know everything just because I watched videos. It was only after getting rejected in good companies, I figured out that &lt;em&gt;things are not that obvious&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’ll discuss little bit about each point before moving forward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SOLID principles&lt;/strong&gt; - These principles act as foundation of good design if you’re implementing your solution in an Object Oriented Language. I’m personally a very big fan of &lt;em&gt;Single Responsibility Principle&lt;/em&gt; than any other rule or design pattern. I think if someone understands this well, they can write pretty neat classes and ensure no unnecessary sharing of code/properties among classes. I’ll not explain these principles in detail here, but I’ll leave you with an &lt;a href=&quot;https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/&quot;&gt;excellent free blog&lt;/a&gt; to read the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design patterns&lt;/strong&gt; - These patterns are nothing but solutions to common problems that people face in Object Oriented Design. For example, in large projects, developers usually write layers of abstractions over language or frameworks. While designing these classes, they figure out that you need to provide a very simple and easy to use interface (API) for the end user. Such a pattern is known as a &lt;a href=&quot;https://refactoring.guru/design-patterns/facade&quot;&gt;Facade&lt;/a&gt;. I’ve been using this pattern to build abstractions in my projects, even before I formally studied design patterns.
 If you’re 3+ years of experience, there are chances that you’ve either read or heard about the &lt;a href=&quot;https://www.geeksforgeeks.org/gang-of-four-gof-design-patterns/&quot;&gt;GOF book&lt;/a&gt;. This book is known to be the original work on design patterns. Although I got a chance to find &lt;a href=&quot;https://refactoring.guru/design-patterns&quot;&gt;this website&lt;/a&gt; (they also have a PDF book) that has very good examples and illustrations incase someone wants to learn about Design Patterns. One bonus thing about this website is discussed in the next point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Bonus) Code smells&lt;/strong&gt; - Before I found a good content around code smells, I had read about a few of them in a separate blogs. Generally, no course suggests you to read about code smells, but as I promised to share content beyond interviews that would help you to actually build good LLD, I’d suggest you to read about common &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;code smells&lt;/a&gt; and their corresponding remedies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Common coding problems&lt;/strong&gt; - Pick any playlist on YouTube and you’ll find authors discussing around building your own small version of Uber, ZoomCar, BookMyShow, Splitwise and so on. I’ll strongly suggest you to solve at least 5-7 problems on your own (without looking into solutions) before you appear for interviews. This exercise will make sure that you’re able to apply the principles, patterns and product understanding to build a good low level design. I do not have a strong choice on the content but I’ll &lt;a href=&quot;https://www.youtube.com/watch?v=rliSgjoOFTs&amp;amp;list=PL6W8uoQQ2c61X_9e6Net0WdYZidm7zooW&quot;&gt;share this one&lt;/a&gt; incase you want to get some idea on these problems.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;diving-deep&quot;&gt;Diving deep&lt;/h2&gt;

&lt;p&gt;I’ve given multiple interviews for different companies and positions. So I’ll share what is expected from each level:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For Software Engineer/Sr. Software Engineer&lt;/strong&gt; - The focus is more on machine coding. So your performance in Data structures and Low level design is judged more than anything.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For Staff/Principal/EM roles&lt;/strong&gt; - The focus is more on HLD (System design) and leadership qualities. Hands-on coding is evaluated less in comparison to HLD or in comparison to junior roles. You’re just asked to share the schema design, API design, any challenging part of system that you need to discuss about.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As an example, I was asked to write code for LLD of the &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/ruby/snakegame&quot;&gt;Snake Game&lt;/a&gt; in the Atlassian Interview process. As this was for a Senior Software Engineer role, the focus was on hands-on coding and they expected me to write completely working code within 45 minutes (plus some discussion around how I’d test this).&lt;/p&gt;

&lt;p&gt;Whereas for Staff Engineer role, one of the LLD round did not involve coding at all. We majorly discussed the system entities (models), their relations, little bit on database design, API design and some specific parts of the system that sounded tricky (I call it the &lt;strong&gt;core problem&lt;/strong&gt;). So it’s very important to understand in the beginning what your evaluator is looking for. In most of the cases, the evaluator should clearly explain what they’re looking for. But I’ve appeared for smaller companies also where this did not happen so I thought it is better to clarify rather than assuming. As a thumb rule, &lt;strong&gt;never assume anything in an interview&lt;/strong&gt; (in any round). And if you do, share the same with your interviewer so that they can point out if that is a wrong assumption. Within a small period of 40-50 minutes, it’s very costly to start with a wrong assumption and then correct it later.&lt;/p&gt;

&lt;p&gt;I’ll share a superset of what all things were asked from me in LLD round of different companies. Once the introductions are over, the interviewer gives you a problem statement. These are the things I take care of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Making notes&lt;/strong&gt;: I have a habit of taking down notes in all the technical interviews I give. I use a plain text editor window for the same (Sublime Text being my default choice for years). You could also use pen and paper but here the aim is that your interviewer should be able to read the same as you’re writing. For the same, I also share my screen in the beginning. This helps me to scope down the problem statement before I start solving the specific parts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Figure out requirements&lt;/strong&gt; - So my first task would be to understand what all parts of system we want to build. Take anything real world - Uber, ZoomCar or BookMyShow (let’s use &lt;strong&gt;BMS&lt;/strong&gt;). You cannot discuss their complete product within 45 minutes. So it’s better that you figure out with your interviewer what they are interested in. For example, in BMS problem, they might be interested in the &lt;strong&gt;core booking problem&lt;/strong&gt;, rather than discussing kind of seats in a movie hall. Similarly, while discussing a cab booking platform like Uber, the core problem could be &lt;strong&gt;driver allocation&lt;/strong&gt; and not the &lt;strong&gt;inter city travel&lt;/strong&gt; feature. Think from a product perspective here. If you have used the app, then you must be knowing about the core features (and maybe the core problem also) but incase you have not used the app, tell the same so that you both can work together to scope down the problem. Once this is done, there are two scenarios - Either they’ll ask you to write the code or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding required&lt;/strong&gt; - Incase you need to write the code, start thinking about &lt;strong&gt;core entities&lt;/strong&gt; (models), their &lt;strong&gt;interactions&lt;/strong&gt;, &lt;strong&gt;relation&lt;/strong&gt; with each other. Validate your understanding with the interviewer. If they’re ok, start writing some code. Write the code in a top-down manner where you write the structure of everything first and leave some core algorithm implementation to a later time. Once the structure looks good, fill in the method implementations (based on available time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding not required&lt;/strong&gt; - Incase they have not stated the expectations, talk to them to understand if you should be writing some code or just talk about APIs, models, and some core problem. If you’re not required to write a working code, you should still mention the &lt;strong&gt;models&lt;/strong&gt; and &lt;strong&gt;services&lt;/strong&gt; because they are a starting point of your database design. In this case, do talk about detailed &lt;strong&gt;request and response formats&lt;/strong&gt;. Some interviewers want you to talk about REST APIs and see your understanding around the same, specially if you’re working on a API based problem (there are non-web problems also, discussed later). While talking about APIs, do state your assumptions (if any). For example - I assume that there is an authentication mechanism in place already and auth information is being passed in the headers for each of the APIs we’re discussing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Database schema&lt;/strong&gt; - Some interviewers can ask you to explicitly mention the specific tables and columns. In BMS, you’d have a &lt;strong&gt;city&lt;/strong&gt; that has many &lt;strong&gt;theaters&lt;/strong&gt;. Then a &lt;strong&gt;theater&lt;/strong&gt; that has many &lt;strong&gt;movie halls&lt;/strong&gt;. A hall can screen multiple &lt;strong&gt;shows&lt;/strong&gt; during a day and has multiple &lt;strong&gt;seats&lt;/strong&gt;. I hope you got an idea that highlighted words are our &lt;strong&gt;Models&lt;/strong&gt;. So the interviewer would want you to write these tables, their columns (at least important ones) to see if you’re designing the schema correctly. They can also ask you to write queries for specific APIs to see if your design can fulfil system requirements (eg. &lt;em&gt;Write a query to see if a Movie Show is completely sold out for a specific theater&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The core problem&lt;/strong&gt; - Different systems can have different core problems. For example, if you’re designing an app like &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/ruby/splitwise&quot;&gt;Splitwise&lt;/a&gt;, your core problem could be settling the amount within a group of people. For Uber, finding drivers and showing ETA could be discussed. Here, the interviewer can expect a mix of things from algorithms to design patterns based on the specific problem. As you dig deeper into the problem, there are chances that you’ll figure out the core problem. Otherwise your interviewer may also give you a hint like: &lt;em&gt;I want you to talk about this problem&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Test cases/scenarios&lt;/strong&gt; - One of expectations from a good developer is to figure out how can they test their code well. Incase you wrote code and have time left, you’ll be asked to write some test cases. Otherwise you’re expected to talk only around some test scenarios that you think are important. Nothing much to add here. If you know how to break your classes, follow design patterns and write test cases, that should suffice. If you think there is a part of problem in which some specific edge cases exist, do talk about it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So this is mostly what I’ve seen people asking during LLD interviews. One thing I’d like to add here - I saw three kinds of problems that are generally asked:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Simple Games&lt;/strong&gt; based on some logic - Snakes game, snakes and ladders, Tic Tac Toe, Chess game, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Popular products&lt;/strong&gt; - Cab booking (Uber), Car renting (Zoom Car), some booking platform (BookMyShow), etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical systems&lt;/strong&gt; - A rate limiter, Cache with LRU eviction, A PubSub System, Key-Value database, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The different kinds of problems have their own complexity. For example, it could be easy for you to discuss an app that you use a lot (like Uber) than discussing a PubSub system. I’d suggest you to spend time practising all these kinds of problems so that you get an idea on complexity of each of them. Although the general approach (as discussed above) would remain the same. Happy learning 😊.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you for reading this detailed post on Low Level Design. If you liked this, please have a look here also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I created a small &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning&quot;&gt;github repo&lt;/a&gt; that has solutions for four LLD problems in Ruby and Java languages. If you go to any of the problem, it will have a README that describes what we’re building. You can take that README as a requirement to practice these problems. Refer my code only if you’re stuck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All my interview preparation/experience related posts are available &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wrote a post last year about the &lt;a href=&quot;https://blog.gagan93.me/classify-your-codebase&quot;&gt;benefits of building small classes&lt;/a&gt;, a practice I embraced years ago when I began refactoring systems.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="lld" /><category term="software-design" /><summary type="html">I work as a Staff Software Engineer at LocoNav. When I give interviews with my current experience (that is close to 9 years), I am considered for these roles...</summary></entry><entry><title type="html">Improving your resume</title><link href="https://gagan93.me/blog/2024/05/13/improving-your-resume.html" rel="alternate" type="text/html" title="Improving your resume" /><published>2024-05-13T00:00:00+05:30</published><updated>2024-05-13T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/13/improving-your-resume</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/13/improving-your-resume.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-improving-your-resume.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@joaoscferrao?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;João Ferrão&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/white-printer-paper-on-macbook-pro-4YzrcDNcRVg?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello people. I’ve you’re reading this, you might be looking to build a better resume. It’s important to keep your resume updated even if you’re not looking out for a change. Sadly, not many people like me realise this on time. And because of this, we end up doing major changes in our resume when we actually start looking out. For example, I started looking out from my previous job in late 2017 and this time in late 2023. In this six years, almost everything changed - from my role to market expectations.&lt;/p&gt;

&lt;h2 id=&quot;the-versions&quot;&gt;The versions&lt;/h2&gt;

&lt;p&gt;Feel free to laugh but the 2017 resume looked like this (that got me into LocoNav). Before LocoNav, I applied to &lt;a href=&quot;https://www.reddoorz.com/&quot;&gt;RedDoorz&lt;/a&gt; also and got a call from this resume. So probably it was good according to that time and my YOE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v1.jpg&quot; alt=&quot;v1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll not discuss a lot on this resume because I did not continue editing on this file. It needed a lot of restructuring, so rewrite was better. I’ll share two more resumes based on my current skill set, the comparison between both. Even the first one was not that bad (rather it’s fancy) as it got me a call from &lt;a href=&quot;https://blog.gagan93.me/atlassian-interview-experience?&quot;&gt;Atlassian&lt;/a&gt; without a referral :)&lt;/p&gt;

&lt;p&gt;The resume shared below was created around mid 2023:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v2.jpg&quot; alt=&quot;v2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I thought fancy resume with photo would look cool 😶. I used some template on &lt;a href=&quot;https://www.canva.com/&quot;&gt;Canva&lt;/a&gt; to build this. I shared this with 4-5 friends for a feedback. These were the points that I worked on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build a simpler resume. That photo is not needed. Better start building on a simpler tool like Google Docs. I did that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The two column resume is generally not extensible. For example, I had not mentioned a lot about my roles/responsibilities in the previous organisation. And once I added those details, the right section expanded to the second page where as left (blue-ish) section was empty.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove these things as much as possible, no one wants to read them:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;The top right part of resume [Objective] that starts with &lt;em&gt;Having about 8 years&lt;/em&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Sections like Strenghts, weakness, languages, hobbies.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had made the &lt;em&gt;Language and Platforms&lt;/em&gt; section too fancy by adding so many things, categorised under 4 sub-headings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the space is used nicely and we opt for a single column (plain Google Doc) resume, we could put the contact information in a single line (yes, I did that later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Education section could be trimmed. Remove school/college name and just talk about degree and board/university. Again this can come in 3 lines if we go for a wider page (single column basically).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The most important point - The points mentioned in the resume do not talk enough about &lt;strong&gt;the impact&lt;/strong&gt; I got into the projects. I majorly wrote like - &lt;em&gt;“I did this task single handedly”&lt;/em&gt; or “&lt;em&gt;I contributed to this along with the team&lt;/em&gt;”. Our focus should be on the &lt;strong&gt;outcome&lt;/strong&gt; or &lt;strong&gt;the impact.&lt;/strong&gt; No one is interested to read plain stories that do not bring a good business or engineering impact.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from this, few improvements were done from my end also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Although I had done a lot of work in the past 6 years, it’s important to choose the impactful work. The issue in my case was that I had taken up multiple things that were very impactful but I had to choose and still let go of few good things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had divided my role as a Staff Engineer into two parts - &lt;strong&gt;Enablement team and Payments team&lt;/strong&gt;. That sounded like over-engineering the resume because for the reader, it might not make a lot of sense. Also, because the work on payment product had winded up, so I thought I should talk less about that and merge these sections. Moreover, I was working on a large internal product that was neither under payment, not enablement role, and I had to accommodate that as well. The best way was to merge a single “Staff Engineer” role and mention in points/sub-points.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I created second level category inside my resume wherever required. For example, for mentioning my work on the payments product, I thought it’s better to mention a wider heading and explain everything under it, rather than putting each thing about payments product in a new point where this can get mixed with other points, or where I need to mention the context of “payments” in a repeated fashion. Because this was now a single column resume, creating nested categories was possible and was not wasting much space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I tweaked font size, page margins, bullet margins and other settings in the Google Doc to ensure I’m not wasting space and I’m able to wrap everything in a single page. For example, I tweaked the indentation for nested bullets so that most of the nested points get completed within a single line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used ChatGPT to ensure no typos, grammar issues. It’s also very helpful to write shorter sentences without losing the context. The only thing to see while using AI tools is that we need to make sure that overall language of resume is consistent. It shouldn’t happen that some specific points are written in a very fancy English while others are too simple. Just take care to ensure that consistency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider yourself as a problem solver (senior engineer). Don’t associate yourself closely with a technology stack when you’re talking about your contributions (eg. Java/Spring or Ruby/Rails or Python/Django). When you think in a framework-agnostic manner, you don’t use names of libraries that are specific to your tech. This makes it easier for the reader to understand incase they don’t share the same technology background. For example, Rails developers usually mention libraries like Sidekiq, ActiveAdmin, Devise and Rspec in their Resume. Now for someone who is filling a Java position, it will not be possible to understand these without googling. And resumes are hardly skimmed for a minute or less :) We should rather talk in generic terms like background processing framework, admin/backoffice library, authentication framework and testing framework. In this way, there are better chances of someone understanding your resume. Only place to mention your current language/framework is under the &lt;strong&gt;Skills section&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;This is my current resume that I have posted on my &lt;a href=&quot;https://gagan93.me/&quot;&gt;portfolio&lt;/a&gt; also.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v3.jpg&quot; alt=&quot;v3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In comparison to the two column fancy resume, this is easier to modify because there were instances while editing the two column resume when I thought of adjusting the ratio of left and right side just because few points were crossing the line just by 1 word. Or I thought I should adjust the fonts. This one is much simpler and flexible to future modifications, just like a good software design :)&lt;/p&gt;

&lt;p&gt;Again highlighting the most important point - talk of impact. I’ll share a few examples on how I modified the points to show impact:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Took the first microservice out of a 6+ year old monolith, reducing a decent load from database&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Pioneered the transition of critical components to a microservices architecture, achieving a 75% speedup in the five slowest endpoints.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Scaled Fastag payments product from 0 to 2.5Cr daily transaction amount. This is almost 2% of India’s total daily toll.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Successfully scaled the system from inception to handle 2.5Cr daily transaction (2% of India’s total toll volume).&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Worked on reducing cloud spend by analyzing usage of servers and using other methods.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt; &lt;em&gt;Strategically reduced from 70+ to 5 queues based on latency/memory requirements, optimizing approximately 25% of infra costs.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Simplified how the main entity of system (vehicle) is accessed by various components.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Planned and executed refactoring of core system entities, streamlining the access over 200+ reports and APIs.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Migrated Email provider to AWS SES with bounce/complaint list handling flow.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Efficiently migrated ~ 150 different kinds of emails from Sparkpost to Amazon SES implementing bounce handling for increased reliability.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removed points that could not be modified to show impact. Like:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Involved in discussing overall global architecture of logistics based Saas Product.&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Lead various other initiatives like removing huge chunks of dead code…&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In total, I had to do 5-6 iterations on my resume over a period of 9 months, based on feedback that I received from multiple people. The idea of this blog post &lt;strong&gt;is not&lt;/strong&gt; to provide you &lt;em&gt;the best resume template on the internet&lt;/em&gt; that will get you into your next FAANG role. I’ll just share what worked for me and how I improved it over time. I’ve applied in about 6-7 companies where this got selected even without a referral. This includes both big tech and smaller companies.&lt;/p&gt;

&lt;p&gt;Many of the points mentioned above are subjective, like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve seen many senior people adding Objective / Career Summary on the top.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or adding things like Strengths, Hobbies and Languages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I do not mean that those resumes will get rejected. I just wanted to build an optimised resume which can be skimmed over efficiently and get me some interview calls. Some job portals allow you to write a separate cover letter where you can include details of your current role and expected role (overlaps somewhat with &lt;strong&gt;Objective&lt;/strong&gt; section of the resume). At the end, it’s not about &lt;em&gt;that one way of building it&lt;/em&gt;, but for &lt;em&gt;what works for you&lt;/em&gt;. Good luck for your Resume building journey.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="resume-building" /><summary type="html">Hello people. I&apos;ve you&apos;re reading this, you might be looking to build a better resume. It&apos;s important to keep your resume updated even if you&apos;re not looking out for a change. Sadly, not many people like me realise this on time.</summary></entry><entry><title type="html">Bain and Co. Interview Experience</title><link href="https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience.html" rel="alternate" type="text/html" title="Bain and Co. Interview Experience" /><published>2024-05-13T00:00:00+05:30</published><updated>2024-05-13T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-bain-and-co-interview-experience.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo from &lt;a href=&quot;https://www.brandcolorcode.com/bain-company/&quot;&gt;Brand color code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Staff Engineer II&lt;/strong&gt; at &lt;strong&gt;Bain and Company&lt;/strong&gt; in &lt;strong&gt;Jan-Feb 2024&lt;/strong&gt;. They were hiring engineers for the &lt;strong&gt;Gurgaon team&lt;/strong&gt; (that’s a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to their website where I applied. For those who haven’t heard much about the company:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Popularly abbreviated as &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Three_(management_consultancies)&quot;&gt;MBB&lt;/a&gt;, McKinsey, Boston Consulting Group and Bain &amp;amp; Company are known as the Big three management consultant firms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As the name suggests, these are mostly into consultancy and not in product development. And unlike other consultant firms where developers are outsourced by the company to build something, these big firms mostly “plan” the execution. Generally, the actual implementation (code) is not done by these companies. They just meet clients to understand the problem, document everything and make plans.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most of the roles are &lt;strong&gt;Individual Contributor&lt;/strong&gt; roles where you’re expected to travel for 20-50% of your time (based on role/seniority). This is true for engineering roles as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interview-process&quot;&gt;Interview process&lt;/h2&gt;

&lt;p&gt;I got an email from their recruitment team that they want to schedule a hiring manager call to begin with. Except for one instance, entire communication happened over emails and the team was quite responsive. There were &lt;strong&gt;five rounds&lt;/strong&gt; in total. I cleared all of them but because there was a single vacancy and high competition, I was informed that they chose someone else. Overall, it was a good learning experience as this was the first time I went through all the rounds for any company’s process.&lt;/p&gt;

&lt;h3 id=&quot;hiring-manager-round&quot;&gt;Hiring manager round&lt;/h3&gt;

&lt;p&gt;This was scheduled with Sr. Director of Global Engineering team who was based out of Singapore. There are many companies that put you through the evaluation process directly but I like the organisations where we have a human interaction with a senior person before starting with the interview rounds. They make sure that they understand your current role, future growth path/expectations and also explain the new role in the best possible way. For example, most of us work with product/service based companies where travel is almost negligible for engineers. This was very different for Bain. Another thing was that we get to code less in consultant roles. He made sure that I completely understand these two things before starting with the evaluation process. He sounded calm and “not in a hurry” like many directors/senior managers. We did some technical discussion around my projects but only on surface level.&lt;/p&gt;

&lt;h3 id=&quot;live-coding-round&quot;&gt;Live coding round&lt;/h3&gt;

&lt;p&gt;This was scheduled with a &lt;strong&gt;Senior Engineer&lt;/strong&gt; who just got promoted to &lt;strong&gt;Staff&lt;/strong&gt;. Generally, when you talk to Engineers during interviews, you might find them less expressive but people at Bain are much more open (and somewhat more professional) when it comes to communication. This is because Engineers also deal with the clients and are expected/trained to be good on communication skills. A junior engineer also joined the interview as an observer. He dropped mid way due to a clashing meeting. The problem statement was based on strings and 1D arrays (quite simple, but I don’t remember exactly). While the problem was simple to solve, the platform they chose was not good. Most of the coding interviews I gave were on platforms like Coderbyte that has a wide choice of languages. Being a Ruby Engineer, I prefer to solve DS questions in &lt;strong&gt;Ruby&lt;/strong&gt; but here, the choice was among &lt;strong&gt;Python, Java and Javascript&lt;/strong&gt;. This was not communicated by HR team in advance. Somehow I ended up coding the solution in Java, which is my second language of choice, and that ran without any issues. I expected another question but the interviewer preferred to play around with minor changes in requirements and edge cases, all of which were passing. This sounded easier than I expected and what I faced in other companies.&lt;/p&gt;

&lt;h3 id=&quot;technical-assessment&quot;&gt;Technical Assessment&lt;/h3&gt;

&lt;p&gt;This was basically a &lt;strong&gt;System Design / HLD round&lt;/strong&gt; with another &lt;strong&gt;Staff Engineer II.&lt;/strong&gt; I prefer interviews during morning hours because I’m fresh at that time. But because of interviewer’s preference/availability, this was scheduled in the evening. I’m generally mentally-saturated by that time (6PM IST). The problem statement was around designing a &lt;strong&gt;blob&lt;/strong&gt; &lt;strong&gt;storage platform&lt;/strong&gt; like &lt;strong&gt;Dropbox / Google Drive&lt;/strong&gt;. Although this is a common HLD problem, I had not solved it before. The only way was to think from first principles. I’m good at cloud related things and protocols so that never remains an issue for me when I’m solving a HLD problem. I’m also good at databases but my major exposure is around SQL databases only. Considering the numbers shared by them, I tried to propose a NoSQL database for the metadata storage. They immediately pointed this out and asked me why I chose a NoSQL database here. When I started pointing out the reasons, I figured out that I was not having strong reasons to go for NoSQL. Within next two minutes, both of us mutually agreed to start with a SQL database like PostgreSQL. The major discussion in a blob storage backend (from a functional perspective) is to think about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Breaking file(s) into chunks for both uploading/downloading.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hashing these parts to see if it already exists on the backend (can happen frequently for large platforms or when people upload duplicate files).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encryption/Decryption on client/server side (this was one of the requirements).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talk about Disk, storage, cost, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I had read read an article on &lt;a href=&quot;https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html&quot;&gt;Amazon S3&lt;/a&gt; (not full, it’s a long one for me to absorb). I took some ideas from it when talking about low level storage. Although S3 is much more complex and I was not supposed to talk about things like storage tiers. We didn’t conclude our discussion around all the points (can happen in a HLD round, that is more open ended in comparison to coding rounds) but he asked me to talk around APIs, schema design and draw some boxes on &lt;a href=&quot;https://excalidraw.com/&quot;&gt;Excalidraw&lt;/a&gt; (my choice for drawing diagrams) before the time ends. The overall discussion went very well. Hence, I qualified.&lt;/p&gt;

&lt;h3 id=&quot;technical-assessment-case-study&quot;&gt;Technical Assessment (Case Study)&lt;/h3&gt;

&lt;p&gt;This was another HLD round scheduled with &lt;strong&gt;Director of Engineering, India team&lt;/strong&gt;. He wanted to understand about my projects in great depth and probe around choices. Then we moved to designing an app that we regularly use - like &lt;strong&gt;Zomato&lt;/strong&gt;. He asked some problems specific to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How we’ll show restaurants/branches near customer’s current location?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What tables will you make to store restaurants, branches, etc?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you build Zomato’s homepage (gave some requirements, similar to the actual app)? Write SQL queries and see what things should be cached for fast page load.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the previous round was centered around a single problem (Blob storage), this included my projects, a case study, discussion around databases, discussion around other technology choices, and a lisuttle bit on the product side.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;After this round, I got a phone call from the recruiter (for the first time). They gave me feedback on all my previous rounds which was very positive. The only negative she pointed out that I sounded comfortable with only Ruby programming language. She concluded this because I had mailed them about the platform issue in live coding round that did not have sufficient language options to choose from. I explained the same and I told that I was comfortable enough with Java to solve the problem within time. I again explained that I consider myself as a &lt;em&gt;Sr. Engineer&lt;/em&gt;, and not a &lt;em&gt;Ruby Engineer&lt;/em&gt; but their platform should have had more options available. Otherwise they should inform the same before the interview. It was important for them to clear this expectation from their side, as for client projects languages keep on changing. Moreover, most of their enterprise clients were using Java/C#.&lt;/p&gt;

&lt;p&gt;They told me that next round is with an Expert Partner. This will be a Behavioural Round (kind of cultural fit round). Because the partner is generally travelling, I’ll have to provide my availability over multiple slots in a week and they’ll schedule in any of these slots.&lt;/p&gt;

&lt;h3 id=&quot;behavioural-round&quot;&gt;Behavioural Round&lt;/h3&gt;

&lt;p&gt;As explained, this was held with an &lt;strong&gt;Expert Partner&lt;/strong&gt; from &lt;strong&gt;APAC region&lt;/strong&gt;. The interview was scheduled for 45 minutes but in the beginning they told me that they just have 30 minutes because of a last minute meeting setup with a client. This was the first time I was giving Behavioural Round in my life so I had spent considerable time in understanding what this round is meant for. Obviously, I couldn’t fool this person if I was not a cultural fit because they had 21 years of experience and 16+ years within Bain. But I said to myself - If I fail in this round after clearing 4 technical rounds, this would be the worst thing. I checked a lot of videos to learn about the STAR approach, making stories out of things you’ve done in your career. There was one short video that suggested to build stories around (at least) these axes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Stories that indicate good leadership,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Where you acted as a great team player,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accomplishment story to show that you can tick off your goals,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overcoming hurdles to show that you can surpass challenges,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Failure story to show that you learn from your mistakes and bounce back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I say “stories”, don’t take me wrong. It doesn’t mean creating fake stories. Because the interviews are structured in a way that you’re evaluated on a lot of things in a short interval, it’s good to know the axes on which you should prepare before-hand. Otherwise you might have showcased all the skills but you’d still forget those when you’re asked during an interview.&lt;/p&gt;

&lt;p&gt;The interview started with our introductions. He talked a little bit around Logistics business (i.e. around LocoNav). Then they said “&lt;em&gt;You’ve worked at LocoNav for 6 years, can you explain me one big task that you completed each year&lt;/em&gt;”. This was the moment when all the preparation felt useless. While I’ve done a lot of work at LocoNav and everybody around me knows that, I felt blank for 2-3 seconds. After that I started explaining my contributions. There were a few more questions that were no where related to what I had expected. At the end, they asked if I had questions for them. I asked a few questions and we wrapped with the interview.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The interview at Bain took slightly longer than other companies. The overall process took close to 2 months as rounds happened within a gap of 1-2 weeks, specially for the last round where availability of Expert Partner was very limited. Even after the last round, they took 2-3 weeks before sharing the result. I was informed that there was &lt;strong&gt;only one opening&lt;/strong&gt; for this position and they shortlisted some other candidate. I probed for more details during the month of March because this feedback seemed like a generic &lt;em&gt;platform generated email&lt;/em&gt;. The HR added the hiring manager to the email and they both confirmed the same. It sounded somewhat like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From HR:&lt;/p&gt;

  &lt;p&gt;Thank you for reaching out. We had multiple candidates, including yourself, who progressed to the final stages of the interview. It’s important to note that while you demonstrated strong skills and abilities, the candidate who ultimately succeeded in the final round performed exceptionally well. This outcome doesn’t reflect any deficiency in your skills; rather, it’s a testament to the competitive nature of the final selection process.&lt;/p&gt;

  &lt;p&gt;--&lt;/p&gt;

  &lt;p&gt;From the Hiring Manager:&lt;/p&gt;

  &lt;p&gt;Thanks for reaching out. Yes, we liked your candidature and got good feedback from the interviewers. Unfortunately we only had one open position at this point of time and had a tough decision to select one candidate. We will surely reach out to you if we open more positions in the future.&lt;/p&gt;

  &lt;p&gt;Once again, really appreciate the time and effort you spent for the interview process with us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got some relief after this email, because I believe feedbacks must be shared when a candidate spends time with you. Including all the emails, the phone call and the interview rounds - I spent more than 6 hours with them. I read a lot about consultant life during the interview process to see if I can work like that (because I’m not a travel freak). I might have given a chance to this role if I was selected. I also thought - will I stay relevant in the &lt;em&gt;SaaS Product industry&lt;/em&gt; if I opt for this role for a few years (that doesn’t involve hands-on coding)? But whatever happens, happens for the best. I got the complete experience but I was not selected. I was overall happy.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="bain" /><category term="interview" /><category term="staff-software-engineer" /><category term="consultant" /><summary type="html">I interviewed for the position of Staff Engineer II at Bain and Company in Jan-Feb 2024. They were hiring engineers for the Gurgaon team (that&apos;s a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to..</summary></entry><entry><title type="html">Stripe Interview Experience</title><link href="https://gagan93.me/blog/2024/05/07/stripe-interview-experience.html" rel="alternate" type="text/html" title="Stripe Interview Experience" /><published>2024-05-07T00:00:00+05:30</published><updated>2024-05-07T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/07/stripe-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/07/stripe-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-07-stripe-interview-experience.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo from &lt;a href=&quot;https://www.google.com/search?sca_esv=87522dea2824ff52&amp;amp;sca_upv=1&amp;amp;sxsrf=ADLYWILkvvPEaLSLta0vbUlLLiSxs0BWaw:1715080024675&amp;amp;q=stripe&amp;amp;uds=ADvngMjTNPKEE-q7I44lun7GC2_xSBJakMDKk-zKP558UX3sGFgOo0obkT031nY191A6wYa4TKscNMz9nP09qudeXs6qjCVIMuAYWsNeUj1s-4H7nT9Qe8VwqZDmCXUj1j6FA1u2k2VYrDv3nso5ytnOUTS-I_q57ncjE0lSWYQOUjGzhq2Q6jSJwajnI5-4O-5SG-GId7Ebxmrab0S7tl0xBLhPcrufYwvgG_qRMVkigo81MJHwaHwu31KwhIxtySTCHOFpjrTG_mwsclx4pnuJ8YDWgoKJb-w717k6A5s5toPiq-guPtM&amp;amp;udm=2&amp;amp;prmd=isvnmbtz&amp;amp;sa=X&amp;amp;ved=2ahUKEwi0_Ib9svuFAxWybmwGHTv9D0QQtKgLegQIDBAB&amp;amp;biw=1496&amp;amp;bih=812&amp;amp;dpr=2#vhid=LKToaxY8zwIc8M&amp;amp;vssid=mosaic&quot;&gt;Stripe Engineering&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Staff Software Engineer&lt;/strong&gt; at &lt;strong&gt;Stripe&lt;/strong&gt; in &lt;strong&gt;December 2023&lt;/strong&gt;. They were hiring engineers in the &lt;strong&gt;Verification &amp;amp; Identity Platform team&lt;/strong&gt;. I applied through a referral as that increases your chances of getting shortlisted. For those who haven’t heard much about Stripe:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It is one of the big players in &lt;a href=&quot;https://docs.stripe.com/products&quot;&gt;global payment products&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the past, Stripe has been known to be the &lt;a href=&quot;https://www.linkedin.com/posts/gergelyorosz_stripe-softwareengineering-activity-7140426202174967808-xDQE/&quot;&gt;largest Ruby codebase&lt;/a&gt; in the world. They used Sinatra (not Rails) for web apps, so they’re not the largest Rails codebase (which &lt;a href=&quot;https://shopify.engineering/shopify-monolith#:~:text=Our%20main%20monolith%20is%20one,of%20developers%20currently%20adding%20features.&quot;&gt;Shopify is&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They have a wide tech stack now but their founder explains &lt;a href=&quot;https://www.quora.com/Why-did-Stripe-choose-to-use-Ruby-for-its-backend-language&quot;&gt;why they used Ruby&lt;/a&gt; to start with. Stripe also has a very &lt;a href=&quot;https://stripe.com/blog/engineering&quot;&gt;popular technical blog&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Stripe asks the candidates to sign a &lt;a href=&quot;https://news.ycombinator.com/item?id=1952848&quot;&gt;NDA&lt;/a&gt; because of which I cannot share the exact interview questions but I’ll still share the format of interview and difficulty of questions to some extent.&lt;/p&gt;

&lt;h2 id=&quot;interview-rounds&quot;&gt;Interview rounds&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Telephonic round with Recruiting team&lt;/strong&gt; - This was scheduled to understand my role, projects, career goals and set up alignment with the role. The recruiter was based out of Singapore and was taking care of APAC hiring. Although they were not technical, they were expert in explaining the job description and were clearly able to point out things that I was not doing right now in my job role (that they needed for the role). For example, I work as a Staff Engineer at LocoNav which is a small team. So here, my role doesn’t involve regularly setting up technical direction for the team but considering Stripe’s scale, Staff Engineers are very senior in role and they take care of the same on regular basis. So, they told me before hand that based on my performance, I might be &lt;strong&gt;down-levelled&lt;/strong&gt; if they see a need to do this. This could sound discouraging as the position below &lt;strong&gt;Staff Engineer&lt;/strong&gt; was of &lt;strong&gt;Software Engineer&lt;/strong&gt; but they explained that engineers with the experience range of 0-15 years of experience do fall under this role. This is so because Staff Engineers are very senior in Stripe and they do not have a middle role (i.e. Senior Software Engineer).
 On a side note, I wrote about &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;titles and down-levelling&lt;/a&gt; incase you want to understand when it is good or bad for you. Additionally, although the JD mentioned the location as &lt;strong&gt;Remote&lt;/strong&gt;, the recruiter clarified that they’re planning to start WFO soon (early 2024) so the location would be Hyderabad/Bangalore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System Design Round&lt;/strong&gt; - Staff Engineers at Stripe typically go through &lt;strong&gt;two&lt;/strong&gt; System Design rounds. In each round, there is a Staff Engineer who evaluates your design. In this round, the interviewer was from a different timezone and a very senior person (~10 years senior to me). They explained the problem statement and waited for me to probe for details. While many companies ask for the design of well-known large systems (eg. Youtube, Whatsapp, Google Drive, etc), Stripe is known to ask questions around their own systems only. So the question was related to payments product. This was first ever System Design Interview that I was giving in my career, so I was skeptical on my approach. The problem statement seemed very simple and I queried 2-3 times (like “is &lt;em&gt;this is what I have to build?”).&lt;/em&gt; At that time, I was not familiar with the fact that simple problems can also be asked for senior roles, but the expectation of solution is with respect to candidate’s expertise/seniority. Just to explain this more - You might have heard that some companies (like Atlassian) have High level design (or System Design) round even for hiring college freshers. At their level, the expectation is that they should understand basic building blocks of the overall system and have some idea on non-functional requirements. The same problem statement can be given to a Senior Engineer where the expectations will be very different. The interviewer can probe into specifics of protocols, choice of databases and so on. For Staff/Principal/Distinguished levels, the discussion can go towards privacy, compliance, regional failovers, disaster recovery etc. I started attempting the question and explained the components of the system and some APIs. I missed one thing around scale of data that the interviewer pointed out. At this point, I realised that exposing an API endpoint is not a good idea and we should have a queueing mechanism like Kafka in between for improved reliability at scale (eg. if consumer system crashes, it can retry from where it left on the Topic).
 Because this was my first ever System Design interview, I was a bit confused during my attempt and the interviewer sensed that. They shared the feedback with the recruiting team that I’m a good candidate but probably I should be considered for a lower level (i.e. Software Engineer). The same was conveyed to me and I agreed to be evaluated again for SE role. The interview process restarted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding round&lt;/strong&gt; - As per the documents shared with me, Stripe’s interview format claims to be very different than big tech companies as they have rounds where you engage more with the interviewer to solve problems and debug issues. For example, their interview process mentions some rounds where you have a codebase ready in which you implement a specific functionality or solve a bug that they’ve intentionally added. Surprisingly, this round was nothing like that and I was presented with a typical data structures problem 😶. It was a simple problem, again related to their products (i.e. payments). I asked my doubts and implemented the solution that worked. The interviewer modified the problem statement and asked me to accommodate the same in my solution. This one took some time but I was still able to solve it. With this, the interview came to an end and he asked me if I have questions. I asked how many more variations exist in the problem, to which he said “total of five”. After the interview, I searched for the problem and found that this question was a typical Google’s telephonic interview round question (not one “related to their products”) 😲.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a few days, I was informed through email that I did not clear the round. I thought - maybe I was expected to solve more variations of the problem within the given time because my solution was working for the given cases. As usual, I thought I’d reach out to the recruiter to seek the exact feedback but couldn’t do so because they were on new year vacation. They asked me to schedule a slot on their calendar that never loaded on my browser. Even today if I open the link, it keeps loading like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-07-stripe-goodtime.jpg&quot; alt=&quot;scheduler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LOL. Not blaming it on them. They might have responded if I had mailed them back with the loading issue, but I lost touch due to their vacations and never contacted them again.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was a good experience with Stripe team. The recruiter was responsive on call/chat/email throughout and ensured timely response. I like their &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/stripe-part-2&quot;&gt;culture of writing&lt;/a&gt; that &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_culture-writing-team-activity-7170322475212374016-UjEc?utm_source=share&amp;amp;utm_medium=member_desktop&quot;&gt;starts from their CTO&lt;/a&gt; - something that everyone should do (if they can). I would have performed better in System Design Interview if this was not my first ever HLD interview but no regrets. Failures are integral to the journey of success 📈.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="stripe" /><category term="interview" /><category term="staff-software-engineer" /><summary type="html">I interviewed for the position of Staff Software Engineer at Stripe in December 2023. They were hiring engineers in the Verification &amp; Identity Platform team.</summary></entry></feed>