<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2023-06-26T12:05:42+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh — Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">‘Classify’ Your Codebase</title><link href="https://gagan93.me/blog/2023/06/20/classify-your-codebase.html" rel="alternate" type="text/html" title="‘Classify’ Your Codebase" /><published>2023-06-20T00:00:00+05:30</published><updated>2023-06-20T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/06/20/classify-your-codebase</id><content type="html" xml:base="https://gagan93.me/blog/2023/06/20/classify-your-codebase.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-06-20-classify-your-codebase-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-chuttersnap-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@chuttersnap?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;CHUTTERSNAP&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/7eQlPra81zQ?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Most of the software engineers have a strong (theoratical) grip on OOPs concepts right from the college days but few still struggle to apply them while working. There was a time in my career when I realized that my code is doing everything it is expected to do but I was unhappy with how it looked. I have written methods that were even 200-300 lines long, and classes 1000 lines long. But today if I see any such code, I call it &lt;strong&gt;unmaintainable&lt;/strong&gt; and &lt;strong&gt;untestable&lt;/strong&gt;. In this post, I want to share one thing that helped me transform my mindset, i.e. &lt;strong&gt;The power of small changes&lt;/strong&gt;. It took me months to understand how this habit is more impactful because earlier I thought this is counter-productive.&lt;/p&gt;

&lt;p&gt;Few years ago, I worked on upgrading Rails major version of a monolith project (an app that powers most of LocoNav website). Most of the changes here were pushed in one large pull request (&lt;em&gt;100+ commits, 270+ file changes, 1300+ additions, 1600+ deletions&lt;/em&gt;, all by just me). Although it didn’t break anything related to code on production, but I was quite nervous at the time of release. No one even reviewed this PR much because it was hard to review (as discussed in the first point &lt;a href=&quot;https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate.html&quot;&gt;here&lt;/a&gt;). Also, I found out that while raising large PRs worked for me, it did not scale for my team. Many such PRs sent by others caused production bugs.&lt;/p&gt;

&lt;p&gt;We had a senior engineer who always advocated for small PRs and slowly I got influenced to follow the same. Being in a startup environment, we had to be fast enough in terms of delivery, so the main concern was - &lt;em&gt;How can we break changes into small parts and still deliver fast?&lt;/em&gt;. We started looking in the PRs on how we were organising our classes. We found out that we’re mixing a lot of responsibilities and not following SOLID principles at all (forget design principles!). You might think that I’m mixing basic OOPS with SOLID and other design principles (eg. prototype, builder or composite). But if you think carefully – it’s all about creating small classes that can talk to each other to complete a task. Let’s talk about a simple inheritance example that we studied during college days (code sample is in Ruby but should be basic enough to understand):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bark&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BARK!&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we clearly see that one class is doing one task (just defining a specific Animal, or adding more behaviour in subclass). Now let’s move to a real-world example of processing an order on an ecommerce website:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Inheriting from ApplicationRecord means this is a model ('M' in MVC)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sell&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_inventory&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;apply_discount&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_bill&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process_order&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send_to_dispatch_team&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_inventory&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_discount&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_bill&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_order&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_to_dispatch_team&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are multiple questions that come to my mind when I see such a code, but the fundamental one is - Why did we keep this method (and all it’s associated methods) inside a model (or inside one class)? While this might look simple for once, it is doing a very complicated task. It’s clearly visible that we might be calling other services or a payment system while processing an order, and hence any step can fail. There seems no defined way to rollback the previous steps if any step fails. And if we want to build such a process, would we want to put those methods also in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; class? (The above code is influenced from &lt;em&gt;Fat models Thin Controllers&lt;/em&gt; philosophy).&lt;/p&gt;

&lt;h1 id=&quot;the-answer&quot;&gt;The Answer&lt;/h1&gt;
&lt;p&gt;What do you think? Should you take a course on Design Patterns in order to refactor this? Few months ago I read a &lt;a href=&quot;https://refactoring.guru/design-patterns/book&quot;&gt;book&lt;/a&gt; on the same, and I’m sure that there are a lot of improvements we can do before applying design patterns.  Developers often shy away from doing this but the only solution to have a maintainable codebase is to &lt;strong&gt;break such classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whenever you see a logical chunk in a class, that is not related to rest of the code and can be taken out, please take that out. We often think that we can do all this later, but that time never comes till we see some serious issues with the code. Due to this delay, the methods inside the class become more coupled to each other and the effort of taking that out becomes much larger. The above is a very simple example where you could have a plain ruby class (&lt;a href=&quot;https://sulmanweb.com/plain-old-ruby-objects-poros-in-rails-fat-models/&quot;&gt;PORO&lt;/a&gt;) called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderProcessingService&lt;/code&gt; that has all the business logic for processing an order. And obviously, if needed, we’ll have more classes for performing other steps (checking inventory, applying discount, etc). It’s good to know about SOLID Principles and Design patterns, but at the end of the day you see - it’s all about distributing responsibilities, reducing coupling and creating more (small) classes. If you know how to apply this, you can apply design patterns as well. Otherwise everything is theory!&lt;/p&gt;

&lt;p&gt;So the next time you see yourself or a colleague writing methods in a class that should be separated out, please make sure you do that. That will pay you in future 😀. Another way of knowing about your code’s health is to write test cases for it. If it’s easy to write test cases for a class without mocking a lot of things (except external services), then it’s ok. Otherwise you might want to refactor your classes. Happy coding!&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="modularity" /><category term="low-level-design" /><category term="maintainability" /><summary type="html">Most of the software engineers have a strong (theoratical) grip on OOPs concepts right from the college days but few still struggle to apply them while working. If you are someone who see a large number of small classes in your codebase that are well...</summary></entry><entry><title type="html">Things Code Reviewers Hate</title><link href="https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate.html" rel="alternate" type="text/html" title="Things Code Reviewers Hate" /><published>2023-06-09T00:00:00+05:30</published><updated>2023-06-09T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate</id><content type="html" xml:base="https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-06-09-things-code-reviewers-hate-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-tim-gouw-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@punttim?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Tim Gouw&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/1K9T5YiZ2WU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Is reviewing code part of your daily job? Unless you’ve got a super nice team (that doesn’t actually exist), you must have faced most of these aspects while reviewing your peer’s code. Although I’d completely agree that I must have done submitted this kind of code when I was junior, hence the karma!&lt;/p&gt;

&lt;p&gt;On an average, I review about 6-8 pull requests on a daily basis. Some PRs require my approval because of Github code owner rules, while rest of them are raised by my team members. Every few days, the developer inside me is hurt because of the code I get to see. Few of these points are related to pull requests, while some are generally related to writing good code. These are the top few things I hate:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long pull requests&lt;/strong&gt; - There are plenty of reasons why our PRs should be short but here I’d share my perspective as a code reviewer only. When I look at long PRs, I’m not able to understand what we’re trying to do as a whole and why did we not break this change into parts. Let’s agree for a second that this PR is doing one dedicated task so it should be ok to accept this, but if I give 10 CR comments, and developer fixes 8 of those, and justifies rest two, I’d need to again look at the long PR again to see what fixes were done and how it impacted overall code. Incase multiple cycles of review happen, my context for this PR is so large that I’ll be lazy to pick this for another round of review. Even as a developer also, you need to test the entire code again because code changes with respect to 8 comments might have impacted some areas. So basically, it doesn’t benefit anyone. Although it sounds tough to break changes into parts, but trust me, that’s what a good developer is expected to do. Also, please note that there is no definition of “long” PR. As a developer, we should try to break changes into as many shippable chunks as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Missing minimum information&lt;/strong&gt; - PR title and description should mention the brief scope of change. Although this is standard across many companies, still many developers forget to do this sometimes. Asking for a code review without much information is very unproductive for the reviewer. They should not be expected to ping you, or find the JIRA ticket themselves, or magically understand the scope by reading the code. At LocoNav, we have a simple convention of putting JIRA ticket ID in the PR title first, followed by brief description of change. Although requirements and scope of change is mentioned in detail on the JIRA ticket, but some developers optionally mention a summary in description section of PR.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Untested code&lt;/strong&gt; - I feel my time is wasted on code review if I see a piece of code with a logical error in it. This
means the developer didn’t bother to test the code locally before raising the PR. This is the worst you could do to respect someone’s time. Some developers think we’ll test the code later (on staging environments) and they raise the PR first. But they forget that doing QA and catching such bugs is not the scope of reviewer (although we do it sometimes). If we approve this code, and it breaks on further environments, we’ll again have to review the same after the developer fixes this code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Non-Linted code&lt;/strong&gt; - There are all sorts of tools people use for development. From simplest text editors like Sublime and VSCode, to complicated and heavy IDEs like IntelliJ and RubyMine. Almost all tools have configurations that you can setup to lint your code properly. Infact, linting should never be done by hand as it is a task that can be easily given to our editor. Common things include proper spacing &amp;amp; indentation, no trailing whitespaces, no extra new lines. Beyond this, there could be language specific rules. Please always lint your code properly before submitting for a CR. For me, it’s a turn off to see non-linted code and I don’t shy away to give comments like “Please use space on both sides of equals operator”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Repeated mistakes&lt;/strong&gt; - Unless your organisation has high attiration rate, or is shuffling people across teams frequently, you must be working with the same set of people for a long time. We know how someone is growing. In the beginning people do all sorts of mistakes and get many review comments but that generally improves with time. Frustration kicks in as a reviewer when people don’t improve on same set of mistakes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The next two points are more related to writing good code, but still listing them down here as they are related to PR reviewer’s experience also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Poorly organized code&lt;/strong&gt; - We need to ensure that low level design of our module is good and our classes &amp;amp; interfaces are separated nicely. Although this could be a wide separate discussion but in brief we should ensure small classes, each minding it’s own business and not strongly coupled with other classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Catching Top level exception classes&lt;/strong&gt; - We often write long methods that could possibly throw a lot of exceptions, and later we just wrap the entire method’s code in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin...rescue&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try...catch&lt;/code&gt;) block with exception superclasses (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StandardError&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; class in Ruby and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; class in Java). Doing this is so risky that it could be a complete post of it’s own. &lt;a href=&quot;https://stackoverflow.com/questions/10048173/why-is-it-bad-style-to-rescue-exception-e-in-ruby&quot;&gt;This stackoverflow answer&lt;/a&gt; describes the issues for Ruby language, but those are conceptually applicable to all languages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So next time you plan to raise a PR for review, I’d recommend you to consider atleast these points (although there are many more). I prefer to self-review the PR first before submiting it further to ensure that there are no obvious mistakes or debugging messages left. This small habit can help reduce to and fro between you and the reviewer, and improve feature delivery speed.&lt;/p&gt;

&lt;p&gt;Thank you for sparing time to read this. See you later!&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="code-review" /><category term="development" /><category term="frustration" /><summary type="html">Is reviewing code part of your daily job? Unless you've got a super nice team (that doesn't actually exist), you must have faced most of these aspects while reviewing your peer's code.</summary></entry><entry><title type="html">Eight Productive Hours</title><link href="https://gagan93.me/blog/2023/05/27/eight-productive-hours.html" rel="alternate" type="text/html" title="Eight Productive Hours" /><published>2023-05-27T00:00:00+05:30</published><updated>2023-05-27T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/27/eight-productive-hours</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/27/eight-productive-hours.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-27-eight-productive-hours-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-jaelynn-castillo-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jaelynnalexis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jaelynn Castillo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/xfNeB1stZ_0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The key to working fewer hours is not to simply do less, but to do what matters the most&lt;/em&gt; - Unknown&lt;/p&gt;

&lt;p&gt;I’m a morning person. So I usually start around 8 AM from my home desk. The time was same even when I worked from office. Almost everyone starts after 9:30 or 10, giving me enough time for tasks that require strong concentration. I try to devote a part of this time to reading if my work-schedule allows (which it doesn’t, generally). I expect some personal time in the evening so that I can take care of my health &amp;amp; family. Many people start late and take care of these things in the beginning of the day. In my opinion, both of the ways are fine. But I strongly emphaisize on the fact that one must have a life outside work so that weekends and holidays aren’t boring.&lt;/p&gt;

&lt;p&gt;Reading the post title, you might be thinking that I’m talking about a clear separation between personal and professional life but this is not exactly what I mean. In my opinion, there are times when you should be ready to take up work even in the middle of a night, while there are times when you should clearly say NO to things. Whole of my career, I’ve been part of startup culture only, and I’ve seen both the scenarios. At the same time, I’ve seen people overworking and still barely delivering what’s expected from them. There are reasons why this happens, and I’ll try to list a few of them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not owning your own time&lt;/strong&gt; - If you are an old member of a small team (that grew somewhat large with time), there are a lot of dependencies on you. There are days when I get so much work from all possible directions that I feel like being driven by others. This is ok for a day or two, but should not happen regularly. You should have a list of things you are working on, and your personal deadlines to complete those. If you are someone who doesn’t have personal targets, and are always driven by others, you can end up overworking almost regularly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unstable projects&lt;/strong&gt; - If there is some code that you wrote or you maintain, that frequently breaks (specially during odd hours), you might be overworking to support it at night . If this happens frequently, you might need to get your code and architecture reviewed from someone who understands these aspects better than you. Sometimes you don’t need a senior, but only a pair of fresh eyes to find peculiar issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Glamorizing overworking&lt;/strong&gt; - Overworking might reflect a hardworking person for once but is not good in the long term. It sets wrong expectations, wrong culture, and makes you less ready for anything else. This is a cultural issue if many people in a team do this (or pretend to do this), but if this is an issue with you then please stop it right away. Find a hobby to pursue in your free time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wrong Estimations&lt;/strong&gt; - It’s ok to under-estimate as a junior developer, but if you are an SSE (or above) and are still doing this mistake, you’ll end up overworking along with your team (if you manage one). In fact, this becomes a bigger problem if you are leading a team beacuse this culture (of overworking) propagates to your team and some people might feel frustrated. Do learn this skill.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unrealistic deadlines&lt;/strong&gt; - There are days when we get a feature requirement that will give us an edge over our competitors and everyone just gets excited to launch this &lt;strong&gt;ASAP&lt;/strong&gt;. Projects that start with this mindset often fail to meet deadlines. They can even take 2x-3x time to deliver. Motivation just pushes people a little bit, it doesn’t always help us make good products.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ever changing requirements (Thank you Product Managers!)&lt;/strong&gt; - This is something that happens very frequently in startups. We start building something with 15days timeline in mind, and deliver something else in 45 days (believe me, those numbers are real!). Product teams are expected to brainstorm all the possible cases before starting actual development. But there are some projects (&lt;em&gt;urgent projects&lt;/em&gt;) where brainstorming happens along with product development. This causes everyone to continuously adapt to ever changing requirements and change their architecture accordingly. Sadly, some projects get so many changes that they even fail to deliver.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Few of the above mentioned points are personal issues, while some of them are team issues. To work efficiently, you need to discover all these yellow flags and discuss with your team. The idea of this post is not to motivate you to avoid work outside working hours, but to ensure that those eight hours are enough to do everything you planned.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="culture" /><category term="productivity" /><category term="overworking" /><summary type="html">The key to working fewer hours is not to simply do less, but to do what truly matters most. - Unknown</summary></entry><entry><title type="html">Develop faster, better</title><link href="https://gagan93.me/blog/2023/05/19/develop-faster-better.html" rel="alternate" type="text/html" title="Develop faster, better" /><published>2023-05-19T00:00:00+05:30</published><updated>2023-05-19T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/19/develop-faster-better</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/19/develop-faster-better.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-19-develop-faster-better-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-milan-csizmadia-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@milancsizmadia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Milan Csizmadia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/pYmH0eTpr70?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Over the years, has your development speed improved? Ofcourse, it would be much better than what it was when you started your first job. But have you significantly improved each year? If you didn’t, or if you’re unsure, then read along.&lt;/p&gt;

&lt;p&gt;I remember my training days, where I was given a Dell laptop with Ubuntu 14 installed on it. While I had done a lot of projects during my college days, I couldn’t be friends with Unix. I had only used Windows XP during school days and upgraded to Windows 7, Windows 8 and then Windows 10 as they were released. I liked good UI, themes, wallpapers, and DOS terminal looked like a punishment in front of good UI. I had heard “terminal is powerful”, and I realized it only when I started using the Unix terminal. Starting my professional career with Ruby, where many people prefer lightweight editors like Sublime Text, a good amount of my time was spent on terminal. While all this learning was overwhelming, I became very comfortable in the next few months.&lt;/p&gt;

&lt;p&gt;Over the past many years, this is how I feel I have improved my development speed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Log files&lt;/strong&gt; - No development happens without challenges and dead-ends. I’ve seen many developers who don’t investigate much on their own, and straight away ask their seniors or start searching about an issue on the web, both of which make sense but not before checking the logs. It could be your framework logs, database logs, or some logs that come up after enabling debug/verbose mode in an application. Believe me, you can’t be a good developer if you are not in habit of checking the logs. If you can debug what’s wrong without going here and there, you’ll save time in the long run (and possibly master &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail&lt;/code&gt; command options).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Know your tools&lt;/strong&gt; - Let’s say you get into a situation where a job should have run at night but it didn’t. You know the issue because some data didn’t get populated by this but you don’t know where to start from. Most of the companies these days use a lot of SaaS solutions to ease this debugging. We now have logging platforms, infrastructure monitoring platforms, APM platforms, and much more. And if we don’t use these tools to debug these issues, then what is the point of paying them? Spare time to explore all these tools. They help you much beyond this simple example (Eg. APM helps to figure out performance bottlenecks, debug downtimes, deprecate old endpoints, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Avoid using a mouse/trackpad&lt;/strong&gt; - In other words, use keyboard shortcuts as much as possible. You don’t have to remember tonnes of shortcuts per tool - good tools have standard shortcuts. For example, all text editors would have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; for windows) for opening a new file, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + Option key + Left or Right arrow key&lt;/code&gt; to move across tabs (including browsers), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD+&amp;lt;N&amp;gt;&lt;/code&gt; to go to Nth open window, and so on. After years of practice, this saved a lot of time for me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Master the terminal&lt;/strong&gt; - If you do this, you can do certain tasks very quickly. I’ve seen developers working at a good speed when they’re on their machines. But if they need to SSH to a server to check something, they become very slow. Although mastering terminal in itself is a very vast topic, because there are many things you can learn, but one of the most useful trick is &lt;em&gt;Reverse Search&lt;/em&gt;. I type not more than 3-4 characters to execute the command I need.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup aliases&lt;/strong&gt; - Although it is possible to setup aliases for a lot of things, I’d recommend setting this up at least for git operations. I use the following git aliases on my personal machine.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[alias]
  co = checkout
  br = branch
  st = status
  ci = commit
  po = push
  fo = fetch origin
  pu = pull origin
  df = diff
  dfs = diff --staged
[push]
  default = current
[pull]
  default = current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;so to do a checkout, I do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git co &amp;lt;branch&amp;gt;&lt;/code&gt;. And to push my branch to remote, I just write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git po&lt;/code&gt;. Also, I use reverse search than typing even this much 😛.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find alternatives continuously&lt;/strong&gt; - Whenever you’re doing something repeatedly, there are high chances that many people are doing the same thing and there might be some way to do it fast. For example, engineers spend a good time using browsers and there are a lot of browser extensions that can help you do things fast. I remember some time ago I was struggling to take screenshots of pages that were slightly larger than my window (so I zoomed out to take screenshot 😋). Later I found an extension (GoFullPage) that scrolls your page from top to bottom and creates a screenshot that can be exported to Image/PDF. Similarly, there are times when you need to copy paste some tabular data but there is no export option, so an extension (Table Capture) allows you to right click on that table and copy paste that to a google sheet. This worked for about 90% of use-cases. Another good extension (Authenticator) allows to keep all the 2 step verification codes (those 30-60s expiring  OTPs) in the browser itself, so that you don’t need a phone everytime.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There could be 10 more things I can add to this list, but I want to keep this short. For example, there’s no mention of how you can use GPT tools because there are many posts on that already. I hope this gives you some idea and rest you can think on your own. The way to work fast is to first realize that you are slow, and then think what can be optimized. If you have this thought process, you can continuously improve your speed.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="optimization" /><category term="development" /><category term="productivity" /><summary type="html">Over the years, has your speed of development improved?. Ofcourse, it would be much better than what it was when you were straight outside college. But have you significantly improved each year?</summary></entry><entry><title type="html">Small testing loops</title><link href="https://gagan93.me/blog/2023/05/01/small-testing-loops.html" rel="alternate" type="text/html" title="Small testing loops" /><published>2023-05-01T00:00:00+05:30</published><updated>2023-05-01T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/01/small-testing-loops</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/01/small-testing-loops.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-01-small-testing-loops-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-nubelson-fernandes-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/it/@nublson?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Nubelson Fernandes&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/CO6r5hbt1jg?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you are a software developer, you must have spent a considerable part of your time debugging the code you, or someone else wrote. At times, it is quite frustrating to debug code due to its current state, and you find the need to &lt;a href=&quot;https://refactoring.com/&quot;&gt;refactor it&lt;/a&gt;. But in a hurry to finish the task on time, we start solving the problem directly and testing it out, often wasting a lot of time that could be easily saved. Had we spent some time on understanding the moving parts, our “testing loops” could have been shorter.&lt;/p&gt;

&lt;p&gt;At the time of writing this, I found out that “testing loop” is not a defined terminology in software engineering, so this is what I mean by it&lt;/p&gt;
&lt;blockquote style=&quot;letter-spacing: 0.1px&quot;&gt;
  &lt;p&gt;“The process of changing a piece of code, and testing it out by some means” forms a loop. Smaller the loop, the faster we change and test our code, and our frustration is minimum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s assume you’re a web developer who is doing a code change in a service class that is called by a REST API to serve the response. Now in order to test this change, you can:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update an automated test that was testing this API and can check the response.&lt;/li&gt;
  &lt;li&gt;Use cURL/Postman to test your code and ensure that the response is updated.&lt;/li&gt;
  &lt;li&gt;Test a small piece of change inside a &lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL shell&lt;/a&gt;, if your language/framework provides that, and verify that the class method is returning the change as expected. Some examples of such shells as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt; for a rails app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; for a django app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jshell&lt;/code&gt; for a java app, or a browser developer console  for Javascript apps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, step 1 and 2 can be very slow if you have a medium/large application because your web server/test suite will take time to boot, whereas step 3 will be very fast. Being a rails developer, I always test such changes inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt;. This might seem like a very small optimization but there are times when you end up testing the change multiple times. If something takes time (eg. a web server reloading after change), we might also switch to other tasks (or distractions) in the interim.&lt;/p&gt;

&lt;p&gt;This is just one example of improving our productivity as a developer (frustration and productivity are inversely proportional). I’d recommend you to spend more time in finding shorter ways of testing things out than wasting time in longer testing loops. That would help you for years. Although I strongly believe that developers are solely responsible for their code (no reviewers, no QAs) and by no means I’m saying that we should abandon testing code via test cases and postman. But yes, while you’re in the middle of debugging, use shorter ways and in the end test out things by normal means.&lt;/p&gt;

&lt;p&gt;The motive of this post is not to promote use of REPL shells, but I’ve used them for about 8 years now and they are great tools to learn the language fast, and also to debug things. If your language supports this and you never used it, you must try this once. Try this out next time you get into debugging something time consuming and let me know if this helped.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="debugging" /><category term="optimization" /><summary type="html">If you are a software developer, you must have spent a considerable part of your time debugging the code you, or someone else wrote. At times, it is quite frustrating to debug code due to...</summary></entry><entry><title type="html">Hello world</title><link href="https://gagan93.me/blog/2023/04/15/hello-world.html" rel="alternate" type="text/html" title="Hello world" /><published>2023-04-15T00:00:00+05:30</published><updated>2023-04-15T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/04/15/hello-world</id><content type="html" xml:base="https://gagan93.me/blog/2023/04/15/hello-world.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-04-15-hello-world-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-vladislav-klapin-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@lemonvlad?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Vladislav Klapin&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/PVr9Gsj93Pc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I’m starting this blog to give back my learnings to the community. I’ve thanklessly contributed much less in the past as I was mostly occupied with my work. This was primarily because I got a chance to work only in startup environment, where the &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_to_market&quot;&gt;TTM&lt;/a&gt; is generally very less.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;https://www.joshtechnologygroup.com/&quot;&gt;first organisation&lt;/a&gt;, we use to work on a SaaS product where our team was scattered between India and U.S timezones. We use to sync once a day formally (as a standup) and spent rest of the day working on deliverables. While this organisation was “tech only” (as most of us were engineers working on outsourced products), I got a strong grip on technology tasks. When I joined &lt;a href=&quot;https://loconav.com&quot;&gt;LocoNav&lt;/a&gt;, there was a major shift from service to product based mindset. On a single floor, we had all the departments sitting and working (hustling). Accordingly, learnings were much different and ownership was even more than 100% :)&lt;/p&gt;

&lt;p&gt;In my close to 8 years of experience, I’ve grown both technically and personally. I’ve built products, handled client interactions, hired people, contributed to building high level architectures, managed people, took care of appraisals, and what not. Based on all those learnings, I’ll spare time to write about topics that include (but are not limited to): &lt;strong&gt;Software Engineering, Culture, Leadership, and my specialization that is mostly in Ruby on Rails + AWS Cloud&lt;/strong&gt;. I hope that readers will find this content useful.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="hello" /><category term="beginning" /><category term="blogging" /><summary type="html">I'm starting this blog to give back my learnings to the community. I've thanklessly contributed much less in the past as I was mostly occupied with my work. This was primarily because I got a chance to work only in ...</summary></entry></feed>