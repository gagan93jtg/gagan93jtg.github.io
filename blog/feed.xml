<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2023-08-07T08:57:35+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh — Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">Asking Good Questions</title><link href="https://gagan93.me/blog/2023/08/06/asking-good-questions.html" rel="alternate" type="text/html" title="Asking Good Questions" /><published>2023-08-06T00:00:00+05:30</published><updated>2023-08-06T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/08/06/asking-good-questions</id><content type="html" xml:base="https://gagan93.me/blog/2023/08/06/asking-good-questions.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-08-06-asking-good-questions.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-camylla-battani-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@camylla93&quot;&gt;Camylla Battani&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/AoqgGAqrLpU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;On a daily basis, we communicate with a lot of people - family, friends, office colleagues and often with end customers. A lot of this communication is in the form of asking questions and getting answers. If I ask you - &lt;em&gt;How hard it is to ask questions?&lt;/em&gt; Different people might have different answers to this, depending on a few things like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How vocal they are generally?&lt;/li&gt;
  &lt;li&gt;How much they are comfortable to discuss the topic?&lt;/li&gt;
  &lt;li&gt;Is the problem statement clear?&lt;/li&gt;
  &lt;li&gt;Can they describe their problem in a way that the second party can understand?&lt;/li&gt;
  &lt;li&gt;Is there a language barrier, knowledge gap or missing context?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Generally speaking, many people &lt;strong&gt;do not&lt;/strong&gt; think a lot before asking questions. While it encourages them to openly ask questions, it also creates a challenge in understanding the problem for the second party. To solve the same, a lot of to and fro happens while communicating. This is still ok when the parties are communicating synchronously (eg. over a call or in-person meeting) because the parties can clarify their doubts there and then, but becomes worse when the same is happening over an asynchronous medium (eg. chat or email). A common example of such email as an engineering team is – communication with the end customers or other departments where people describe their problem in shortest possible way and assume they will get a solution. Without a process, such emails often run for weeks.&lt;/p&gt;

&lt;p&gt;There are multiple occasions when our sense of asking questions brings different outputs. People who have been using ChatGPT for any purpose will agree with me on this. Response from such generators depends not only on our questions but the context and detailing we provide. For those who have not got a chance to get their hands dirty yet, here are two questions I asked ChatGPT (one with minimal context, another with a detailed context) :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q: Give me a small paragraph  on topic:  optimizing page load&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: In the digital landscape, where milliseconds can make a difference, optimizing page load speed is a non-negotiable priority for any website. As a leading technology company, we understand the significance of delivering an exceptional user experience. One of the most effective ways to achieve this is by keeping images small and well-optimized. Compressing images without compromising quality significantly reduces load times, ensuring that users don’t have to wait for heavy media files to load. Additionally, minifying JavaScript and CSS files is crucial to eliminate unnecessary white spaces, comments, and code, resulting in faster processing by browsers…..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It generated 3 such paragraphs, about 1000 words in total. I added more context to the question in order to get a shorter response and also gave an idea on topics it should focus on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q: As an experienced blog writer on medium for a leading technology company, help me write a small paragraph, not exceeding 250 words. Topic is optimizing page load speed. And in the blog I talk about keeping images small, minifying js/css, keeping large javascripts to the end of page and using CDN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: Optimizing page load speed is paramount in today’s digital world. As a leading tech company, we prioritize delivering an exceptional user experience. To achieve this, we focus on keeping images small and optimized, compressing them without compromising quality. Minifying JavaScript and CSS files further reduces load times by eliminating unnecessary code. Additionally, placing large JavaScripts at the end of the page ensures critical content loads first. Leveraging a Content Delivery Network (CDN) for static content speedup enhances website performance by distributing resources across multiple servers worldwide, reducing server response time. By implementing these strategies, we guarantee a lightning-fast and seamless user journey, fostering higher engagement and satisfaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People have now understood the value of &lt;strong&gt;context&lt;/strong&gt;, atleast while using AI generators. Surprisingly, same is missing in some cases when we question humans. I often get emails and messages like &lt;em&gt;The feature X is broken, can you check?&lt;/em&gt; It is not that the reporter did not their homework. They must have opened the website, clicked some button(s), filled a form (maybe?), seen an error, but they did not tell me all this. They should realize that either I’ll have to do all of this again, or ask them about the same, so better share these details. In my personal ToDo list, I deprioritize tasks that do not contain sufficient context. If you’re facing a problem, you should explain it in detail. Having details will help geting the solution sooner and would eliminate the need of asking &lt;strong&gt;obvious questions&lt;/strong&gt; – Is this breaking for a specific user? Does this break for all the cases or sometimes? Can you share me the error message, error code or a screenshot?&lt;/p&gt;

&lt;p&gt;Similar issue happens in some cases, when we’re communicating within engineering teams. When such issues reach the developers for debugging, they respond like: &lt;em&gt;I couldn’t find the issue despite spending 2 hours on it&lt;/em&gt;. While this is a good first response, this is what anyone would expect afterwards –&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Did you try reproducing the issue as mentioned, before looking into the code?&lt;/li&gt;
  &lt;li&gt;Did we get the exact problem statement in technical terms (i.e. what exactly is breaking)?&lt;/li&gt;
  &lt;li&gt;Could we figure out what specific class or method in the code deals with the broken part?&lt;/li&gt;
  &lt;li&gt;Does the code need restructuring in order to debug? If we need to restructure, do we have automated tests?&lt;/li&gt;
  &lt;li&gt;Are there recent changes in this code? Do we know after which release did this started breaking?&lt;/li&gt;
  &lt;li&gt;Do you need someone to pair with you in order to debug this? Or probably move this to someone else?&lt;/li&gt;
  &lt;li&gt;If you want someone else to check, have you recorded the investigation in the issue tracker as a comment?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of the above points might not be applicable to all issues, but this is what comes to my mind generally. Such questions help in building a clear understanding of the problem and proposing a fix that makes sense. You get half of the solution by understanding the problem clearly. When you’re seeking solution of your problem from someone else, make sure you can show what you have tried before reaching them out. Have answers to all the obviou questions. This is an underrated skill but optimizes much of the communication cycle.&lt;/p&gt;

&lt;p&gt;This post is just an introduction to asking good questions. There’s a very detailed, opinionated post (might sound little rude) on this topic already. &lt;a href=&quot;http://www.catb.org/~esr/faqs/smart-questions.html&quot;&gt;Click here&lt;/a&gt; to read the same. Take care and see you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="questions" /><category term="context" /><summary type="html">On a daily basis, we communicate with a lot of people - family, friends, office colleagues and often with end customers. A lot of this communication is in the form of asking questions and getting answers.</summary></entry><entry><title type="html">Efficient Fullstack Delivery</title><link href="https://gagan93.me/blog/2023/07/29/efficient-fullstack-delivery.html" rel="alternate" type="text/html" title="Efficient Fullstack Delivery" /><published>2023-07-29T00:00:00+05:30</published><updated>2023-07-29T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/29/efficient-fullstack-delivery</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/29/efficient-fullstack-delivery.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-29-efficient-fullstack-delivery.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-cherrydeck-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@cherrydeck&quot;&gt;Cherrydeck&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/rMILC1PIwM0&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Many organisations face the issue of missed deadlines. The reasons for this might be a one-off case or repeated scenarios. Today, I’ll share how we’ve optimized full-stack product delivery through years of learning.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Clarity of thought&lt;/strong&gt; - The leaders (product &amp;amp; engineering leads) involved in building a specific product should have a very clear thought on what we’re trying to build. If the product is in very initial phase, this can be somewhat hazy. It is not a problem to “not have a well thought product”. But don’t let the hazy-ness propagate to development teams, otherwise everyone will have their own interpretation of the idea. Engineers are programmed mentally to work on exact requirements. The sense of ambiguity doesn’t let them work efficiently, at least in initial years. To get the best output from them, give them clear requirements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Get everyone on the same page&lt;/strong&gt; - I don’t generally encourage meetings that involves many people, be it remote, or in person. Most of the things my team work on are communicated on JIRA tickets and clarified by chat, or short calls. But there’s a phase when you are starting on something new. The walkthrough of initial idea should be done over a call (or in-person meeting if working from office). This is the point when product and design have almost finalized the workflows, the engineering leads have given a go-ahead on feasibility of product and the story is ready. Set-up a meeting with the team, explain them the idea, take their inputs, do the required changes (if any), see if everyone has clarity and then &lt;strong&gt;freeze the story&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t exclude testers&lt;/strong&gt; - In point 2, the “team” doesn’t mean only backend and frontend engineers. QAs are often shared across multiple product teams, so we think we’ll share the story with them once development is complete. This is an unoptimized process. We had been doing this in the past and it just brings confusions. Some of the issues that happen are:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Corner cases in product flows are not figured out initially as QA was not present in initial meeting.&lt;/li&gt;
      &lt;li&gt;Some engineers might explain the product to QA team in their own way when it comes for testing. The interpretation can be very different. Even if product team explains the flow, it’s waste of effort as they already did it initially.&lt;/li&gt;
      &lt;li&gt;Fixing corner cases might mean change in flows, design and hence code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Walking on water and developing software from specifications are easy if both are frozen&lt;/strong&gt; - This is a very famous quote in software engineering. Change is inevitable in software projects, and this doesn’t mean that our software shouldn’t expect future changes, but the point is that current development cycle should have fixed set of requirements. Product teams should have enough discussions with the required stakeholders to make sure that they are aware of what is “actually needed”. Cost of change in a “software under development” is usually high - because product team updates the story, design teams update their designs, developers change their code (often ending up adding hacks because they already built the previous version), QA needs to test all impacted areas, and the overall deadline shifts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Estimations&lt;/strong&gt; - There are two things we’ll discuss: Dev estimates and overall estimates. Assuming the designs are ready, the expectation is that developers should start working on the product right away. But don’t miss the estimation part, specially when you’re working with a new team. My team was doing &lt;a href=&quot;https://projectmanagementacademy.net/resources/blog/a-three-point-estimating-technique-pert/&quot;&gt;PERT estimates&lt;/a&gt; in the past to do task breakdown and estimating individual tasks. Once we got enough idea on our speed, we now share a ball-park (rough) estimate mostly. IMO, all freshers should learn doing PERT estimates. Apart from just estimates, it also helps you to break your tasks into subtasks. Once dev estimates are complete, product team needs to take QA estimates as well, add some buffer (this comes by experience) and share overall estimates as a delivery date (&lt;strong&gt;Bonus point&lt;/strong&gt;: Don’t forget to consider everyone’s leave plans at the start of development).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Realistic Parallelism and team motivation&lt;/strong&gt; - &lt;a href=&quot;https://planningengineer.net/9-women-cannot-deliver-a-baby-in-one-month/&quot;&gt;9 women cannot deliver a baby in a month&lt;/a&gt;. This phrase is used in software engineering to explain that we shouldn’t expect “faster delivery” just because we have the option to put more people. If your team is new, or the organisation itself is a startup, I’d always recommend to start with less people (or you’ll just be solving their conflicts). People management is a task in itself when you’re managing a development team that has multiple sub-teams. I remember, back in 2018 when I was developing APIs for our new mobile app, I was the only one from backend team, 2 were from frontend, 1 QA and 1 Product guy. Even then we faced a lot of issues because none of us were experienced to work at that pace, and with less clarity. Our initial app took months to take off. Revised dates and unrealistic expectations of parallelism often affect team’s motivation because leaders can’t see the needle moving and developers are expected to overwork for days (and sometimes weeks).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical perspective&lt;/strong&gt; - Most of the above pointers are related to overall team, so sharing some tips for the developers here:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Once product discussion is complete, backend and frontend leads should connect separately to finalize set of APIs.&lt;/li&gt;
      &lt;li&gt;Make sure that error codes, error responses are consistent and clearly understood by both the parties. This is for the long term, not just for current product.&lt;/li&gt;
      &lt;li&gt;Create separate sub-tasks for backend and frontend so that JIRA tracking is clear. Backend should start building models/APIs while frontend should make designs meanwhile.&lt;/li&gt;
      &lt;li&gt;If backend needs some Devops assistance to launch a new server, database or something similar, do include that in the estimates. Create task(s) for infra team with priority mentioned.&lt;/li&gt;
      &lt;li&gt;If backend development is expected to take much longer due to some initial setup of things, clarify the same. You might need to build some mock API responses so that frontend team can integrate the same meanwhile. We have used &lt;a href=&quot;https://github.com/iridakos/duckrails&quot;&gt;this tool&lt;/a&gt; in the past for the same. If this is not possible, atleast mention exact API responses in your tickets so that frontend team can write code against it and integration testing can be done later.&lt;/li&gt;
      &lt;li&gt;Don’t skip writing tests. No software system has been constructed in a way that it remains unchanged in the future. Your manual testing effort is going to exponentially increase as more changes come.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Above insights are from my experience working on multiple full-stack products @ LocoNav, both for mobile and web clients. I’ve contributed both as a developer and as a manager, so I’ve seen the situation from both the lenses. If you think that your delivery dates are still shifting despite following best standards, consider doing a &lt;a href=&quot;https://www.aha.io/roadmapping/guide/agile/what-is-an-agile-retrospective&quot;&gt;retrospective meeting&lt;/a&gt; after the delivery.&lt;/p&gt;

&lt;p&gt;Take care and see you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="full-stack" /><category term="efficiency" /><category term="product" /><summary type="html">Many organisations face the issue of missed deadlines. The reasons for this might be a one-off case or repeated scenarios. Today, we'll try to understand how can we optimize full-stack product delivery as a team</summary></entry><entry><title type="html">Migrating data across services</title><link href="https://gagan93.me/blog/2023/07/22/migrating-data-across-services.html" rel="alternate" type="text/html" title="Migrating data across services" /><published>2023-07-22T00:00:00+05:30</published><updated>2023-07-22T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/22/migrating-data-across-services</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/22/migrating-data-across-services.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-22-migrating-data-across-services.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-from-datanami&quot;&gt;Photo from &lt;a href=&quot;https://www.datanami.com/2019/12/12/google-launches-transfer-service-for-on-prem-data/&quot;&gt;Datanami&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With reference to my &lt;a href=&quot;https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices.html&quot;&gt;last post&lt;/a&gt; and comment on the corresponding &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7085911288056299520?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7085911288056299520%2C7085935059165192192%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7085911288056299520%2C7086039096455815168%29&quot;&gt;LinkedIn post&lt;/a&gt;, I’m explaining how we planned migrating data while transitioning to microservices architecture. There can be multiple approaches to do the same. In a nutshell - we simply want to replicate the data to the new service in a reliable manner at scale.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dump and restore the table on database level&lt;/strong&gt; - Whatever database you’re using, there should be some utility that allows you to do the same. But this is a one time operation, and doesn’t ensure continuous sync of data. For the systems that hardly change, we can do this. Another thing that we assume here is that schema is exactly the same. Often, when we transition to services, some columns change or get removed (eg. foreign keys that no longer exist in new system). So this is very less likely to be used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Setup hooks in old service &amp;amp; continuously sync data&lt;/strong&gt; - I assume that your MVC architecture would help you to setup such hooks. Eg. we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks in Rails models to replicate such data. And some custom scripts (or rails console) to backfill existing data. Depending on size of data this might take a lot of time to backfill existing data, but should replicate the complete data on the new system.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We used the second approach, architected by Nimish Mehta (Senior Staff Engineer @ LocoNav). Even to implement this approach, there are multiple ways, where each has it’s own complexity and reliability:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Directly replicate data&lt;/strong&gt; - Here, we’ll simply use the hook in the first application to hit some REST/grPC endpoint of the second application. This should work well till the second system is up and running. Incase the second system goes down, our application should have sufficient retry mechanism before it considers to stop sending further data, or to mark the current packet as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failed&lt;/code&gt;. There are more things that can happen. Considering a large system, where many such use cases will exist, it was inefficient to build this intelligence in all of them. We needed a better solution.
&lt;img src=&quot;/blog/assets/images/2023-07-22-data_migration_arch_1.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin-bottom: 40px;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Producer-consumer pattern&lt;/strong&gt; - We thought of setting up a queueing mechanism using Kafka topics. The primary app (&lt;em&gt;producer&lt;/em&gt;) shall publish the data on kafka topic and the new app (&lt;em&gt;consumer&lt;/em&gt;) shall read the data from kafka topic whenever it is available. Though this sounded good, it would mean that all such consumer applications shall have the logic to read kafka topic and maintain success/failure logs. This was again adding complexity to each consumer application, and hence this solution was not optimized for the long run.
&lt;img src=&quot;/blog/assets/images/2023-07-22-data_migration_arch_2.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin-bottom: 40px;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup an app in the middle&lt;/strong&gt; - The best solution that we found was to have an app in between producer and consumer. So it goes like - your producer app publishes the data on kafka topic and your consumer app exposes a REST endpoint that accepts data in a known format. In the middle, we have an application that takes care of:
    &lt;ul&gt;
      &lt;li&gt;Reading data from Kafka.&lt;/li&gt;
      &lt;li&gt;Formatting it to JSON (from optimization perspective, we published in &lt;a href=&quot;https://github.com/protocolbuffers/protobuf&quot;&gt;protobuf format&lt;/a&gt;).&lt;/li&gt;
      &lt;li&gt;Pushing to consumer application’s REST endpoint.&lt;/li&gt;
      &lt;li&gt;Having enough retries and a lot of configuration around the same.&lt;/li&gt;
      &lt;li&gt;Scalable, partitioned database that stored logs of all requests sent to the REST endpoint.&lt;/li&gt;
      &lt;li&gt;Provision to retry upto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAX_RETRIES&lt;/code&gt; (configurable) per use case.&lt;/li&gt;
      &lt;li&gt;Provision to retain success/failure logs upto certain hours/days (configurable), and much more.
&lt;img src=&quot;/blog/assets/images/2023-07-22-data_migration_arch_3.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin-bottom: 40px;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We found the third architecture best for our use case because it has almost zero duplication of code/optimizations on producer or consumer end. Also, in case we need to build anything in future (eg. a UI to query failure logs, or a button to retry), we’d just need to build in the central app. From our experience, I can say that it has solved a lot of pain for other teams because success/failure logs become large with time and none of the team need to worry about it because the team maintaining this central app (“developer productivity team”) takes care of that. This simplifies both apps and life of other developers 😇.&lt;/p&gt;

&lt;p&gt;See you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="architecture" /><category term="data-migration" /><category term="kafka" /><summary type="html">Today, I'm explaining how we planned to transfer millions of rows &quot;reliably&quot; to a different service during our journey to services architecture.</summary></entry><entry><title type="html">Monolith → Microservices</title><link href="https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices.html" rel="alternate" type="text/html" title="Monolith → Microservices" /><published>2023-07-14T00:00:00+05:30</published><updated>2023-07-14T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-14-mindset-shift-monolith-to-microservices.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-from-standford-news-website&quot;&gt;Photo from &lt;a href=&quot;https://news.stanford.edu/2018/06/11/four-ways-human-mind-shapes-reality/&quot;&gt;Standford News Website&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;At LocoNav, we have been maintaining a decently large (yet manageable) monolith Rails application. Initially, all of our backend stack was in Ruby. With time, our ingestion layer was rewritten in Golang, the data layer was moved to Java, but the web part was still a large monolith. It had almost every functionality we provided and the developers kept adding more functionalities to it. We knew that we’re building a strongly coupled system that would need untangling very soon.&lt;/p&gt;

&lt;p&gt;Around mid 2021, we started our discussions to break this application. Fast forward to today, the large application still exists. Few parts of the system were extracted out, many are still in-progress, while some got deprioritized, but the knowledge gained from the process was immense. I’m sharing a few points from that knowledge:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Keep frontend out as soon as possible&lt;/strong&gt; - Our monolith is a fullstack application. That means we had the entire frontend code is inside this repo. Our oldest stack was Embedded Ruby and jQuery with Bootstrap. But soon we started moving part of system to React. For the longest time (including now), our deployment process included management of both ruby and react based frontends. If you have seen the deployment of a frontend / fullstack application, then you might be aware of the processes that happen to make frontend assets production ready (transpilation, minification, compression and much more). Our frontend part of deployment (known as asset precompilation in rails) takes 50-60% of the total deployment time. We’re in process of taking out React frontend completely from this repo, but this is the debt we pay everytime we need to deploy our app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Read alot before starting&lt;/strong&gt; - Monolith to microservices is a complete subject on it’s own. You might be a very experienced senior developer, but I’d not recommend doing anything without reading enough on the topic. I found &lt;a href=&quot;https://www.oreilly.com/library/view/monolith-to-microservices/9781492047834/&quot;&gt;this book&lt;/a&gt; quite helpful in understanding the challenges and the journey. By reading enough, you’ll make sure that you don’t get trapped into issues like &lt;a href=&quot;https://www.techtarget.com/searchapparchitecture/tip/The-distributed-monolith-What-it-is-and-how-to-escape-it&quot;&gt;distributed monolith&lt;/a&gt; or data inconsistency. Also, unlike before when the entire system went down or came back as a whole, now parts of system can fail. So we need to make sure that the dependent services handle these situations (eg. adding required timeouts).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Align enough resources&lt;/strong&gt; - Often companies with small team of developers assume that they can align some bandwidth for microservices migration but even after months they don’t see any significant progress. Please understand that microservice migration needs a dedicated effort. That doesn’t mean 2x of your developer strength, but atleast more than what you currently have (or deprioritize some tasks for existing developers for a long time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Train people for now and future&lt;/strong&gt; - The developers (like me) who have been working on monolith over the years will need a mindset shift to start working on microservices in a productive manner. Some people might not agree to it, but the idea of microservices is modularlity. If you bring the same mindset of monolith system while writing services, you might end up with a few small monolith applications. You’ll need to develop a lot of libraries and tooling in order to avoid repetition of work across services. Some use cases of such libraries are - consistent logging, request-response handling, inter-service authentication, deployment tooling, etc. Accordingly, developers need to learn how to use these to avoid duplicate effort. Anything that sounds outside scope of your business logic should be taken out in a library so that someone else can use it in future, if needed. This habit also allows you to write functionalities that are decoupled from business logic (&lt;a href=&quot;https://cloudcomputingtechnologies.com/the-importance-of-decoupling-in-software-development/&quot;&gt;Click here&lt;/a&gt; to read more about &lt;em&gt;Benefits of Decoupling&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Leverage OpenAPI autogeneration&lt;/strong&gt; - If you’re aware of OpenAPI documentation (more popularly known as &lt;a href=&quot;https://blog.hubspot.com/website/what-is-swagger&quot;&gt;Swagger documentation&lt;/a&gt;) and you don’t know about the autogeneration that comes free with it, then you’re missing something great. Although this could be a detailed post on it’s own, but in brief - if you are defining a nice API documentation for your service, and have documented all the request and response schemas along with it, then you can generate a client in any popular programming languge without much effort and start using it without any hassle. I’m leaving two links here to help you get started with this (don’t miss this): &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;The tool&lt;/a&gt; and &lt;a href=&quot;https://openapi-generator.tech/docs/usage/&quot;&gt;The documentation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Think twice whenever you’re building something new&lt;/strong&gt; - Whenever you’re building a feature that sounds somewhat large, just think if you can draw clear boundries on the needs of this feature and take it out right away. This might be easily possible for some features while an overkill for others. I’ll leave this to the understanding of Engineering manager who is building this. Incase you still plan to build this inside the monolith app, use required service layer (&lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;facade layer&lt;/a&gt;) to access this feature so that your controller layer doesn’t heavily depend on the model layer (ORM) to CRUD on the data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Refactor, Refactor, Refactor&lt;/strong&gt; - Read a book around design patterns if you can. When you plan to take out a module from your large app, you will introduce some layers of abstractions that might be temporary or permanent in order to decouple it from rest of app. This is true for any part that you’re taking out from a monolith (you are be blessed if you don’t need to do this). This effort might be under-estimated if you’re doing this activity for the first time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Costs will increase in two ways&lt;/strong&gt; - True microservices system is not for small teams. You need people to manage production grade services. Although the ratio between developer and services varies from one organisation to the other, but generally the need of developer increases as you move to services. You might want to rethink your decision of moving to microservices if you don’t want to invest in a larger team (Read &lt;a href=&quot;https://www.fullstacklabs.co/blog/modular-monolithic-vs-microservices&quot;&gt;this&lt;/a&gt; for an alternative architecture). Another direction in which cost increases is the &lt;strong&gt;cloud cost&lt;/strong&gt;. More services will lead to more costs - costs for servers (or containers, or pods), databases, infrastructural maintenance of these systems, test, deployment and so on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Above are the best insights I can share from my experience. See you guys later!&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="architecture" /><category term="monolith" /><category term="microservices" /><category term="mindset" /><summary type="html">At LocoNav, we have been maintaining a decently large (yet manageable) monolith Rails application. Initially, all of our backend stack was in Ruby. With time, our ingestion layer was rewritten in Golang, the data layer was moved to Java but the...</summary></entry><entry><title type="html">Fixing code exceptions</title><link href="https://gagan93.me/blog/2023/07/01/fixing-code-exceptions.html" rel="alternate" type="text/html" title="Fixing code exceptions" /><published>2023-07-01T00:00:00+05:30</published><updated>2023-07-01T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/01/fixing-code-exceptions</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/01/fixing-code-exceptions.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-01-fixing-code-exceptions.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-joshua-hoehne-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@mrthetrain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Joshua Hoehne&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/LndcUO8Z-IM?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A regular day in the life of a software engineer includes a lot of work - discussing status of things, writing new code, fixing customer issues, mentoring others and so on. Specifically, if we talk about fixing customer issues, they could be of two kinds:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A feature was built wrong but is not throwing a code level exception.&lt;/li&gt;
  &lt;li&gt;A corner case exists in the feature causing an exception in the code flow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today, we’ll discuss about the second case i.e. exception scenarios. Software teams integrate tools in their code repositories to capture such exceptions. These tools can be self hosted or commercially hosted by some company. Sentry and Bugsnag are the most common tools I’ve heard in this space. I’ve also used tools like &lt;a href=&quot;https://www.rubydoc.info/gems/exception_notification/4.1.4&quot;&gt;exception notification&lt;/a&gt; for my personal projects. At LocoNav, we’ve been using Bugsnag for more than 5 years now. We have also integrated Bugsnag with our JIRA. So all the exceptions get tracked as JIRA tickets.&lt;/p&gt;

&lt;p&gt;Interestingly, I often see developers “just trying to fix the bug” in order to close a bugsnag issue. So I’m trying to pen down what we should be focussed on when we see an exception assigned to us:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;It’s both good and bad&lt;/strong&gt; - Softwares become complex, and we miss out testing specific cases, so exceptions can occur. It is not a sin. But the severity of that issue depends on what is broken. You might be running a software for life-critical operations. So your bug can cause a greater damage. Or a stock market trading website, so a bug makes you or your customer loose real money. For large organisations, bugs and downtimes cause loss of millions of dollars. So in brief, it’s might be fine to cause such issues once in a while, and in very corner cases. But not OK to normalize it. Developers often put blames on QAs for missing the specific test case. But I personally believe that your code is your responsibility. No CR mistake, no QA mistake. Test it well using both automation and manual flows before taking forward.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prioritize bug fixing&lt;/strong&gt; - It might become an attitude to have many open bugs in your module in the name of “bandwidth crunch”. This simply means that you don’t prioritize bugs. On one hand, developers talk about “users dropping from a website due to slow page load” (&lt;a href=&quot;https://kinsta.com/blog/ttfb/&quot;&gt;reference to this context&lt;/a&gt;) and on the other hand they normalize broken features. Crazy, no? Convince your leaders and product teams to prioritize these bugs as a part of every sprint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t just fix the issues&lt;/strong&gt; - Please understand the issues before doing a fix - find the user(s) who are facing this, reproduce the issue on production, then do the same on your local machine (if possible), do your investigation and discuss the fix with your team. Make sure you understand that the bug completely before doing any fix. Also check if it is only a missing null-check or some design issue. Simplest fix can do a greater damange (discussed more in point 5).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Please fix bugs, not bugsnags&lt;/strong&gt; - I wrote this line in the past in our slack channel. I had to write this because I saw people raising pull requests to fix null pointer issues by &lt;a href=&quot;https://blog.shiftasia.com/better-null-check-with-safe-navigation-operator-in-ruby/&quot;&gt;safe handling the null check&lt;/a&gt;. This is the worst thing you can do to fix the issue. It simply means that the feature might still not work perfectly, but atleast it will not throw an exception now 😑.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long term data issues&lt;/strong&gt; - Sometimes, having bugs in your code do a greater damage. They either hide data issues, or cause data issues. I’ll give examples of both below (code samples in Ruby):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# code hiding a data issue&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;classs&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyService&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_this&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_that&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_some_email&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this code will never report any issue if an invalid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_id&lt;/code&gt; is passed to it. If this sounds like a feature to you, then you might be mistaken (read this &lt;a href=&quot;https://en.wikipedia.org/wiki/Fail-fast&quot;&gt;philosophy&lt;/a&gt;). Do you get an error if you try to insert some data into a table with wrong column names? Or does SQL simply ignore the wrong column and insert rest of the data? While your code should work as expected for expected cases, you should also make sure that it raises the required alarms in case it is not given the correct input. Here, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement is hiding an error inside it. So in case a user_id stored as a foreign key in some other table is passed to this service, and incase that user is missing from the database, nothing would report it. Probably some developer added this if statement just to fix the issue (point 3). But this is what damage it can cause.&lt;/p&gt;

&lt;p&gt;Coming to the second case:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# code causing a data issue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyService&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;track_activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;start_time: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;end_time: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks like some developer added safe navigation to avoid an exception. The implication of that fix is a data issue that you can probably never solve. Clearly, a null user can be passed to this service and nothing will break. And that’s not a feature but a very huge bug. You can have activities in your database that contain null in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_id&lt;/code&gt; column, and there are chances that you can never associate that to a genuine user. So you’ll be left with customer issues telling that some activities are not tracked, and some entries with null &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_id&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
Fortunately, I’ve been part of both the words - the teams where we started from scratch and did very fast development, and the teams where the software was built by someone else and we did only maintenance / bug fixing. And after seeing issues in both the worlds, I can infer that bug fixing is a serious matter, and it needs more attention than building something from scratch. Do understand the scope of the feature and bug before you raise a pull request for the fix.&lt;/p&gt;

&lt;p&gt;Happy bug bashing 😁&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="bug-fixing" /><category term="data-issues" /><category term="stability" /><summary type="html">A regular day in the life of software engineer includes a lot of work - discussing status of things, writing new code, fixing customer issues, mentoring others and so on. Specifically, if we talk about fixing customer issues, they could be of two kinds</summary></entry><entry><title type="html">‘Classify’ Your Codebase</title><link href="https://gagan93.me/blog/2023/06/20/classify-your-codebase.html" rel="alternate" type="text/html" title="‘Classify’ Your Codebase" /><published>2023-06-20T00:00:00+05:30</published><updated>2023-06-20T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/06/20/classify-your-codebase</id><content type="html" xml:base="https://gagan93.me/blog/2023/06/20/classify-your-codebase.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-06-20-classify-your-codebase-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-chuttersnap-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@chuttersnap?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;CHUTTERSNAP&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/7eQlPra81zQ?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Most of the software engineers have a strong (theoratical) grip on OOPs concepts right from the college days but few still struggle to apply them while working. There was a time in my career when I realized that my code is doing everything it is expected to do but I was unhappy with how it looked. I have written methods that were even 200-300 lines long, and classes 1000 lines long. But today if I see any such code, I call it &lt;strong&gt;unmaintainable&lt;/strong&gt; and &lt;strong&gt;untestable&lt;/strong&gt;. In this post, I want to share one thing that helped me transform my mindset, i.e. &lt;strong&gt;The power of small changes&lt;/strong&gt;. It took me months to understand how this habit is more impactful because earlier I thought this is counter-productive.&lt;/p&gt;

&lt;p&gt;Few years ago, I worked on upgrading Rails major version of a monolith project (an app that powers most of LocoNav website). Most of the changes here were pushed in one large pull request (&lt;em&gt;100+ commits, 270+ file changes, 1300+ additions, 1600+ deletions&lt;/em&gt;, all by just me). Although it didn’t break anything related to code on production, but I was quite nervous at the time of release. No one even reviewed this PR much because it was hard to review (as discussed in the first point &lt;a href=&quot;https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate.html&quot;&gt;here&lt;/a&gt;). Also, I found out that while raising large PRs worked for me, it did not scale for my team. Many such PRs sent by others caused production bugs.&lt;/p&gt;

&lt;p&gt;We had a senior engineer who always advocated for small PRs and slowly I got influenced to follow the same. Being in a startup environment, we had to be fast enough in terms of delivery, so the main concern was - &lt;em&gt;How can we break changes into small parts and still deliver fast?&lt;/em&gt;. We started looking in the PRs on how we were organising our classes. We found out that we’re mixing a lot of responsibilities and not following SOLID principles at all (forget design principles!). You might think that I’m mixing basic OOPS with SOLID and other design principles (eg. prototype, builder or composite). But if you think carefully – it’s all about creating small classes that can talk to each other to complete a task. Let’s talk about a simple inheritance example that we studied during college days (code sample is in Ruby but should be basic enough to understand):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bark&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BARK!&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we clearly see that one class is doing one task (just defining a specific Animal, or adding more behaviour in subclass). Now let’s move to a real-world example of processing an order on an ecommerce website:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Inheriting from ApplicationRecord means this is a model ('M' in MVC)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sell&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_inventory&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;apply_discount&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_bill&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process_order&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send_to_dispatch_team&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_inventory&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_discount&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_bill&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_order&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_to_dispatch_team&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are multiple questions that come to my mind when I see such a code, but the fundamental one is - Why did we keep this method (and all it’s associated methods) inside a model (or inside one class)? While this might look simple for once, it is doing a very complicated task. It’s clearly visible that we might be calling other services or a payment system while processing an order, and hence any step can fail. There seems no defined way to rollback the previous steps if any step fails. And if we want to build such a process, would we want to put those methods also in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; class? (The above code is influenced from &lt;em&gt;Fat models Thin Controllers&lt;/em&gt; philosophy).&lt;/p&gt;

&lt;h1 id=&quot;the-answer&quot;&gt;The Answer&lt;/h1&gt;
&lt;p&gt;What do you think? Should you take a course on Design Patterns in order to refactor this? Few months ago I read a &lt;a href=&quot;https://refactoring.guru/design-patterns/book&quot;&gt;book&lt;/a&gt; on the same, and I’m sure that there are a lot of improvements we can do before applying design patterns.  Developers often shy away from doing this but the only solution to have a maintainable codebase is to &lt;strong&gt;break such classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whenever you see a logical chunk in a class, that is not related to rest of the code and can be taken out, please take that out. We often think that we can do all this later, but that time never comes till we see some serious issues with the code. Due to this delay, the methods inside the class become more coupled to each other and the effort of taking that out becomes much larger. The above is a very simple example where you could have a plain ruby class (&lt;a href=&quot;https://sulmanweb.com/plain-old-ruby-objects-poros-in-rails-fat-models/&quot;&gt;PORO&lt;/a&gt;) called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderProcessingService&lt;/code&gt; that has all the business logic for processing an order. And obviously, if needed, we’ll have more classes for performing other steps (checking inventory, applying discount, etc). It’s good to know about SOLID Principles and Design patterns, but at the end of the day you see - it’s all about distributing responsibilities, reducing coupling and creating more (small) classes. If you know how to apply this, you can apply design patterns as well. Otherwise everything is theory!&lt;/p&gt;

&lt;p&gt;So the next time you see yourself or a colleague writing methods in a class that should be separated out, please make sure you do that. That will pay you in future 😀. Another way of knowing about your code’s health is to write test cases for it. If it’s easy to write test cases for a class without mocking a lot of things (except external services), then it’s ok. Otherwise you might want to refactor your classes. Happy coding!&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="modularity" /><category term="low-level-design" /><category term="maintainability" /><summary type="html">Most of the software engineers have a strong (theoratical) grip on OOPs concepts right from the college days but few still struggle to apply them while working. If you are someone who see a large number of small classes in your codebase that are well...</summary></entry><entry><title type="html">Things Code Reviewers Hate</title><link href="https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate.html" rel="alternate" type="text/html" title="Things Code Reviewers Hate" /><published>2023-06-09T00:00:00+05:30</published><updated>2023-06-09T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate</id><content type="html" xml:base="https://gagan93.me/blog/2023/06/09/things-code-reviewers-hate.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-06-09-things-code-reviewers-hate-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-tim-gouw-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@punttim?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Tim Gouw&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/1K9T5YiZ2WU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Is reviewing code part of your daily job? Unless you’ve got a super nice team (that doesn’t actually exist), you must have faced most of these aspects while reviewing your peer’s code. Although I’d completely agree that I must have done submitted this kind of code when I was junior, hence the karma!&lt;/p&gt;

&lt;p&gt;On an average, I review about 6-8 pull requests on a daily basis. Some PRs require my approval because of Github code owner rules, while rest of them are raised by my team members. Every few days, the developer inside me is hurt because of the code I get to see. Few of these points are related to pull requests, while some are generally related to writing good code. These are the top few things I hate:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long pull requests&lt;/strong&gt; - There are plenty of reasons why our PRs should be short but here I’d share my perspective as a code reviewer only. When I look at long PRs, I’m not able to understand what we’re trying to do as a whole and why did we not break this change into parts. Let’s agree for a second that this PR is doing one dedicated task so it should be ok to accept this, but if I give 10 CR comments, and developer fixes 8 of those, and justifies rest two, I’d need to again look at the long PR again to see what fixes were done and how it impacted overall code. Incase multiple cycles of review happen, my context for this PR is so large that I’ll be lazy to pick this for another round of review. Even as a developer also, you need to test the entire code again because code changes with respect to 8 comments might have impacted some areas. So basically, it doesn’t benefit anyone. Although it sounds tough to break changes into parts, but trust me, that’s what a good developer is expected to do. Also, please note that there is no definition of “long” PR. As a developer, we should try to break changes into as many shippable chunks as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Missing minimum information&lt;/strong&gt; - PR title and description should mention the brief scope of change. Although this is standard across many companies, still many developers forget to do this sometimes. Asking for a code review without much information is very unproductive for the reviewer. They should not be expected to ping you, or find the JIRA ticket themselves, or magically understand the scope by reading the code. At LocoNav, we have a simple convention of putting JIRA ticket ID in the PR title first, followed by brief description of change. Although requirements and scope of change is mentioned in detail on the JIRA ticket, but some developers optionally mention a summary in description section of PR.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Untested code&lt;/strong&gt; - I feel my time is wasted on code review if I see a piece of code with a logical error in it. This
means the developer didn’t bother to test the code locally before raising the PR. This is the worst you could do to respect someone’s time. Some developers think we’ll test the code later (on staging environments) and they raise the PR first. But they forget that doing QA and catching such bugs is not the scope of reviewer (although we do it sometimes). If we approve this code, and it breaks on further environments, we’ll again have to review the same after the developer fixes this code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Non-Linted code&lt;/strong&gt; - There are all sorts of tools people use for development. From simplest text editors like Sublime and VSCode, to complicated and heavy IDEs like IntelliJ and RubyMine. Almost all tools have configurations that you can setup to lint your code properly. Infact, linting should never be done by hand as it is a task that can be easily given to our editor. Common things include proper spacing &amp;amp; indentation, no trailing whitespaces, no extra new lines. Beyond this, there could be language specific rules. Please always lint your code properly before submitting for a CR. For me, it’s a turn off to see non-linted code and I don’t shy away to give comments like “Please use space on both sides of equals operator”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Repeated mistakes&lt;/strong&gt; - Unless your organisation has high attiration rate, or is shuffling people across teams frequently, you must be working with the same set of people for a long time. We know how someone is growing. In the beginning people do all sorts of mistakes and get many review comments but that generally improves with time. Frustration kicks in as a reviewer when people don’t improve on same set of mistakes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The next two points are more related to writing good code, but still listing them down here as they are related to PR reviewer’s experience also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Poorly organized code&lt;/strong&gt; - We need to ensure that low level design of our module is good and our classes &amp;amp; interfaces are separated nicely. Although this could be a wide separate discussion but in brief we should ensure small classes, each minding it’s own business and not strongly coupled with other classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Catching Top level exception classes&lt;/strong&gt; - We often write long methods that could possibly throw a lot of exceptions, and later we just wrap the entire method’s code in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin...rescue&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try...catch&lt;/code&gt;) block with exception superclasses (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StandardError&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; class in Ruby and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; class in Java). Doing this is so risky that it could be a complete post of it’s own. &lt;a href=&quot;https://stackoverflow.com/questions/10048173/why-is-it-bad-style-to-rescue-exception-e-in-ruby&quot;&gt;This stackoverflow answer&lt;/a&gt; describes the issues for Ruby language, but those are conceptually applicable to all languages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So next time you plan to raise a PR for review, I’d recommend you to consider atleast these points (although there are many more). I prefer to self-review the PR first before submiting it further to ensure that there are no obvious mistakes or debugging messages left. This small habit can help reduce to and fro between you and the reviewer, and improve feature delivery speed.&lt;/p&gt;

&lt;p&gt;Thank you for sparing time to read this. See you later!&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="code-review" /><category term="development" /><category term="frustration" /><summary type="html">Is reviewing code part of your daily job? Unless you've got a super nice team (that doesn't actually exist), you must have faced most of these aspects while reviewing your peer's code.</summary></entry><entry><title type="html">Eight Productive Hours</title><link href="https://gagan93.me/blog/2023/05/27/eight-productive-hours.html" rel="alternate" type="text/html" title="Eight Productive Hours" /><published>2023-05-27T00:00:00+05:30</published><updated>2023-05-27T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/27/eight-productive-hours</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/27/eight-productive-hours.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-27-eight-productive-hours-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-jaelynn-castillo-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jaelynnalexis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jaelynn Castillo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/xfNeB1stZ_0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The key to working fewer hours is not to simply do less, but to do what matters the most&lt;/em&gt; - Unknown&lt;/p&gt;

&lt;p&gt;I’m a morning person. So I usually start around 8 AM from my home desk. The time was same even when I worked from office. Almost everyone starts after 9:30 or 10, giving me enough time for tasks that require strong concentration. I try to devote a part of this time to reading if my work-schedule allows (which it doesn’t, generally). I expect some personal time in the evening so that I can take care of my health &amp;amp; family. Many people start late and take care of these things in the beginning of the day. In my opinion, both of the ways are fine. But I strongly emphaisize on the fact that one must have a life outside work so that weekends and holidays aren’t boring.&lt;/p&gt;

&lt;p&gt;Reading the post title, you might be thinking that I’m talking about a clear separation between personal and professional life but this is not exactly what I mean. In my opinion, there are times when you should be ready to take up work even in the middle of a night, while there are times when you should clearly say NO to things. Whole of my career, I’ve been part of startup culture only, and I’ve seen both the scenarios. At the same time, I’ve seen people overworking and still barely delivering what’s expected from them. There are reasons why this happens, and I’ll try to list a few of them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not owning your own time&lt;/strong&gt; - If you are an old member of a small team (that grew somewhat large with time), there are a lot of dependencies on you. There are days when I get so much work from all possible directions that I feel like being driven by others. This is ok for a day or two, but should not happen regularly. You should have a list of things you are working on, and your personal deadlines to complete those. If you are someone who doesn’t have personal targets, and are always driven by others, you can end up overworking almost regularly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unstable projects&lt;/strong&gt; - If there is some code that you wrote or you maintain, that frequently breaks (specially during odd hours), you might be overworking to support it at night . If this happens frequently, you might need to get your code and architecture reviewed from someone who understands these aspects better than you. Sometimes you don’t need a senior, but only a pair of fresh eyes to find peculiar issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Glamorizing overworking&lt;/strong&gt; - Overworking might reflect a hardworking person for once but is not good in the long term. It sets wrong expectations, wrong culture, and makes you less ready for anything else. This is a cultural issue if many people in a team do this (or pretend to do this), but if this is an issue with you then please stop it right away. Find a hobby to pursue in your free time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wrong Estimations&lt;/strong&gt; - It’s ok to under-estimate as a junior developer, but if you are an SSE (or above) and are still doing this mistake, you’ll end up overworking along with your team (if you manage one). In fact, this becomes a bigger problem if you are leading a team beacuse this culture (of overworking) propagates to your team and some people might feel frustrated. Do learn this skill.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unrealistic deadlines&lt;/strong&gt; - There are days when we get a feature requirement that will give us an edge over our competitors and everyone just gets excited to launch this &lt;strong&gt;ASAP&lt;/strong&gt;. Projects that start with this mindset often fail to meet deadlines. They can even take 2x-3x time to deliver. Motivation just pushes people a little bit, it doesn’t always help us make good products.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ever changing requirements (Thank you Product Managers!)&lt;/strong&gt; - This is something that happens very frequently in startups. We start building something with 15days timeline in mind, and deliver something else in 45 days (believe me, those numbers are real!). Product teams are expected to brainstorm all the possible cases before starting actual development. But there are some projects (&lt;em&gt;urgent projects&lt;/em&gt;) where brainstorming happens along with product development. This causes everyone to continuously adapt to ever changing requirements and change their architecture accordingly. Sadly, some projects get so many changes that they even fail to deliver.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Few of the above mentioned points are personal issues, while some of them are team issues. To work efficiently, you need to discover all these yellow flags and discuss with your team. The idea of this post is not to motivate you to avoid work outside working hours, but to ensure that those eight hours are enough to do everything you planned.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="culture" /><category term="productivity" /><category term="overworking" /><summary type="html">The key to working fewer hours is not to simply do less, but to do what truly matters most. - Unknown</summary></entry><entry><title type="html">Develop faster, better</title><link href="https://gagan93.me/blog/2023/05/19/develop-faster-better.html" rel="alternate" type="text/html" title="Develop faster, better" /><published>2023-05-19T00:00:00+05:30</published><updated>2023-05-19T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/19/develop-faster-better</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/19/develop-faster-better.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-19-develop-faster-better-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-milan-csizmadia-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@milancsizmadia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Milan Csizmadia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/pYmH0eTpr70?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Over the years, has your development speed improved? Ofcourse, it would be much better than what it was when you started your first job. But have you significantly improved each year? If you didn’t, or if you’re unsure, then read along.&lt;/p&gt;

&lt;p&gt;I remember my training days, where I was given a Dell laptop with Ubuntu 14 installed on it. While I had done a lot of projects during my college days, I couldn’t be friends with Unix. I had only used Windows XP during school days and upgraded to Windows 7, Windows 8 and then Windows 10 as they were released. I liked good UI, themes, wallpapers, and DOS terminal looked like a punishment in front of good UI. I had heard “terminal is powerful”, and I realized it only when I started using the Unix terminal. Starting my professional career with Ruby, where many people prefer lightweight editors like Sublime Text, a good amount of my time was spent on terminal. While all this learning was overwhelming, I became very comfortable in the next few months.&lt;/p&gt;

&lt;p&gt;Over the past many years, this is how I feel I have improved my development speed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Log files&lt;/strong&gt; - No development happens without challenges and dead-ends. I’ve seen many developers who don’t investigate much on their own, and straight away ask their seniors or start searching about an issue on the web, both of which make sense but not before checking the logs. It could be your framework logs, database logs, or some logs that come up after enabling debug/verbose mode in an application. Believe me, you can’t be a good developer if you are not in habit of checking the logs. If you can debug what’s wrong without going here and there, you’ll save time in the long run (and possibly master &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail&lt;/code&gt; command options).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Know your tools&lt;/strong&gt; - Let’s say you get into a situation where a job should have run at night but it didn’t. You know the issue because some data didn’t get populated by this but you don’t know where to start from. Most of the companies these days use a lot of SaaS solutions to ease this debugging. We now have logging platforms, infrastructure monitoring platforms, APM platforms, and much more. And if we don’t use these tools to debug these issues, then what is the point of paying them? Spare time to explore all these tools. They help you much beyond this simple example (Eg. APM helps to figure out performance bottlenecks, debug downtimes, deprecate old endpoints, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Avoid using a mouse/trackpad&lt;/strong&gt; - In other words, use keyboard shortcuts as much as possible. You don’t have to remember tonnes of shortcuts per tool - good tools have standard shortcuts. For example, all text editors would have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; for windows) for opening a new file, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + Option key + Left or Right arrow key&lt;/code&gt; to move across tabs (including browsers), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD+&amp;lt;N&amp;gt;&lt;/code&gt; to go to Nth open window, and so on. After years of practice, this saved a lot of time for me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Master the terminal&lt;/strong&gt; - If you do this, you can do certain tasks very quickly. I’ve seen developers working at a good speed when they’re on their machines. But if they need to SSH to a server to check something, they become very slow. Although mastering terminal in itself is a very vast topic, because there are many things you can learn, but one of the most useful trick is &lt;em&gt;Reverse Search&lt;/em&gt;. I type not more than 3-4 characters to execute the command I need.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup aliases&lt;/strong&gt; - Although it is possible to setup aliases for a lot of things, I’d recommend setting this up at least for git operations. I use the following git aliases on my personal machine.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[alias]
  co = checkout
  br = branch
  st = status
  ci = commit
  po = push
  fo = fetch origin
  pu = pull origin
  df = diff
  dfs = diff --staged
[push]
  default = current
[pull]
  default = current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;so to do a checkout, I do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git co &amp;lt;branch&amp;gt;&lt;/code&gt;. And to push my branch to remote, I just write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git po&lt;/code&gt;. Also, I use reverse search than typing even this much 😛.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find alternatives continuously&lt;/strong&gt; - Whenever you’re doing something repeatedly, there are high chances that many people are doing the same thing and there might be some way to do it fast. For example, engineers spend a good time using browsers and there are a lot of browser extensions that can help you do things fast. I remember some time ago I was struggling to take screenshots of pages that were slightly larger than my window (so I zoomed out to take screenshot 😋). Later I found an extension (GoFullPage) that scrolls your page from top to bottom and creates a screenshot that can be exported to Image/PDF. Similarly, there are times when you need to copy paste some tabular data but there is no export option, so an extension (Table Capture) allows you to right click on that table and copy paste that to a google sheet. This worked for about 90% of use-cases. Another good extension (Authenticator) allows to keep all the 2 step verification codes (those 30-60s expiring  OTPs) in the browser itself, so that you don’t need a phone everytime.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There could be 10 more things I can add to this list, but I want to keep this short. For example, there’s no mention of how you can use GPT tools because there are many posts on that already. I hope this gives you some idea and rest you can think on your own. The way to work fast is to first realize that you are slow, and then think what can be optimized. If you have this thought process, you can continuously improve your speed.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="optimization" /><category term="development" /><category term="productivity" /><summary type="html">Over the years, has your speed of development improved?. Ofcourse, it would be much better than what it was when you were straight outside college. But have you significantly improved each year?</summary></entry><entry><title type="html">Small testing loops</title><link href="https://gagan93.me/blog/2023/05/01/small-testing-loops.html" rel="alternate" type="text/html" title="Small testing loops" /><published>2023-05-01T00:00:00+05:30</published><updated>2023-05-01T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/01/small-testing-loops</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/01/small-testing-loops.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-01-small-testing-loops-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-nubelson-fernandes-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/it/@nublson?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Nubelson Fernandes&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/CO6r5hbt1jg?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you are a software developer, you must have spent a considerable part of your time debugging the code you, or someone else wrote. At times, it is quite frustrating to debug code due to its current state, and you find the need to &lt;a href=&quot;https://refactoring.com/&quot;&gt;refactor it&lt;/a&gt;. But in a hurry to finish the task on time, we start solving the problem directly and testing it out, often wasting a lot of time that could be easily saved. Had we spent some time on understanding the moving parts, our “testing loops” could have been shorter.&lt;/p&gt;

&lt;p&gt;At the time of writing this, I found out that “testing loop” is not a defined terminology in software engineering, so this is what I mean by it&lt;/p&gt;
&lt;blockquote style=&quot;letter-spacing: 0.1px&quot;&gt;
  &lt;p&gt;“The process of changing a piece of code, and testing it out by some means” forms a loop. Smaller the loop, the faster we change and test our code, and our frustration is minimum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s assume you’re a web developer who is doing a code change in a service class that is called by a REST API to serve the response. Now in order to test this change, you can:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update an automated test that was testing this API and can check the response.&lt;/li&gt;
  &lt;li&gt;Use cURL/Postman to test your code and ensure that the response is updated.&lt;/li&gt;
  &lt;li&gt;Test a small piece of change inside a &lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL shell&lt;/a&gt;, if your language/framework provides that, and verify that the class method is returning the change as expected. Some examples of such shells as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt; for a rails app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; for a django app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jshell&lt;/code&gt; for a java app, or a browser developer console  for Javascript apps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, step 1 and 2 can be very slow if you have a medium/large application because your web server/test suite will take time to boot, whereas step 3 will be very fast. Being a rails developer, I always test such changes inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt;. This might seem like a very small optimization but there are times when you end up testing the change multiple times. If something takes time (eg. a web server reloading after change), we might also switch to other tasks (or distractions) in the interim.&lt;/p&gt;

&lt;p&gt;This is just one example of improving our productivity as a developer (frustration and productivity are inversely proportional). I’d recommend you to spend more time in finding shorter ways of testing things out than wasting time in longer testing loops. That would help you for years. Although I strongly believe that developers are solely responsible for their code (no reviewers, no QAs) and by no means I’m saying that we should abandon testing code via test cases and postman. But yes, while you’re in the middle of debugging, use shorter ways and in the end test out things by normal means.&lt;/p&gt;

&lt;p&gt;The motive of this post is not to promote use of REPL shells, but I’ve used them for about 8 years now and they are great tools to learn the language fast, and also to debug things. If your language supports this and you never used it, you must try this once. Try this out next time you get into debugging something time consuming and let me know if this helped.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="debugging" /><category term="optimization" /><summary type="html">If you are a software developer, you must have spent a considerable part of your time debugging the code you, or someone else wrote. At times, it is quite frustrating to debug code due to...</summary></entry></feed>