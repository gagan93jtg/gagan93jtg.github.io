<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2023-12-30T19:11:14+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh — Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">Multi-tasking is not so cool</title><link href="https://gagan93.me/blog/2023/12/30/multitasking-is-not-so-cool.html" rel="alternate" type="text/html" title="Multi-tasking is not so cool" /><published>2023-12-30T00:00:00+05:30</published><updated>2023-12-30T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/12/30/multitasking-is-not-so-cool</id><content type="html" xml:base="https://gagan93.me/blog/2023/12/30/multitasking-is-not-so-cool.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-12-30-multitasking.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-from-clockwise&quot;&gt;Photo from &lt;a href=&quot;https://www.getclockwise.com/blog/multitasking-impacts-productivity&quot;&gt;Clockwise&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Multitasking refers to working on more than one task at a time. Although, as per research, it is not possible for humans to truly multitask like computers, we often hear this term at work. Among engineers, it comes up when there’s more than one task assigned to them for the day. Typically, they spend a few hours (or probably minutes) on one task, then switch to another task by pausing the first one. With senior developers/managers, the degree (and expectation) of multitasking increases. If you have grown in a startup environment, you’ve likely done a lot of multitasking already (even beyond your job role).&lt;/p&gt;

&lt;p&gt;Upon joining LocoNav, one of the concerns I raised with my seniors was my struggle to dedicate ample time to a single task, as I found myself constantly juggling multiple responsibilities. There was a time when I was assigned 4 tasks (mostly coding), and all of those were “on priority” for the respective stakeholders. I remember writing long emails back in 2018/19 regarding “context switching and productivity.” I thought it’s a planning problem (somewhat it was), but it was more to do with how fast-moving startups generally operate, and my mind took some time to get habitual.&lt;/p&gt;

&lt;p&gt;Over time, I’ve had the opportunity to work in both multitasking and focused work environments. Additionally, I serve as an individual contributor or manager as needed. Given all this experience, I’ve developed some opinions around multitasking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re given a second task when you’re already in the middle of something, make sure to leave the first task in a state that it is efficient to continue again. For example, if you’re in the middle of an investigation and it takes 1h to complete that, ask the team, “Can the second task wait for an hour?” If yes, close your investigation, log that in a comment, and then switch. Don’t just abruptly switch. Sometimes, the second task takes so long that your manager would want someone else to continue on the first time. This is efficiently possible only if they can continue from where you left (without you explaining everything on a call).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re almost done in your current task or need 1-2h to complete, discuss and close this task first. Unless the second task is a P0 production bug, it should be possible to push back.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multitasking productively is hard. Even with a lot of experience, we shouldn’t expect that everyone can efficiently multitask. There are people who prefer to close one task and then pick the other one. Managers need to understand this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can’t avoid multitasking. Even if your sprints are planned nicely, there are chances that you’ll be assigned a production bug or some other escalation. So if you’re in a team that faces such issues, don’t think that an ideal world exists. This happens almost everywhere :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You could feel burn out in the long run if you’re multitasking regularly. This is so because your mind overworked and couldn’t rest. After work, you might not have the mental energy for anything else. I’ve experienced this personally.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Regular multitasking might put you in a situation where you don’t actually complete anything at the end of the day. All the tasks move a little bit, but nothing real gets delivered. None of the stakeholders are happy in this situation. Rather, we could have prioritised/completed 3 tasks out of 10 (for example).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t just accept tasks because they’re coming to you. If you’re working with multiple teams (shared resources), you might be assigned tasks from multiple managers where one manager might not know the complexity and priority of someone else’s tasks. Pushing back some tasks works sometimes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you have so many tasks on your plate and you think you’re just jumping from one to another, you should work on prioritizing them with your manager/team. As an example:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;If you are a developer who mostly codes, try not to switch in more than 2-3 tasks.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If you are a manager (mostly delegating tasks), you can probably switch between 3-5 tasks also (depending on the complexity of tasks).&lt;/p&gt;

        &lt;p&gt;The numbers shared above are just examples. Sometimes senior engineers are working on architecture designs that require dedicating more time on a stretch. So they prefer to go on “Do Not Disturb (DND) mode” and not pick any other task. It all depends on the specific task and team setup.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Every team wants to move fast - Developers want to be as productive as possible, and managers also need tasks to be delivered sooner. Unless your role grows from a developer who has faced productivity issues, as a manager, it takes time to understand that multitasking is not everyone’s cup of tea. As a developer, it is equally important to communicate and solve your productivity issues.&lt;/p&gt;

&lt;p&gt;If you’re someone who has faced these issues, please share your experiences. If you’re someone who is still facing this, let’s talk in the comments :)&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="multitasking" /><category term="planning" /><category term="opinion" /><summary type="html">Multitasking refers to working on more than one task at a time. Although, as per research, it is not possible for humans to truly multitask like computers, we often hear this term at work. Among engineers, it comes up when...</summary></entry><entry><title type="html">Debugging Production downtimes</title><link href="https://gagan93.me/blog/2023/10/29/debugging-production-downtimes.html" rel="alternate" type="text/html" title="Debugging Production downtimes" /><published>2023-10-29T00:00:00+05:30</published><updated>2023-10-29T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/10/29/debugging-production-downtimes</id><content type="html" xml:base="https://gagan93.me/blog/2023/10/29/debugging-production-downtimes.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-10-29-debugging-production-downtimes.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-daniel-tausis-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@greatmalinco?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Daniel Tausis&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/fireman-watering-fire-loeqHoa1uWY?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Downtime&lt;/em&gt; refers to a period when a system/service is partially or completely unavailable. Based on the criticality of service and the customers you’re serving, this can cause a loss of millions of dollars. I’ve been on the frontline for debugging and fixing such downtimes for many years. Although most of my experience covers startup tech and you might have a different setup, I still believe that the general way of solving things remains the same.&lt;/p&gt;

&lt;p&gt;Before going into details of how we can solve (or assist in solving) a downtime, let’s see a few reasons that cause downtimes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DOS/DDOS attacks&lt;/strong&gt; - An unexpectedly large number of requests can cause systems to become slow and eventually go down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Network glitches&lt;/strong&gt; - Changes done to security groups, route tables or other similar network layers can cause a system to be unavailable for use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Downtime due to deployment&lt;/strong&gt; - This happens when some heavily used system (or an API endpoint) gets slow due to some recent changes that introduced slowness. Because this is heavily used, this can occupy all the available bandwidth of the app server and take it down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cascading failures&lt;/strong&gt; - If there is a system on which your service highly depends, and that becomes too slow or goes down, then there are high chances that it will take your system down as well. We can debate on “missing timeouts” and “coupling” in this setup, but for now, let’s agree that this can cause downtime.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cross A/Z deployments/changes&lt;/strong&gt; - Sometimes, we mistakenly introduce latency by choosing a different availability zone for some latency-critical systems. The impact of such changes is noticed only when the usage scales.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;When you see an application outage, two things to do are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fix it asap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retrospect and improve.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s look into these one by one&lt;/p&gt;

&lt;h2 id=&quot;understanding-and-fixing-the-issue&quot;&gt;Understanding and fixing the issue&lt;/h2&gt;

&lt;p&gt;If you don’t have a very good monitoring setup, you’ll get a text like this from your friend in the product or business team:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey, the customer reported 503 error on the website, can you check?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Congratulations 🥳. Your journey starts now. Let’s try to navigate it together.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Check alerts&lt;/strong&gt; 🔴 - If you have some red signs already through email, chat or some other medium, you might get some idea of what’s wrong. I remember in my previous project we had a cluster of Redis servers (one master, multiple replicas) and There was an alert configured for replication lag of more than 10 seconds. Whenever someone ran a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEYS *something*&lt;/code&gt; command on it, we use to get plenty of alerts instantaneously. (You might be blaming the developer for not knowing that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEYS&lt;/code&gt; command is &lt;a href=&quot;https://redis.io/commands/keys/&quot;&gt;blocking and runs in O(n)&lt;/a&gt;, but the issue was that usage of that redis was not documented at all and most of us maintaining the project were junior engineers).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Get the right people&lt;/strong&gt; 🧑‍🤝‍🧑 - So there are two outcomes of step 1:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;You know what’s wrong and which team owns this - Get those people on call.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Or you’re not sure what is down, or if the app is a monolith - There should be some people in the team who generally debug such things. Like old engineers of the team (god bless you if you’re the one). Get them on the call.&lt;/p&gt;

        &lt;p&gt;You might want to add some experts like DevOps (if you have a dedicated team), or database experts (if the database looks like a bottleneck) from your team. Although I agree that it might be hard to get people on call at odd hours.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Someone has to lead&lt;/strong&gt; 🤵 - Probably you were the first person to notice the downtime, and someone else knows the system better than you. Let them lead if that’s the case. Although fixing this situation would need collaboration from everyone, there has to be a person who’s doing primary debugging, sharing their screen, and delegating some tasks to someone else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Know your tools&lt;/strong&gt; 🛠️ - I’ve debugged downtimes in those situations also where we had very minimal tooling setup, but it’s good if you have at least:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;A centralized logging solution (eliminates the time required to SSH to all servers to check logs).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;An APM tool with distributed tracing (reduces the time to understand the root cause in many cases).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Basic Pod/VM monitoring (helps to understand if RAM/CPU/Network/IO is the bottleneck).&lt;/p&gt;

        &lt;p&gt;Having these tools is important, but knowing how to use them is even more important. If you’re not familiar with your tools, please learn them. Downtime is not a good time to learn about them. If you don’t have such tools, you should be hands-on with some unix commands. For eg. I’d use a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awk&lt;/code&gt; commands to debug access logs if I don’t have a logging solution available. Similarly, there are commands to see running processes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps aux&lt;/code&gt;), free memory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free -h&lt;/code&gt;) and disk usage (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df -h&lt;/code&gt; ) but these won’t show you historical data which is useful for debugging.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Thinking from First Principles&lt;/strong&gt; 🤔 - Although I talk about some common issues later, anything beyond these four points would be different for different projects/architectures. Here, we need to start thinking from the very basic things we know. The following statements should help to build some understanding:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;If the database is causing issues being a bottleneck, one/more of these might be true:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;Is there some cron job or custom script running that can cause this?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Has some table table recently exploded in size that was being used&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Are we creating an index that might have locked the entire table?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Is this (locked) table heavily used?&lt;/p&gt;

            &lt;p&gt;To answer any such question, we’d want to see the running queries. I’ve &lt;a href=&quot;https://gist.github.com/rgreenjr/3637525&quot;&gt;bookmarked this&lt;/a&gt; years ago to debug running queries on Postgres.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If some specific endpoint is running slow:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;Is there a specific query that is running slow here?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Can we quickly see what we need to fix? (Maybe add an index).&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Is there any downstream service that is slow/down, causing the slowness? Can we &lt;a href=&quot;https://microservices.io/patterns/reliability/circuit-breaker.html&quot;&gt;short-circuit&lt;/a&gt; the broken downstream for a while?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;If the reasons are complex, can we isolate the endpoint to some specific servers/pods only? This should be configurable at the Ingress/API gateway or Load balancer based on your setup.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If a recent deployment caused slowness:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;Can we revert to the last stable release? (your releases should be backwards compatible to do this)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If a recent infra change caused this:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;If you’re using &lt;a href=&quot;https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac&quot;&gt;IaC&lt;/a&gt;, can we revert to the last stable setup? Infra changes can cause network disruptions (eg. modifying a security group rule) and reverting the same should generally help.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If the app servers are slow due to some surge of requests:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;Can we restart the app server processes to clear the queue? (this might lead to a loss of requests unless done gracefully)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Should we set up some rate limiting here?&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;The above list can go long according to your architecture and common issues faced but we’ll stop here. The idea is that once you scope the problem to a specific section, assume minimal correctness in the system and validate everything one by one.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Debugging downtimes is a hard problem, but solving one gives much more satisfaction than any feature release 😁 (at least to me). The learning that we get only by being present in such discussions/calls is very different (and deep) as compared to regular work. As a junior engineer, you get to see how your production is set up and what are the moving parts. If you’re a senior engineer, you see how your service interacts (and depends) on other components of the system. System outages frequently highlight areas that are vulnerable and require improvement. There are even more complicated reasons (like automation) that can cause hours of downtime (like &lt;a href=&quot;https://www.youtube.com/watch?v=dsHyUgGMht0&amp;amp;t=646s&quot;&gt;Github’s 2018 outage&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I’m sure you must also have your two cents to add here. Please share your experiences in comments.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="production" /><category term="outage" /><category term="debugging" /><summary type="html">Downtime refers to a period when a system/service is partially or completely unavailable. Based on the criticality of service and the customers you're serving, this can cause a loss of millions of dollars. I've been on the...</summary></entry><entry><title type="html">Efficient Remote Teams</title><link href="https://gagan93.me/blog/2023/10/04/efficient-remote-teams.html" rel="alternate" type="text/html" title="Efficient Remote Teams" /><published>2023-10-04T00:00:00+05:30</published><updated>2023-10-04T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/10/04/efficient-remote-teams</id><content type="html" xml:base="https://gagan93.me/blog/2023/10/04/efficient-remote-teams.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-10-04-efficient-remote-teams.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-chris-montgomery-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@cwmonty?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Chris Montgomery&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/smgTvepind4?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Just a week before the nationwide lockdown announcement in March 2020, our engineering team decided to try remote setup for one week. At that time (like many other companies), we had work from home policy for employees but only with approval. We were not sure how this idea would work out for the entire team, and everyone thought ‘&lt;em&gt;this is just temporary&lt;/em&gt;.’&lt;/p&gt;

&lt;p&gt;Fast forward to today - we are a hybrid engineering team, where more than 50% of people prefer to work from home. I prefer working from home, but I go to the office once or twice a month (if needed). Like everyone, it took us some time to create a productive remote culture. Although we might not be perfect at running remote teams, I’d like to share a few things that help run remote teams efficiently. I’d like to share two perspectives here:&lt;/p&gt;

&lt;h2 id=&quot;for-managers&quot;&gt;For managers&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Define the working hours&lt;/strong&gt; - When everyone is WFO (working from office), it’s easy to go to someone’s desk to get something done. With the flexibility of remote culture, it’s easy to lose productivity and miss deadlines because of collaboration issues. It’s good if fixed working hours work for your team, but people generally expect flexibility when it comes to remote culture. Despite the flexibility, ensure 4-5 hours overlap among everyone so that discussions can happen seamlessly. In the rest of the hours, people can continue with their deep work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Trust your team&lt;/strong&gt; - When remote culture started, many of my friends working in other organisations told me that their workload had increased. They had to work overtime to please their managers. In extreme cases, &lt;a href=&quot;https://www.wionews.com/world/us-based-company-fired-employee-after-he-refused-to-keep-webcam-on-during-wfh-report-524353&quot;&gt;organisations tracked&lt;/a&gt; their employees during the entire 8-9 hours of the day. On the other hand, there were discussions on the internet where people were raising voices against companies that asked employees to &lt;a href=&quot;https://edition.cnn.com/2021/09/24/tech/webcams-workplace-meetings/index.html&quot;&gt;turn on cameras during virtual meetings&lt;/a&gt;. In a nutshell, this is a trust issue. Being a manager is not easy but all these are signs of an unhealthy culture. Such organisations often experience high attrition rates. Managers should know the pace of their team members and should trust them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Team meetups&lt;/strong&gt; - People can feel disconnected while working from home. Try to set up at least one or two meetups in a year so that people know each other. This becomes more important if the team is new and members have not met each other even once. Having in-person meetups &lt;a href=&quot;https://about.gitlab.com/company/culture/all-remote/in-person/#the-importance-of-social-interaction&quot;&gt;helps bond better&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;for-everyone-including-managers&quot;&gt;For everyone (including managers)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Working hours&lt;/strong&gt; - When it comes to working hours, be predictable rather than always available. In flexible environments, some people start work very early (like 8-9 AM) while others start late (eg. 11-12 PM). You cannot remain available from 8 AM-10 PM. So it’s better to have (almost) fixed working hours so that everyone knows when you’re available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Respect people’s working hours&lt;/strong&gt; - This is very important. For example, I start working at 8 - 8:30 a.m. and usually log out around 5 - 6 p.m. My team knows and respects the fact that I’ll not be available for a meeting at 7 or 8 p.m., while it might be normal for someone else to be working at that time because they started around noon. This makes perfect sense because I do not schedule meetings with these people at 8:30 a.m. (for the same reason). So respect everyone’s hours and make sure you don’t trouble them outside their working hours unless necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt; - When you’re working from the office, people can come to you to discuss a task or to catch up generally. But at home, you’re physically disconnected from everyone. To make sure that team members know about the status of things, it’s important to update everyone about your work. Be responsive to emails, chats, JIRA comments, or wherever you’re expected to. You can also consider creating temporary channels to track the progress of specific projects and keep everyone informed. For example, to make sure that relevant stakeholders are aware of the project’s progress, we create a temporary slack channel (that typically runs for 1 - 2 months) to keep everyone on the same page. Once the project is delivered, we archive the channel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Planning discussions&lt;/strong&gt; - All discussions longer than 5-10 minutes should be scheduled on the calendar in a mutual free slot. And because you’d want people to respect your time, respect their time as well - &lt;strong&gt;always join meetings on time&lt;/strong&gt;. In case you are unable to join on time, communicate the same. Missing communication here can sound irresponsible and unprofessional.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Async communication and Productivity&lt;/strong&gt; - Your team can be much more productive if they know how to work async. For example, if I have two tasks at hand - one requires someone’s input and the second requires deep work, I should leave a message to the concerned person for the first task and I’d continue on the second task. Probably within the next few hours, I’ll get a response and I can continue on the first task when I want. &lt;strong&gt;Essentially&lt;/strong&gt;, &lt;strong&gt;we need to stop assuming that all our queries will be answered synchronously.&lt;/strong&gt; Once that expectation is set, you can respect the availability of others and still ensure your productivity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No hello policy&lt;/strong&gt; - Someone already created a small website to explain this in detail, so I’ll just &lt;a href=&quot;https://nohello.net/en/&quot;&gt;direct you there&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Set availability status when away&lt;/strong&gt; - Whenever you’re unavailable for a few hours, or on vacation, please keep everyone informed. I hope your team uses communication tools like Slack, Teams or similar. All of them have a feature called “Status” where you can set yourself unavailable with a custom message. This small change ensures that people will know your status when they’re texting you. Similarly, setting up a &lt;a href=&quot;https://support.google.com/mail/answer/25922?hl=en&amp;amp;co=GENIE.Platform%3DDesktop&quot;&gt;vacation responder&lt;/a&gt; on your email should also help other teams who communicate with you via email.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remote work is a valuable blessing that often goes unrecognized. People save a lot of time (primarily travel time) that can be used for doing other things. I’ve been working remote for more than three and a half years now, and I don’t feel like going back to work from office. I’m able to take better care of my health and also able to spend more time with my family. However, it is important to stay flexible to be able to work from office in future, as no work setup is permanent or the best.&lt;/p&gt;

&lt;p&gt;I might have missed many points. Feel free to add them in comments. Thanks for reading this. Take care.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="efficiency" /><category term="culture" /><category term="workstyle" /><summary type="html">Just a week before the nationwide lockdown announcement in March 2020, our engineering team decided to try remote setup for one week. At that time (like many other companies), we had work from home policy for employees but...</summary></entry><entry><title type="html">Cost of time</title><link href="https://gagan93.me/blog/2023/09/18/cost-of-time.html" rel="alternate" type="text/html" title="Cost of time" /><published>2023-09-18T00:00:00+05:30</published><updated>2023-09-18T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/09/18/cost-of-time</id><content type="html" xml:base="https://gagan93.me/blog/2023/09/18/cost-of-time.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-09-18-cost-of-time.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-aron-visuals-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@aronvisuals?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Aron Visuals&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/BXOXnQ26B7o?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Time is precious. Even billionaires can not get back in time. Not even by a second. That’s why all of us like to enjoy life by spending time and money on things we like. And that’s good. Different people get peace by doing different things - singing, dancing, travelling, painting, reading and so on.&lt;/p&gt;

&lt;p&gt;As I joined my first job after college, I found myself quite occupied. My weekdays involved 1.5-2 hours of travelling, apart from 8 (+1) working hours. Since then, life has been even busier. Earlier I thought - life would be hard to manage and I might not have time for a lot of things (or I’ll miss out on a lot of things). Today, I have this perspective:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your life will have a lot of tasks and everything will have a priority. If something is important (and has priority) for you, you’ll find time for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The March 2020 (Covid) lockdown gave a fresh perspective to work and the workplace. Although there were already many companies that had a fully remote workforce, but rest of the world also (forcefully) shifted to a remote culture. Seeing the Delhi-Gurgaon traffic today (on the popular NH-8 highway), I’m sure 90-95% of the companies have reverted to work from office. Like most people, I was quite demotivated at the start of the lockdown because of fear and uncertainties ahead. I didn’t manage my day much apart from work and little exercise. With time I realised how much time I’m saving as compared to 2019 and I could utilise it in doing something useful.&lt;/p&gt;

&lt;p&gt;People read about &lt;strong&gt;finance&lt;/strong&gt; to invest wisely, and there’s a very popular term here called &lt;em&gt;compounding&lt;/em&gt;. In very simple words,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Financial Compounding is defined as the re-investment of interest along with principal to achieve exponential growth over a long period. It is also called as “making money out of money”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you think carefully, you’ll realise that compounding doesn’t happen only in finance. Knowledge compounding also happens. You might have seen this image somewhere:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2023-09-18-exponential-growth.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin: 20px auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you might have guessed already, 365 here represents no. of days in a year. It simply means, that if your current skill set is at level 1, then tomorrow you can either be a 0.01 better version of it or worse (or same, maybe). Being a little better (or worse) every day has a non-linear impact in the long run (hence the exponential calculation). Coming back to compounding - it can be applied to all the good and bad things in your life. Sparing 15 minutes daily to learn a new skill can make you better at it in a few months. And if you’re able to spare an hour - you’ll surely master it :)&lt;/p&gt;

&lt;p&gt;Still, the point is - who has the time for it? Is this even a priority? Whenever you find this challenge in your life, spend time looking back on your last 30 days’ schedule. Are you really not able to find the time for something new?&lt;/p&gt;

&lt;hr style=&quot;margin-bottom: 20px&quot; /&gt;

&lt;h2 id=&quot;technology-addiction&quot;&gt;Technology addiction&lt;/h2&gt;

&lt;p&gt;If I ask you - How much time you’re spending on your phone, I bet you’ll give an underestimate. Most of us, including our parents, are spending more than 2 hours on our phones daily. For some people, this number is even larger. If you are not sure how much time you spend, install a tracker &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.a0soft.gphone.uninstaller&amp;amp;hl=en&amp;amp;gl=US&quot;&gt;like this&lt;/a&gt; to see. And it’s not a surprise that most of this time is binge-watching web series or exploring the lives of other people (friends &amp;amp; “influencers”) on social media apps. Sadly, multiple generations are reducing boredom from their life by spending their time on their smartphones these days, without realizing that it leads to &lt;a href=&quot;https://www.youtube.com/watch?v=LKPwKFigF8Uhttps://www.youtube.com/watch?v=LKPwKFigF8U&quot;&gt;loss of creativity&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@kbhushan19/the-impact-of-shorts-and-reels-on-attention-span-strategies-to-enhance-focus-81dcb9461a3#:~:text=Research%20suggests%20that%20our%20attention,seek%20immediate%20gratification%20and%20novelty.&quot;&gt;reduced attention spans&lt;/a&gt;. For the younger generation, it can even lead to &lt;a href=&quot;https://www.linkedin.com/pulse/decreasing-attention-spans-affects-learning-jennifer-oaten/&quot;&gt;trouble in critical thinking&lt;/a&gt; (I’m not counting people who have to work using their phone because I assume they using it to do their work and not to kill boredom). If we’re able to reduce this time, we might be able to invest it somewhere else.&lt;/p&gt;

&lt;p&gt;I’ve never been a smartphone addict, but I still work on reducing that time even further. A few months ago, I read a book called &lt;a href=&quot;https://www.amazon.in/AM-Club-Your-Morning-Elevate/dp/9387944891&quot;&gt;The 5AM club&lt;/a&gt; by Robin Sharma. The author talks about how a very small percentage of people achieve things that others just dream of. Such people prioritize their tasks and expose their minds to things that matter. Because they invest time in themselves, their knowledge compounds over months and years, and they see what others can’t.&lt;/p&gt;

&lt;p&gt;Time is uniquely expensive. The faster you realize this, the more you’ll invest in yourself and reduce all the social media distractions. Thanks for reading this.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="time" /><category term="behaviour" /><category term="psychology" /><summary type="html">Time is precious. Even billionaires can not get back in time. Not even by a second. That's why all of us like to enjoy life by spending time and money on things we like. And that's good. Different people get peace by doing different things - singing, dancing, travelling...</summary></entry><entry><title type="html">Testing an app</title><link href="https://gagan93.me/blog/2023/09/07/testing-an-app.html" rel="alternate" type="text/html" title="Testing an app" /><published>2023-09-07T00:00:00+05:30</published><updated>2023-09-07T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/09/07/testing-an-app</id><content type="html" xml:base="https://gagan93.me/blog/2023/09/07/testing-an-app.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-09-07-testing-an-app.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-scott-graham-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@homajob?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Scott Graham&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/5fNmWej4tAA?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;For many entry-level developers, the most exciting part of work is writing a shiny new feature, while rest of the things sound boring. Although writing code seems more than 90% of the work to them, but it is not true. Typically, engineers are involved in:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Requirement feasability&lt;/strong&gt; - Along with product, design, business team(s).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Estimation&lt;/strong&gt; - Giving ballpark/detailed estimates based on approximate/exact requirements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design&lt;/strong&gt; - Building the technical design (LLD/HLD), finding out cross team dependencies, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt; - The implementation (&lt;em&gt;most exciting one&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dev testing&lt;/strong&gt; - Devs should test their solution using manual and automated tests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;QA Testing&lt;/strong&gt; - QA team should also test the application using tools like Postman and also end to end testing on frontend (if available).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - Making or updating technical documentation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt; - Supporting other engineers for integration, attending scrum calls, updating everyone on status of things and blockers (if any).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Post release support&lt;/strong&gt; - Error monitoring, performance monitoring, support for bug-fixing, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seeing the above can seem overwhelming, but this is what happens in real world projects. Also, it can now be said that implementation is probably not even half of the total time or effort. You might be thinking - &lt;strong&gt;what’s here to talk specifically about test-cases?&lt;/strong&gt; Testing is one of the most under-rated bit of SDLC. Although it is very obvious to test your product before delivering to the end user, and testing happens everywhere, but the emphasis of this post is on importance of testing in the overall framework.&lt;/p&gt;

&lt;p&gt;Just to explain - &lt;em&gt;testing is not when your developers give the product to your QA team and they start testing&lt;/em&gt;. Testing should be hooked in your framework at various levels:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When a story is being discussed between product and tech team(s), the QA team should also be part of discussion and they should understand the product to write test scenarios.&lt;/li&gt;
  &lt;li&gt;Everyone should go through the test cases to make sure nothing is missed.&lt;/li&gt;
  &lt;li&gt;Product team should make sure that product and design have handled all the cases in the product as mentioned by the QA team.&lt;/li&gt;
  &lt;li&gt;Developers should make sure that their design covers all of these scenarios.&lt;/li&gt;
  &lt;li&gt;Once development is complete, developers should manually test their code through some interface to make sure all these cases are covered. Later, they should add automated test cases for all the cases.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From my experience, the above is a rock solid way to ensure that:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Everyone is on same page in understanding the product and possible scenarios.&lt;/li&gt;
  &lt;li&gt;Feedback from everyone is incorporated as early as possible.&lt;/li&gt;
  &lt;li&gt;Testers start documenting the test cases even before developers write code, avoiding the need of design change in the later phase(s).&lt;/li&gt;
  &lt;li&gt;Cost of change is minimum and delivery is fast (due to 2 and 3).&lt;/li&gt;
  &lt;li&gt;It is easy to see which layer missed the test case(s) and caused a specific bug, which otherwise can become a blame-game within the team.&lt;/li&gt;
  &lt;li&gt;Above all, team motivation is maintained.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr style=&quot;margin-bottom: 10px;&quot; /&gt;
&lt;p&gt;Although above section talks about the impact of good testing framework for the entire lifecycle, I’d also like to talk about how a good test suite helps developer teams:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Language and Framework version upgrades&lt;/strong&gt; - I’ve got to work on Ruby and Rails upgrades multiple times in my career. One of the primary requirements for such upgrades is to have a &lt;strong&gt;good test coverage&lt;/strong&gt;. If you don’t have one, you’ll need to get your app deeply tested. Although you’ll do that otherwise also, but having a good test suite adds to the confidence and helps to show a lot of issues early.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Database version upgrades&lt;/strong&gt; - Same thing applies here also. Although for upgrading database versions, people generally dump a production snapshot to a new instance (to see if data and extensions are compatible with the next version), but a test suite would add to the confidence here also.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Feature enhancements&lt;/strong&gt; - Often the first version of the application is released as a small product to gather customer feedback. While building the second version, there can be both incremental changes and some changes in the existing product. At this point, we need to ensure that existing functionality doesn’t break, and automated test cases help to ensure the same.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; - Refactoring is inevitable part of maintenance phase. You’ll find need to refactor a lot of things that might be written in an inefficient manner due to deadlines or other reasons. Without test cases, refactoring can easily mess up the code and introduce bugs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enforcing Better low-level design&lt;/strong&gt; - It’s very common for developers to write long methods and classes, spanning hundreds and thousands of lines. Such classes contain model layer, service layer, external API calls, and many other things coupled together. When you write unit tests, you often mock some part of the code to test the other independently, but when it is hard to write tests of a specific class or method, there are high chances that your structure is not good. In order to write tests efficiently, you’ll often end up splitting the class (this realization comes by some practice). Follow the rule - &lt;em&gt;If it is hard to write tests, better refactor the code for which you’re writing tests.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Testing is a serious business. Think of any product you use - if you get a good user experience, there are high chances that it is an outcome of a good process and a lot of testing. Everyone wants their product to get loved by their users, but few are willing to invest substantial effort in the testing and in improving the overall delivery process. To build a better product, hook the testing in your overall development cycle, not just in the end.&lt;/p&gt;

&lt;p&gt;Take care and see you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="development" /><category term="process" /><category term="testing" /><summary type="html">For many entry-level developers, the most exciting part of work is writing a shiny new feature, while rest of the things sound boring. Although writing code seems more than 90% of the work to them, but it is not true.</summary></entry><entry><title type="html">Avoid Redundant Complexity</title><link href="https://gagan93.me/blog/2023/08/19/avoid-redundant-complexity.html" rel="alternate" type="text/html" title="Avoid Redundant Complexity" /><published>2023-08-19T00:00:00+05:30</published><updated>2023-08-19T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/08/19/avoid-redundant-complexity</id><content type="html" xml:base="https://gagan93.me/blog/2023/08/19/avoid-redundant-complexity.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-08-19-avoid-redundant-complexity.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-timo-volz-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@magict1911?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Timo Volz&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/9Psb5Q1TLD4?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During my college days, I came across a code in C++ that prints map of India. The code was obfuscated and hence very hard to understand. It took me days to understand what magic it was doing, but at that time I thought &lt;strong&gt;complexity is good&lt;/strong&gt; as it sparks curiousity in the mind of the reader, like it did for me. Little I knew that it’s just fancy stuff that no one writes in production.&lt;/p&gt;

&lt;p&gt;Fast forward to 2023: Having worked on multiple products and with multiple teams, I completely understand how much developers hate complexity (atleast mentally, if not otherwise). The art of system design is to fulfil the requirements without introducing a lot of moving parts. For example, if you are writing a fresh system that will not have 1 million users in the first month, don’t introduce a caching layer in your first version. Have some monitoring in place for everything possible and let the numbers speak if you need more specialized systems here.&lt;/p&gt;

&lt;p&gt;Although what I just wrote is very obvious for most of the developers, we still end up introducing un-needed moving parts sometimes (for fun / learning purpose). Developing a new system requires comparitively larger team than what we need when we’re just maintaining it. But that is true only if the system is &lt;em&gt;simple&lt;/em&gt; enough. If we have extra technologies put in place, then we’ll need people who:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Have working knowledge of those systems.&lt;/li&gt;
  &lt;li&gt;Can tune the systems on scale, if needed.&lt;/li&gt;
  &lt;li&gt;Handle version upgrades.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;p&gt;In 2021, we expanded our engineering team @ LocoNav and people joined us with different technical expertise in databases, languages, frameworks and cloud providers. We saw this complexity coming in our way very early, so we planned to reduce the decisions our team will take in future while building new systems, or refactoring existing ones. For example, for a relational use case, someone from enterprise background had experience using Oracle database, while some had experience with MySQL. Even I was using MySQL before joining LocoNav. But here we’re using Postgres for all our relational use cases. We have expertise in tuning this according to our needs and have seen some challenges in the past that made us somewhat expert in managing this. We also run self managed Postgres on EC2 machines where we need more flexibility, and even understand the challenges that come with self-hosted databases. Additionally, we use PGBouncer for connection pooling in one of our major apps. As developers, we know that almost 90% (or even more) use cases can be solved with equal complexity in all SQL databases. And if we have a good ORM adapter, there’s zero difference in the way our app interacts with the database. Given all the experience with have with Postgres, it doesn’t make a lot of sense to let individual teams choose their own SQL database. Staying on single SQL database helped us &lt;strong&gt;reduce complexity&lt;/strong&gt; as an engineering team, specially when we launched new LocoNav clusters for countries that have data residency laws.&lt;/p&gt;

&lt;p&gt;The same is true for many other things. If your team prefers ELK (for example) to keep application logs, and there’s some new technology out that sounds promising and cheap, don’t go for it unless you’ve done the POC for your use case and you’re planning to slowly shift everyone on the new stack. Teams often get excited to try new tech (which is not bad for learning purpose) and end up maintaining 3-4 stacks for the same use case.&lt;/p&gt;

&lt;p&gt;There’s another perspective in which we can reduce complexity - don’t introduce specific technologies unless you really need them. This helps to keep your technology stack easily maintainable in the long run. Sharing some (opinionated) conclusions from my experience:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Don’t introduce a caching layer unless your database needs it. Caching done in a bad way can create more bugs than benefits.&lt;/li&gt;
  &lt;li&gt;Don’t launch a NoSQL database to serve 1-2 non-relational use cases. Use JSON columns if that works for you. That eliminates maintenance of one new component. Only if you think you are introducing more complexity in the system by using JSON columns, or if you have more use cases now, shift to a NoSQL database.&lt;/li&gt;
  &lt;li&gt;Don’t use a NoSQL database just because you think you need “some flexibility”. Schema helps to enforce an expected design. Stick to it if possible.&lt;/li&gt;
  &lt;li&gt;Don’t introduce complex things like API gateways, CDNs in early stage of your app. That might be completely redundant.&lt;/li&gt;
  &lt;li&gt;Reduce the no. of programming languages in the engineering team unless you have a really large (&amp;gt;500 engineers) team. Stick to 2-3 max.&lt;/li&gt;
  &lt;li&gt;Try not to lock yourself with a single cloud provider. Try to architect your system with components that are available in all the clouds, or as system binaries. Docker/Kubernetes are good examples of platform independent components. Whereas, building a completely serverless system using Lambdas and other AWS components might lock you with AWS cloud provider.&lt;/li&gt;
  &lt;li&gt;Don’t follow what sounds cool on discussion forums. For example, few things that sound very cool are: &lt;strong&gt;microservices&lt;/strong&gt;, &lt;strong&gt;multi-cloud setup&lt;/strong&gt;, and &lt;strong&gt;moving from cloud to self hosted infrastructure&lt;/strong&gt;. Each of this requires very specific expertise, and should be chosen if the needs are very specific. Otherwise it’s just &lt;em&gt;adding to the complexity&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Complex systems are harder to explain to new developers. Redundant complexity is a huge tech debt and we should try to avoid it. And this applies to all walks of life, not just tech. For example, for many years I kept using a simple text file in Sublime text editor to note down pending tasks. I simply removed the task from the list once it was done. Although it did not give me a lot of features that a specialized tool would give, but it was dead simple to use. As my team grew, I was required to keep the track current and future tasks. So I moved to Notion. These days I use mix of both 😁.&lt;/p&gt;

&lt;p&gt;I hope I was able to explain what is complexity and why we should avoid it. Take care and see you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="complexity" /><category term="system" /><category term="engineering" /><summary type="html">During my college days, I came across a code in C++ that prints map of India. The code was obfuscated and hence very hard to understand. It took me days to understand what magic it is doing, but at that time I thought complexity is good....</summary></entry><entry><title type="html">Asking Good Questions</title><link href="https://gagan93.me/blog/2023/08/06/asking-good-questions.html" rel="alternate" type="text/html" title="Asking Good Questions" /><published>2023-08-06T00:00:00+05:30</published><updated>2023-08-06T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/08/06/asking-good-questions</id><content type="html" xml:base="https://gagan93.me/blog/2023/08/06/asking-good-questions.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-08-06-asking-good-questions.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-camylla-battani-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@camylla93&quot;&gt;Camylla Battani&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/AoqgGAqrLpU?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;On a daily basis, we communicate with a lot of people - family, friends, office colleagues and often with end customers. A lot of this communication is in the form of asking questions and getting answers. If I ask you - &lt;em&gt;How hard it is to ask questions?&lt;/em&gt; Different people might have different answers to this, depending on a few things like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How vocal they are generally?&lt;/li&gt;
  &lt;li&gt;How much they are comfortable to discuss the topic?&lt;/li&gt;
  &lt;li&gt;Is the problem statement clear?&lt;/li&gt;
  &lt;li&gt;Can they describe their problem in a way that the second party can understand?&lt;/li&gt;
  &lt;li&gt;Is there a language barrier, knowledge gap or missing context?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Generally speaking, many people &lt;strong&gt;do not&lt;/strong&gt; think a lot before asking questions. While it encourages them to openly ask questions, it also creates a challenge in understanding the problem for the second party. To solve the same, a lot of to and fro happens while communicating. This is still ok when the parties are communicating synchronously (eg. over a call or in-person meeting) because the parties can clarify their doubts there and then, but becomes worse when the same is happening over an asynchronous medium (eg. chat or email). A common example of such email as an engineering team is – communication with the end customers or other departments where people describe their problem in shortest possible way and assume they will get a solution. Without a process, such emails often run for weeks.&lt;/p&gt;

&lt;p&gt;There are multiple occasions when our sense of asking questions brings different outputs. People who have been using ChatGPT for any purpose will agree with me on this. Response from such generators depends not only on our questions but the context and detailing we provide. For those who have not got a chance to get their hands dirty yet, here are two questions I asked ChatGPT (one with minimal context, another with a detailed context) :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q: Give me a small paragraph  on topic:  optimizing page load&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: In the digital landscape, where milliseconds can make a difference, optimizing page load speed is a non-negotiable priority for any website. As a leading technology company, we understand the significance of delivering an exceptional user experience. One of the most effective ways to achieve this is by keeping images small and well-optimized. Compressing images without compromising quality significantly reduces load times, ensuring that users don’t have to wait for heavy media files to load. Additionally, minifying JavaScript and CSS files is crucial to eliminate unnecessary white spaces, comments, and code, resulting in faster processing by browsers…..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It generated 3 such paragraphs, about 1000 words in total. I added more context to the question in order to get a shorter response and also gave an idea on topics it should focus on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q: As an experienced blog writer on medium for a leading technology company, help me write a small paragraph, not exceeding 250 words. Topic is optimizing page load speed. And in the blog I talk about keeping images small, minifying js/css, keeping large javascripts to the end of page and using CDN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: Optimizing page load speed is paramount in today’s digital world. As a leading tech company, we prioritize delivering an exceptional user experience. To achieve this, we focus on keeping images small and optimized, compressing them without compromising quality. Minifying JavaScript and CSS files further reduces load times by eliminating unnecessary code. Additionally, placing large JavaScripts at the end of the page ensures critical content loads first. Leveraging a Content Delivery Network (CDN) for static content speedup enhances website performance by distributing resources across multiple servers worldwide, reducing server response time. By implementing these strategies, we guarantee a lightning-fast and seamless user journey, fostering higher engagement and satisfaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People have now understood the value of &lt;strong&gt;context&lt;/strong&gt;, atleast while using AI generators. Surprisingly, same is missing in some cases when we question humans. I often get emails and messages like &lt;em&gt;The feature X is broken, can you check?&lt;/em&gt; It is not that the reporter did not do their homework. They must have opened the website, clicked some button(s), filled a form (maybe?), seen an error, but they did not tell me all this. They should realize that either I’ll have to do all of this again, or ask them about the same, so better share these details. In my personal ToDo list, I deprioritize tasks that do not contain sufficient context. If you’re facing a problem, you should explain it in detail. Having details will help geting the solution sooner and would eliminate the need of asking &lt;strong&gt;obvious questions&lt;/strong&gt; – Is this breaking for a specific user? Does this break for all the cases or sometimes? Can you share me the error message, error code or a screenshot?&lt;/p&gt;

&lt;p&gt;Similar issue happens in some cases, when we’re communicating within engineering teams. When such issues reach the developers for debugging, they respond like: &lt;em&gt;I couldn’t find the issue despite spending 2 hours on it&lt;/em&gt;. While this is a good first response, this is what anyone would expect afterwards –&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Did you try reproducing the issue as mentioned, before looking into the code?&lt;/li&gt;
  &lt;li&gt;Did we get the exact problem statement in technical terms (i.e. what exactly is breaking)?&lt;/li&gt;
  &lt;li&gt;Could we figure out what specific class or method in the code deals with the broken part?&lt;/li&gt;
  &lt;li&gt;Does the code need restructuring in order to debug? If we need to restructure, do we have automated tests?&lt;/li&gt;
  &lt;li&gt;Are there recent changes in this code? Do we know after which release did this started breaking?&lt;/li&gt;
  &lt;li&gt;Do you need someone to pair with you in order to debug this? Or probably move this to someone else?&lt;/li&gt;
  &lt;li&gt;If you want someone else to check, have you recorded the investigation in the issue tracker as a comment?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of the above points might not be applicable to all issues, but this is what comes to my mind generally. Such questions help in building a clear understanding of the problem and proposing a fix that makes sense. You get half of the solution by understanding the problem clearly. When you’re seeking solution of your problem from someone else, make sure you can show what you have tried before reaching them out. Have answers to all the obviou questions. This is an underrated skill but optimizes much of the communication cycle.&lt;/p&gt;

&lt;p&gt;This post is just an introduction to asking good questions. There’s a very detailed, opinionated post (might sound little rude) on this topic already. &lt;a href=&quot;http://www.catb.org/~esr/faqs/smart-questions.html&quot;&gt;Click here&lt;/a&gt; to read the same. Take care and see you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="questions" /><category term="context" /><category term="efficiency" /><summary type="html">On a daily basis, we communicate with a lot of people - family, friends, office colleagues and often with end customers. A lot of this communication is in the form of asking questions and getting answers.</summary></entry><entry><title type="html">Efficient Fullstack Delivery</title><link href="https://gagan93.me/blog/2023/07/29/efficient-fullstack-delivery.html" rel="alternate" type="text/html" title="Efficient Fullstack Delivery" /><published>2023-07-29T00:00:00+05:30</published><updated>2023-07-29T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/29/efficient-fullstack-delivery</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/29/efficient-fullstack-delivery.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-29-efficient-fullstack-delivery.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-cherrydeck-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@cherrydeck&quot;&gt;Cherrydeck&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/rMILC1PIwM0&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Many organisations face the issue of missed deadlines. The reasons for this might be a one-off case or repeated scenarios. Today, I’ll share how we’ve optimized full-stack product delivery through years of learning.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Clarity of thought&lt;/strong&gt; - The leaders (product &amp;amp; engineering leads) involved in building a specific product should have a very clear thought on what we’re trying to build. If the product is in very initial phase, this can be somewhat hazy. It is not a problem to “not have a well thought product”. But don’t let the hazy-ness propagate to development teams, otherwise everyone will have their own interpretation of the idea. Engineers are programmed mentally to work on exact requirements. The sense of ambiguity doesn’t let them work efficiently, at least in initial years. To get the best output from them, give them clear requirements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Get everyone on the same page&lt;/strong&gt; - I don’t generally encourage meetings that involves many people, be it remote, or in person. Most of the things my team work on are communicated on JIRA tickets and clarified by chat, or short calls. But there’s a phase when you are starting on something new. The walkthrough of initial idea should be done over a call (or in-person meeting if working from office). This is the point when product and design have almost finalized the workflows, the engineering leads have given a go-ahead on feasibility of product and the story is ready. Set-up a meeting with the team, explain them the idea, take their inputs, do the required changes (if any), see if everyone has clarity and then &lt;strong&gt;freeze the story&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t exclude testers&lt;/strong&gt; - In point 2, the “team” doesn’t mean only backend and frontend engineers. QAs are often shared across multiple product teams, so we think we’ll share the story with them once development is complete. This is an unoptimized process. We had been doing this in the past and it just brings confusions. Some of the issues that happen are:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Corner cases in product flows are not figured out initially as QA was not present in initial meeting.&lt;/li&gt;
      &lt;li&gt;Some engineers might explain the product to QA team in their own way when it comes for testing. The interpretation can be very different. Even if product team explains the flow, it’s waste of effort as they already did it initially.&lt;/li&gt;
      &lt;li&gt;Fixing corner cases might mean change in flows, design and hence code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Walking on water and developing software from specifications are easy if both are frozen&lt;/strong&gt; - This is a very famous quote in software engineering. Change is inevitable in software projects, and this doesn’t mean that our software shouldn’t expect future changes, but the point is that current development cycle should have fixed set of requirements. Product teams should have enough discussions with the required stakeholders to make sure that they are aware of what is “actually needed”. Cost of change in a “software under development” is usually high - because product team updates the story, design teams update their designs, developers change their code (often ending up adding hacks because they already built the previous version), QA needs to test all impacted areas, and the overall deadline shifts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Estimations&lt;/strong&gt; - There are two things we’ll discuss: Dev estimates and overall estimates. Assuming the designs are ready, the expectation is that developers should start working on the product right away. But don’t miss the estimation part, specially when you’re working with a new team. My team was doing &lt;a href=&quot;https://projectmanagementacademy.net/resources/blog/a-three-point-estimating-technique-pert/&quot;&gt;PERT estimates&lt;/a&gt; in the past to do task breakdown and estimating individual tasks. Once we got enough idea on our speed, we now share a ball-park (rough) estimate mostly. IMO, all freshers should learn doing PERT estimates. Apart from just estimates, it also helps you to break your tasks into subtasks. Once dev estimates are complete, product team needs to take QA estimates as well, add some buffer (this comes by experience) and share overall estimates as a delivery date (&lt;strong&gt;Bonus point&lt;/strong&gt;: Don’t forget to consider everyone’s leave plans at the start of development).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Realistic Parallelism and team motivation&lt;/strong&gt; - &lt;a href=&quot;https://planningengineer.net/9-women-cannot-deliver-a-baby-in-one-month/&quot;&gt;9 women cannot deliver a baby in a month&lt;/a&gt;. This phrase is used in software engineering to explain that we shouldn’t expect “faster delivery” just because we have the option to put more people. If your team is new, or the organisation itself is a startup, I’d always recommend to start with less people (or you’ll just be solving their conflicts). People management is a task in itself when you’re managing a development team that has multiple sub-teams. I remember, back in 2018 when I was developing APIs for our new mobile app, I was the only one from backend team, 2 were from frontend, 1 QA and 1 Product guy. Even then we faced a lot of issues because none of us were experienced to work at that pace, and with less clarity. Our initial app took months to take off. Revised dates and unrealistic expectations of parallelism often affect team’s motivation because leaders can’t see the needle moving and developers are expected to overwork for days (and sometimes weeks).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical perspective&lt;/strong&gt; - Most of the above pointers are related to overall team, so sharing some tips for the developers here:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Once product discussion is complete, backend and frontend leads should connect separately to finalize set of APIs.&lt;/li&gt;
      &lt;li&gt;Make sure that error codes, error responses are consistent and clearly understood by both the parties. This is for the long term, not just for current product.&lt;/li&gt;
      &lt;li&gt;Create separate sub-tasks for backend and frontend so that JIRA tracking is clear. Backend should start building models/APIs while frontend should make designs meanwhile.&lt;/li&gt;
      &lt;li&gt;If backend needs some Devops assistance to launch a new server, database or something similar, do include that in the estimates. Create task(s) for infra team with priority mentioned.&lt;/li&gt;
      &lt;li&gt;If backend development is expected to take much longer due to some initial setup of things, clarify the same. You might need to build some mock API responses so that frontend team can integrate the same meanwhile. We have used &lt;a href=&quot;https://github.com/iridakos/duckrails&quot;&gt;this tool&lt;/a&gt; in the past for the same. If this is not possible, atleast mention exact API responses in your tickets so that frontend team can write code against it and integration testing can be done later.&lt;/li&gt;
      &lt;li&gt;Don’t skip writing tests. No software system has been constructed in a way that it remains unchanged in the future. Your manual testing effort is going to exponentially increase as more changes come.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Above insights are from my experience working on multiple full-stack products @ LocoNav, both for mobile and web clients. I’ve contributed both as a developer and as a manager, so I’ve seen the situation from both the lenses. If you think that your delivery dates are still shifting despite following best standards, consider doing a &lt;a href=&quot;https://www.aha.io/roadmapping/guide/agile/what-is-an-agile-retrospective&quot;&gt;retrospective meeting&lt;/a&gt; after the delivery.&lt;/p&gt;

&lt;p&gt;Take care and see you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="full-stack" /><category term="efficiency" /><category term="product" /><summary type="html">Many organisations face the issue of missed deadlines. The reasons for this might be a one-off case or repeated scenarios. Today, we'll try to understand how can we optimize full-stack product delivery as a team</summary></entry><entry><title type="html">Migrating data across services</title><link href="https://gagan93.me/blog/2023/07/22/migrating-data-across-services.html" rel="alternate" type="text/html" title="Migrating data across services" /><published>2023-07-22T00:00:00+05:30</published><updated>2023-07-22T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/22/migrating-data-across-services</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/22/migrating-data-across-services.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-22-migrating-data-across-services.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-from-datanami&quot;&gt;Photo from &lt;a href=&quot;https://www.datanami.com/2019/12/12/google-launches-transfer-service-for-on-prem-data/&quot;&gt;Datanami&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;With reference to my &lt;a href=&quot;https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices.html&quot;&gt;last post&lt;/a&gt; and comment on the corresponding &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7085911288056299520?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7085911288056299520%2C7085935059165192192%29&amp;amp;replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7085911288056299520%2C7086039096455815168%29&quot;&gt;LinkedIn post&lt;/a&gt;, I’m explaining how we planned migrating data while transitioning to microservices architecture. There can be multiple approaches to do the same. In a nutshell - we simply want to replicate the data to the new service in a reliable manner at scale.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dump and restore the table on database level&lt;/strong&gt; - Whatever database you’re using, there should be some utility that allows you to do the same. But this is a one time operation, and doesn’t ensure continuous sync of data. For the systems that hardly change, we can do this. Another thing that we assume here is that schema is exactly the same. Often, when we transition to services, some columns change or get removed (eg. foreign keys that no longer exist in new system). So this is very less likely to be used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Setup hooks in old service &amp;amp; continuously sync data&lt;/strong&gt; - I assume that your MVC architecture would help you to setup such hooks. Eg. we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks in Rails models to replicate such data. And some custom scripts (or rails console) to backfill existing data. Depending on size of data this might take a lot of time to backfill existing data, but should replicate the complete data on the new system.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We used the second approach, architected by Nimish Mehta (Senior Staff Engineer @ LocoNav). Even to implement this approach, there are multiple ways, where each has it’s own complexity and reliability:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Directly replicate data&lt;/strong&gt; - Here, we’ll simply use the hook in the first application to hit some REST/grPC endpoint of the second application. This should work well till the second system is up and running. Incase the second system goes down, our application should have sufficient retry mechanism before it considers to stop sending further data, or to mark the current packet as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failed&lt;/code&gt;. There are more things that can happen. Considering a large system, where many such use cases will exist, it was inefficient to build this intelligence in all of them. We needed a better solution.
&lt;img src=&quot;/blog/assets/images/2023-07-22-data_migration_arch_1.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin-bottom: 40px;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Producer-consumer pattern&lt;/strong&gt; - We thought of setting up a queueing mechanism using Kafka topics. The primary app (&lt;em&gt;producer&lt;/em&gt;) shall publish the data on kafka topic and the new app (&lt;em&gt;consumer&lt;/em&gt;) shall read the data from kafka topic whenever it is available. Though this sounded good, it would mean that all such consumer applications shall have the logic to read kafka topic and maintain success/failure logs. This was again adding complexity to each consumer application, and hence this solution was not optimized for the long run.
&lt;img src=&quot;/blog/assets/images/2023-07-22-data_migration_arch_2.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin-bottom: 40px;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup an app in the middle&lt;/strong&gt; - The best solution that we found was to have an app in between producer and consumer. So it goes like - your producer app publishes the data on kafka topic and your consumer app exposes a REST endpoint that accepts data in a known format. In the middle, we have an application that takes care of:
    &lt;ul&gt;
      &lt;li&gt;Reading data from Kafka.&lt;/li&gt;
      &lt;li&gt;Formatting it to JSON (from optimization perspective, we published in &lt;a href=&quot;https://github.com/protocolbuffers/protobuf&quot;&gt;protobuf format&lt;/a&gt;).&lt;/li&gt;
      &lt;li&gt;Pushing to consumer application’s REST endpoint.&lt;/li&gt;
      &lt;li&gt;Having enough retries and a lot of configuration around the same.&lt;/li&gt;
      &lt;li&gt;Scalable, partitioned database that stored logs of all requests sent to the REST endpoint.&lt;/li&gt;
      &lt;li&gt;Provision to retry upto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAX_RETRIES&lt;/code&gt; (configurable) per use case.&lt;/li&gt;
      &lt;li&gt;Provision to retain success/failure logs upto certain hours/days (configurable), and much more.
&lt;img src=&quot;/blog/assets/images/2023-07-22-data_migration_arch_3.jpg&quot; alt=&quot;cover-photo&quot; style=&quot;margin-bottom: 40px;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We found the third architecture best for our use case because it has almost zero duplication of code/optimizations on producer or consumer end. Also, in case we need to build anything in future (eg. a UI to query failure logs, or a button to retry), we’d just need to build in the central app. From our experience, I can say that it has solved a lot of pain for other teams because success/failure logs become large with time and none of the team need to worry about it because the team maintaining this central app (“developer productivity team”) takes care of that. This simplifies both apps and life of other developers 😇.&lt;/p&gt;

&lt;p&gt;See you guys in the next post.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="architecture" /><category term="data-migration" /><category term="kafka" /><summary type="html">Today, I'm explaining how we planned to transfer millions of rows &quot;reliably&quot; to a different service during our journey to services architecture.</summary></entry><entry><title type="html">Monolith → Microservices</title><link href="https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices.html" rel="alternate" type="text/html" title="Monolith → Microservices" /><published>2023-07-14T00:00:00+05:30</published><updated>2023-07-14T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices</id><content type="html" xml:base="https://gagan93.me/blog/2023/07/14/mindset-shift-monolith-to-microservices.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-07-14-mindset-shift-monolith-to-microservices.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-from-standford-news-website&quot;&gt;Photo from &lt;a href=&quot;https://news.stanford.edu/2018/06/11/four-ways-human-mind-shapes-reality/&quot;&gt;Standford News Website&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;At LocoNav, we have been maintaining a decently large (yet manageable) monolith Rails application. Initially, all of our backend stack was in Ruby. With time, our ingestion layer was rewritten in Golang, the data layer was moved to Java, but the web part was still a large monolith. It had almost every functionality we provided and the developers kept adding more functionalities to it. We knew that we’re building a strongly coupled system that would need untangling very soon.&lt;/p&gt;

&lt;p&gt;Around mid 2021, we started our discussions to break this application. Fast forward to today, the large application still exists. Few parts of the system were extracted out, many are still in-progress, while some got deprioritized, but the knowledge gained from the process was immense. I’m sharing a few points from that knowledge:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Keep frontend out as soon as possible&lt;/strong&gt; - Our monolith is a fullstack application. That means we had the entire frontend code is inside this repo. Our oldest stack was Embedded Ruby and jQuery with Bootstrap. But soon we started moving part of system to React. For the longest time (including now), our deployment process included management of both ruby and react based frontends. If you have seen the deployment of a frontend / fullstack application, then you might be aware of the processes that happen to make frontend assets production ready (transpilation, minification, compression and much more). Our frontend part of deployment (known as asset precompilation in rails) takes 50-60% of the total deployment time. We’re in process of taking out React frontend completely from this repo, but this is the debt we pay everytime we need to deploy our app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Read alot before starting&lt;/strong&gt; - Monolith to microservices is a complete subject on it’s own. You might be a very experienced senior developer, but I’d not recommend doing anything without reading enough on the topic. I found &lt;a href=&quot;https://www.oreilly.com/library/view/monolith-to-microservices/9781492047834/&quot;&gt;this book&lt;/a&gt; quite helpful in understanding the challenges and the journey. By reading enough, you’ll make sure that you don’t get trapped into issues like &lt;a href=&quot;https://www.techtarget.com/searchapparchitecture/tip/The-distributed-monolith-What-it-is-and-how-to-escape-it&quot;&gt;distributed monolith&lt;/a&gt; or data inconsistency. Also, unlike before when the entire system went down or came back as a whole, now parts of system can fail. So we need to make sure that the dependent services handle these situations (eg. adding required timeouts).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Align enough resources&lt;/strong&gt; - Often companies with small team of developers assume that they can align some bandwidth for microservices migration but even after months they don’t see any significant progress. Please understand that microservice migration needs a dedicated effort. That doesn’t mean 2x of your developer strength, but atleast more than what you currently have (or deprioritize some tasks for existing developers for a long time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Train people for now and future&lt;/strong&gt; - The developers (like me) who have been working on monolith over the years will need a mindset shift to start working on microservices in a productive manner. Some people might not agree to it, but the idea of microservices is modularlity. If you bring the same mindset of monolith system while writing services, you might end up with a few small monolith applications. You’ll need to develop a lot of libraries and tooling in order to avoid repetition of work across services. Some use cases of such libraries are - consistent logging, request-response handling, inter-service authentication, deployment tooling, etc. Accordingly, developers need to learn how to use these to avoid duplicate effort. Anything that sounds outside scope of your business logic should be taken out in a library so that someone else can use it in future, if needed. This habit also allows you to write functionalities that are decoupled from business logic (&lt;a href=&quot;https://cloudcomputingtechnologies.com/the-importance-of-decoupling-in-software-development/&quot;&gt;Click here&lt;/a&gt; to read more about &lt;em&gt;Benefits of Decoupling&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Leverage OpenAPI autogeneration&lt;/strong&gt; - If you’re aware of OpenAPI documentation (more popularly known as &lt;a href=&quot;https://blog.hubspot.com/website/what-is-swagger&quot;&gt;Swagger documentation&lt;/a&gt;) and you don’t know about the autogeneration that comes free with it, then you’re missing something great. Although this could be a detailed post on it’s own, but in brief - if you are defining a nice API documentation for your service, and have documented all the request and response schemas along with it, then you can generate a client in any popular programming languge without much effort and start using it without any hassle. I’m leaving two links here to help you get started with this (don’t miss this): &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;The tool&lt;/a&gt; and &lt;a href=&quot;https://openapi-generator.tech/docs/usage/&quot;&gt;The documentation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Think twice whenever you’re building something new&lt;/strong&gt; - Whenever you’re building a feature that sounds somewhat large, just think if you can draw clear boundries on the needs of this feature and take it out right away. This might be easily possible for some features while an overkill for others. I’ll leave this to the understanding of Engineering manager who is building this. Incase you still plan to build this inside the monolith app, use required service layer (&lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;facade layer&lt;/a&gt;) to access this feature so that your controller layer doesn’t heavily depend on the model layer (ORM) to CRUD on the data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Refactor, Refactor, Refactor&lt;/strong&gt; - Read a book around design patterns if you can. When you plan to take out a module from your large app, you will introduce some layers of abstractions that might be temporary or permanent in order to decouple it from rest of app. This is true for any part that you’re taking out from a monolith (you are be blessed if you don’t need to do this). This effort might be under-estimated if you’re doing this activity for the first time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Costs will increase in two ways&lt;/strong&gt; - True microservices system is not for small teams. You need people to manage production grade services. Although the ratio between developer and services varies from one organisation to the other, but generally the need of developer increases as you move to services. You might want to rethink your decision of moving to microservices if you don’t want to invest in a larger team (Read &lt;a href=&quot;https://www.fullstacklabs.co/blog/modular-monolithic-vs-microservices&quot;&gt;this&lt;/a&gt; for an alternative architecture). Another direction in which cost increases is the &lt;strong&gt;cloud cost&lt;/strong&gt;. More services will lead to more costs - costs for servers (or containers, or pods), databases, infrastructural maintenance of these systems, test, deployment and so on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Above are the best insights I can share from my experience. See you guys later!&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="architecture" /><category term="monolith" /><category term="microservices" /><category term="mindset" /><summary type="html">At LocoNav, we have been maintaining a decently large (yet manageable) monolith Rails application. Initially, all of our backend stack was in Ruby. With time, our ingestion layer was rewritten in Golang, the data layer was moved to Java but the...</summary></entry></feed>