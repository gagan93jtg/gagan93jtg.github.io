<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2023-05-31T16:05:13+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh — Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">Eight Productive Hours</title><link href="https://gagan93.me/blog/2023/05/27/eight-productive-hours.html" rel="alternate" type="text/html" title="Eight Productive Hours" /><published>2023-05-27T00:00:00+05:30</published><updated>2023-05-27T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/27/eight-productive-hours</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/27/eight-productive-hours.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-27-eight-productive-hours-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-jaelynn-castillo-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jaelynnalexis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jaelynn Castillo&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/xfNeB1stZ_0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I’m a morning person. So I usually start around 8 AM from my home desk. The time was same even when I worked from office. Almost everyone starts after 9:30 or 10, giving me enough time for tasks that require strong concentration. I try to devote a part of this time to reading if my work-schedule allows (which it doesn’t, generally). I expect some personal time in the evening, away from work so that I can take care of rest of the aspects of life (health &amp;amp; family mostly). Many people start late and take care of these things in the beginning of the day. In my opinion, both of the ways are fine. But I strongly emphaisize on the fact that one should just have a life outside work so that you don’t get bored on weekends and holidays.&lt;/p&gt;

&lt;p&gt;Reading the post title, you might be thinking that I’m talking about clearly separating personal and professional life. I’ve personally been part of only startups in my career, so this is not what I really mean. In fact, overworking is not only seen in startups, but in large organisations as well. Following is what I’ve learnt:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t glamorise overworking&lt;/strong&gt; - Overworking might reflect a hardworking person for once but is not good in the long term. It sets wrong expectations, wrong culture, and makes you less ready for anything else. Your working days will be fully consumed if you become habitual of this. You will feel less interested in anything else, and might even start working on weekends as a result of this habit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be responsible for your work&lt;/strong&gt; - If there is some code that you wrote, or some initiative you’re driving, that needs your intervention during non-working hours (eg. production outage of your service/module), be available. It is no one else’s duty. It’s ok if you have an escalation matrix setup in on-call, but not ok otherwise. Take the lead, and fix it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Estimate well&lt;/strong&gt; - One of the reasons to overwork could be a wrong estimate (under-estimate). It’s ok to do it as a fresher, but if you are an SSE and still not doing enough estimation, or taking buffers, you’ll end up overworking. If the release manager doesn’t agree to shift dates, no one can save you here. Do learn this skill.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be realistic about deadlines&lt;/strong&gt; - There are days when we’re given very unrealistic deadlines. At times, they’re achievable by putting more resources, but sometimes they’re not doable. Be clear about it. Because, there are cases when we aim to achieve software delivery by thinking that everyone can overdo, but rather end up doing in 2x - 3x the promised time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gagandeep Singh</name></author><category term="culture" /><category term="productivity" /><category term="overworking" /><summary type="html">The key to working fewer hours is not to simply do less, but to do what truly matters most. - Unknown</summary></entry><entry><title type="html">Develop faster, better</title><link href="https://gagan93.me/blog/2023/05/19/develop-faster-better.html" rel="alternate" type="text/html" title="Develop faster, better" /><published>2023-05-19T00:00:00+05:30</published><updated>2023-05-19T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/19/develop-faster-better</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/19/develop-faster-better.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-19-develop-faster-better-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-milan-csizmadia-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@milancsizmadia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Milan Csizmadia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/pYmH0eTpr70?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Over the years, has your development speed improved? Ofcourse, it would be much better than what it was when you started your first job. But have you significantly improved each year? If you didn’t, or if you’re unsure, then read along.&lt;/p&gt;

&lt;p&gt;I remember my training days, where I was given a Dell laptop with Ubuntu 14 installed on it. While I had done a lot of projects during my college days, I couldn’t be friends with Unix. I had only used Windows XP during school days and upgraded to Windows 7, Windows 8 and then Windows 10 as they were released. I liked good UI, themes, wallpapers, and DOS terminal looked like a punishment in front of good UI. I had heard “terminal is powerful”, and I realized it only when I started using the Unix terminal. Starting my professional career with Ruby, where many people prefer lightweight editors like Sublime Text, a good amount of my time was spent on terminal. While all this learning was overwhelming, I became very comfortable in the next few months.&lt;/p&gt;

&lt;p&gt;Over the past many years, this is how I feel I have improved my development speed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Log files&lt;/strong&gt; - No development happens without challenges and dead-ends. I’ve seen many developers who don’t investigate much on their own, and straight away ask their seniors or start searching about an issue on the web, both of which make sense but not before checking the logs. It could be your framework logs, database logs, or some logs that come up after enabling debug/verbose mode in an application. Believe me, you can’t be a good developer if you are not in habit of checking the logs. If you can debug what’s wrong without going here and there, you’ll save time in the long run (and possibly master &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tail&lt;/code&gt; command options).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Know your tools&lt;/strong&gt; - Let’s say you get into a situation where a job should have run at night but it didn’t. You know the issue because some data didn’t get populated by this but you don’t know where to start from. Most of the companies these days use a lot of SaaS solutions to ease this debugging. We now have logging platforms, infrastructure monitoring platforms, APM platforms, and much more. And if we don’t use these tools to debug these issues, then what is the point of paying them? Spare time to explore all these tools. They help you much beyond this simple example (Eg. APM helps to figure out performance bottlenecks, debug downtimes, deprecate old endpoints, etc.).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Avoid using a mouse/trackpad&lt;/strong&gt; - In other words, use keyboard shortcuts as much as possible. You don’t have to remember tonnes of shortcuts per tool - good tools have standard shortcuts. For example, all text editors would have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; for windows) for opening a new file, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + Option key + Left or Right arrow key&lt;/code&gt; to move across tabs (including browsers), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD+&amp;lt;N&amp;gt;&lt;/code&gt; to go to Nth open window, and so on. After years of practice, this saved a lot of time for me.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Master the terminal&lt;/strong&gt; - If you do this, you can do certain tasks very quickly. I’ve seen developers working at a good speed when they’re on their machines. But if they need to SSH to a server to check something, they become very slow. Although mastering terminal in itself is a very vast topic, because there are many things you can learn, but one of the most useful trick is &lt;em&gt;Reverse Search&lt;/em&gt;. I type not more than 3-4 characters to execute the command I need.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup aliases&lt;/strong&gt; - Although it is possible to setup aliases for a lot of things, I’d recommend setting this up at least for git operations. I use the following git aliases on my personal machine.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[alias]
  co = checkout
  br = branch
  st = status
  ci = commit
  po = push
  fo = fetch origin
  pu = pull origin
  df = diff
  dfs = diff --staged
[push]
  default = current
[pull]
  default = current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;so to do a checkout, I do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git co &amp;lt;branch&amp;gt;&lt;/code&gt;. And to push my branch to remote, I just write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git po&lt;/code&gt;. Also, I use reverse search than typing even this much 😛.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find alternatives continuously&lt;/strong&gt; - Whenever you’re doing something repeatedly, there are high chances that many people are doing the same thing and there might be some way to do it fast. For example, engineers spend a good time using browsers and there are a lot of browser extensions that can help you do things fast. I remember some time ago I was struggling to take screenshots of pages that were slightly larger than my window (so I zoomed out to take screenshot 😋). Later I found an extension (GoFullPage) that scrolls your page from top to bottom and creates a screenshot that can be exported to Image/PDF. Similarly, there are times when you need to copy paste some tabular data but there is no export option, so an extension (Table Capture) allows you to right click on that table and copy paste that to a google sheet. This worked for about 90% of use-cases. Another good extension (Authenticator) allows to keep all the 2 step verification codes (those 30-60s expiring  OTPs) in the browser itself, so that you don’t need a phone everytime.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There could be 10 more things I can add to this list, but I want to keep this short. For example, there’s no mention of how you can use GPT tools because there are many posts on that already. I hope this gives you some idea and rest you can think on your own. The way to work fast is to first realize that you are slow, and then think what can be optimized. If you have this thought process, you can continuously improve your speed.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="optimization" /><category term="development" /><category term="productivity" /><summary type="html">Over the years, has your speed of development improved?. Ofcourse, it would be much better than what it was when you were straight outside college. But have you significantly improved each year?</summary></entry><entry><title type="html">Small testing loops</title><link href="https://gagan93.me/blog/2023/05/01/small-testing-loops.html" rel="alternate" type="text/html" title="Small testing loops" /><published>2023-05-01T00:00:00+05:30</published><updated>2023-05-01T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/05/01/small-testing-loops</id><content type="html" xml:base="https://gagan93.me/blog/2023/05/01/small-testing-loops.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-05-01-small-testing-loops-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-nubelson-fernandes-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/it/@nublson?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Nubelson Fernandes&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/CO6r5hbt1jg?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you are a software developer, you must have spent a considerable part of your time debugging the code you, or someone else wrote. At times, it is quite frustrating to debug code due to its current state, and you find the need to &lt;a href=&quot;https://refactoring.com/&quot;&gt;refactor it&lt;/a&gt;. But in a hurry to finish the task on time, we start solving the problem directly and testing it out, often wasting a lot of time that could be easily saved. Had we spent some time on understanding the moving parts, our “testing loops” could have been shorter.&lt;/p&gt;

&lt;p&gt;At the time of writing this, I found out that “testing loop” is not a defined terminology in software engineering, so this is what I mean by it&lt;/p&gt;
&lt;blockquote style=&quot;letter-spacing: 0.1px&quot;&gt;
  &lt;p&gt;“The process of changing a piece of code, and testing it out by some means” forms a loop. Smaller the loop, the faster we change and test our code, and our frustration is minimum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s assume you’re a web developer who is doing a code change in a service class that is called by a REST API to serve the response. Now in order to test this change, you can:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update an automated test that was testing this API and can check the response.&lt;/li&gt;
  &lt;li&gt;Use cURL/Postman to test your code and ensure that the response is updated.&lt;/li&gt;
  &lt;li&gt;Test a small piece of change inside a &lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL shell&lt;/a&gt;, if your language/framework provides that, and verify that the class method is returning the change as expected. Some examples of such shells as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt; for a rails app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; for a django app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jshell&lt;/code&gt; for a java app, or a browser developer console  for Javascript apps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, step 1 and 2 can be very slow if you have a medium/large application because your web server/test suite will take time to boot, whereas step 3 will be very fast. Being a rails developer, I always test such changes inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt;. This might seem like a very small optimization but there are times when you end up testing the change multiple times. If something takes time (eg. a web server reloading after change), we might also switch to other tasks (or distractions) in the interim.&lt;/p&gt;

&lt;p&gt;This is just one example of improving our productivity as a developer (frustration and productivity are inversely proportional). I’d recommend you to spend more time in finding shorter ways of testing things out than wasting time in longer testing loops. That would help you for years. Although I strongly believe that developers are solely responsible for their code (no reviewers, no QAs) and by no means I’m saying that we should abandon testing code via test cases and postman. But yes, while you’re in the middle of debugging, use shorter ways and in the end test out things by normal means.&lt;/p&gt;

&lt;p&gt;The motive of this post is not to promote use of REPL shells, but I’ve used them for about 8 years now and they are great tools to learn the language fast, and also to debug things. If your language supports this and you never used it, you must try this once. Try this out next time you get into debugging something time consuming and let me know if this helped.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="debugging" /><category term="optimization" /><summary type="html">If you are a software developer, you must have spent a considerable part of your time debugging the code you, or someone else wrote. At times, it is quite frustrating to debug code due to...</summary></entry><entry><title type="html">Hello world</title><link href="https://gagan93.me/blog/2023/04/15/hello-world.html" rel="alternate" type="text/html" title="Hello world" /><published>2023-04-15T00:00:00+05:30</published><updated>2023-04-15T00:00:00+05:30</updated><id>https://gagan93.me/blog/2023/04/15/hello-world</id><content type="html" xml:base="https://gagan93.me/blog/2023/04/15/hello-world.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2023-04-15-hello-world-cover.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-vladislav-klapin-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@lemonvlad?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Vladislav Klapin&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/PVr9Gsj93Pc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I’m starting this blog to give back my learnings to the community. I’ve thanklessly contributed much less in the past as I was mostly occupied with my work. This was primarily because I got a chance to work only in startup environment, where the &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_to_market&quot;&gt;TTM&lt;/a&gt; is generally very less.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;https://www.joshtechnologygroup.com/&quot;&gt;first organisation&lt;/a&gt;, we use to work on a SaaS product where our team was scattered between India and U.S timezones. We use to sync once a day formally (as a standup) and spent rest of the day working on deliverables. While this organisation was “tech only” (as most of us were engineers working on outsourced products), I got a strong grip on technology tasks. When I joined &lt;a href=&quot;https://loconav.com&quot;&gt;LocoNav&lt;/a&gt;, there was a major shift from service to product based mindset. On a single floor, we had all the departments sitting and working (hustling). Accordingly, learnings were much different and ownership was even more than 100% :)&lt;/p&gt;

&lt;p&gt;In my close to 8 years of experience, I’ve grown both technically and personally. I’ve built products, handled client interactions, hired people, contributed to building high level architectures, managed people, took care of appraisals, and what not. Based on all those learnings, I’ll spare time to write about topics that include (but are not limited to): &lt;strong&gt;Software Engineering, Culture, Leadership, and my specialization that is mostly in Ruby on Rails + AWS Cloud&lt;/strong&gt;. I hope that readers will find this content useful.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="hello" /><category term="beginning" /><category term="blogging" /><summary type="html">I'm starting this blog to give back my learnings to the community. I've thanklessly contributed much less in the past as I was mostly occupied with my work. This was primarily because I got a chance to work only in ...</summary></entry></feed>