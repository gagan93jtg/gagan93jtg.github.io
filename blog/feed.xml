<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2024-05-13T14:07:30+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh ‚Äî Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">Improving your resume</title><link href="https://gagan93.me/blog/2024/05/13/improving-your-resume.html" rel="alternate" type="text/html" title="Improving your resume" /><published>2024-05-13T00:00:00+05:30</published><updated>2024-05-13T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/13/improving-your-resume</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/13/improving-your-resume.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-improving-your-resume.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@joaoscferrao?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Jo√£o Ferr√£o&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/white-printer-paper-on-macbook-pro-4YzrcDNcRVg?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello people. I‚Äôve you‚Äôre reading this, you might be looking to build a better resume. It‚Äôs important to keep your resume updated even if you‚Äôre not looking out for a change. Sadly, not many people like me realise this on time. And because of this, we end up doing major changes in our resume when we actually start looking out. For example, I started looking out from my previous job in late 2017 and this time in late 2023. In this six years, almost everything changed - from my role to market expectations.&lt;/p&gt;

&lt;h2 id=&quot;the-versions&quot;&gt;The versions&lt;/h2&gt;

&lt;p&gt;Feel free to laugh but the 2017 resume looked like this (that got me into LocoNav). Before LocoNav, I applied to &lt;a href=&quot;https://www.reddoorz.com/&quot;&gt;RedDoorz&lt;/a&gt; also and got a call from this resume. So probably it was good according to that time and my YOE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v1.jpg&quot; alt=&quot;v1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôll not discuss a lot on this resume because I did not continue editing on this file. It needed a lot of restructuring, so rewrite was better. I‚Äôll share two more resumes based on my current skill set, the comparison between both. Even the first one was not that bad (rather it‚Äôs fancy) as it got me a call from &lt;a href=&quot;https://blog.gagan93.me/atlassian-interview-experience?&quot;&gt;Atlassian&lt;/a&gt; without a referral :)&lt;/p&gt;

&lt;p&gt;The resume shared below was created around mid 2023:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v2.jpg&quot; alt=&quot;v2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I thought fancy resume with photo would look cool üò∂. I used some template on &lt;a href=&quot;https://www.canva.com/&quot;&gt;Canva&lt;/a&gt; to build this. I shared this with 4-5 friends for a feedback. These were the points that I worked on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build a simpler resume. That photo is not needed. Better start building on a simpler tool like Google Docs. I did that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The two column resume is generally not extensible. For example, I had not mentioned a lot about my roles/responsibilities in the previous organisation. And once I added those details, the right section expanded to the second page where as left (blue-ish) section was empty.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove these things as much as possible, no one wants to read them:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;The top right part of resume [Objective] that starts with &lt;em&gt;Having about 8 years&lt;/em&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Sections like Strenghts, weakness, languages, hobbies.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had made the &lt;em&gt;Language and Platforms&lt;/em&gt; section too fancy by adding so many things, categorised under 4 sub-headings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the space is used nicely and we opt for a single column (plain Google Doc) resume, we could put the contact information in a single line (yes, I did that later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Education section could be trimmed. Remove school/college name and just talk about degree and board/university. Again this can come in 3 lines if we go for a wider page (single column basically).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The most important point - The points mentioned in the resume do not talk enough about &lt;strong&gt;the impact&lt;/strong&gt; I got into the projects. I majorly wrote like - &lt;em&gt;‚ÄúI did this task single handedly‚Äù&lt;/em&gt; or ‚Äú&lt;em&gt;I contributed to this along with the team&lt;/em&gt;‚Äù. Our focus should be on the &lt;strong&gt;outcome&lt;/strong&gt; or &lt;strong&gt;the impact.&lt;/strong&gt; No one is interested to read plain stories that do not bring a good business or engineering impact.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from this, few improvements were done from my end also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Although I had done a lot of work in the past 6 years, it‚Äôs important to choose the impactful work. The issue in my case was that I had taken up multiple things that were very impactful but I had to choose and still let go of few good things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had divided my role as a Staff Engineer into two parts - &lt;strong&gt;Enablement team and Payments team&lt;/strong&gt;. That sounded like over-engineering the resume because for the reader, it might not make a lot of sense. Also, because the work on payment product had winded up, so I thought I should talk less about that and merge these sections. Moreover, I was working on a large internal product that was neither under payment, not enablement role, and I had to accommodate that as well. The best way was to merge a single ‚ÄúStaff Engineer‚Äù role and mention in points/sub-points.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I created second level category inside my resume wherever required. For example, for mentioning my work on the payments product, I thought it‚Äôs better to mention a wider heading and explain everything under it, rather than putting each thing about payments product in a new point where this can get mixed with other points, or where I need to mention the context of ‚Äúpayments‚Äù in a repeated fashion. Because this was now a single column resume, creating nested categories was possible and was not wasting much space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I tweaked font size, page margins, bullet margins and other settings in the Google Doc to ensure I‚Äôm not wasting space and I‚Äôm able to wrap everything in a single page. For example, I tweaked the indentation for nested bullets so that most of the nested points get completed within a single line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used ChatGPT to ensure no typos, grammar issues. It‚Äôs also very helpful to write shorter sentences without losing the context. The only thing to see while using AI tools is that we need to make sure that overall language of resume is consistent. It shouldn‚Äôt happen that some specific points are written in a very fancy English while others are too simple. Just take care to ensure that consistency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider yourself as a problem solver (senior engineer). Don‚Äôt associate yourself closely with a technology stack when you‚Äôre talking about your contributions (eg. Java/Spring or Ruby/Rails or Python/Django). When you think in a framework-agnostic manner, you don‚Äôt use names of libraries that are specific to your tech. This makes it easier for the reader to understand incase they don‚Äôt share the same technology background. For example, Rails developers usually mention libraries like Sidekiq, ActiveAdmin, Devise and Rspec in their Resume. Now for someone who is filling a Java position, it will not be possible to understand these without googling. And resumes are hardly skimmed for a minute or less :) We should rather talk in generic terms like background processing framework, admin/backoffice library, authentication framework and testing framework. In this way, there are better chances of someone understanding your resume. Only place to mention your current language/framework is under the &lt;strong&gt;Skills section&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;This is my current resume that I have posted on my &lt;a href=&quot;https://gagan93.me/&quot;&gt;portfolio&lt;/a&gt; also.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v3.jpg&quot; alt=&quot;v3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In comparison to the two column fancy resume, this is easier to modify because there were instances while editing the two column resume when I thought of adjusting the ratio of left and right side just because few points were crossing the line just by 1 word. Or I thought I should adjust the fonts. This one is much simpler and flexible to future modifications, just like a good software design :)&lt;/p&gt;

&lt;p&gt;Again highlighting the most important point - talk of impact. I‚Äôll share a few examples on how I modified the points to show impact:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Took the first microservice out of a 6+ year old monolith, reducing a decent load from database&lt;/em&gt;
 &lt;strong&gt;After&lt;/strong&gt;&lt;em&gt;: *Pioneered the transition of critical components to a microservices architecture, achieving a 75% speedup in the five slowest endpoints.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Scaled Fastag payments product from 0 to 2.5Cr daily transaction amount. This is almost 2% of India‚Äôs total daily toll.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Successfully scaled the system from inception to handle 2.5Cr daily transaction (2% of India‚Äôs total toll volume).&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Worked on reducing cloud spend by analyzing usage of servers and using other methods.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt; &lt;em&gt;Strategically reduced from 70+ to 5 queues based on latency/memory requirements, optimizing approximately 25% of infra costs.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Simplified how the main entity of system (vehicle) is accessed by various components.&lt;/em&gt;
 &lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Planned and executed refactoring of core system entities, streamlining the access over 200+ reports and APIs.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Migrated Email provider to AWS SES with bounce/complaint list handling flow.&lt;/em&gt;
 &lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Efficiently migrated ~ 150 different kinds of emails from Sparkpost to Amazon SES implementing bounce handling for increased reliability.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removed points like that could not be modified to show impact. Like:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Involved in discussing overall global architecture of logistics based Saas Product.&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Lead various other initiatives like removing huge chunks of dead code‚Ä¶&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In total, I had to do 5-6 iterations on my resume over a period of 9 months, based on feedback that I received from multiple people. The idea of this blog post &lt;strong&gt;is not&lt;/strong&gt; to provide you &lt;em&gt;the best resume template on the internet&lt;/em&gt; that will get you into your next FAANG role. I‚Äôll just share what worked for me and how I improved it over time. I‚Äôve applied in about 6-7 companies where this got selected even without a referral. This includes both big tech and smaller companies.&lt;/p&gt;

&lt;p&gt;Many of the points mentioned above are subjective, like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I‚Äôve seen many senior people adding Objective / Career Summary on the top.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Things like Strengths, Hobbies and Languages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I do not mean that those resumes will get rejected. I just wanted to build an optimised resume which can be skimmed over efficiently and get me some interviews. People also write cover letters to describe their current role and expected role (somewhat overlaps with &lt;strong&gt;Objective&lt;/strong&gt; section). At the end, it‚Äôs not about &lt;em&gt;that one way of building it&lt;/em&gt;, but for &lt;em&gt;what works for you&lt;/em&gt;. Good luck for your Resume building journey.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="resume-building" /><summary type="html">Hello people. I've you're reading this, you might be looking to build a better resume. It's important to keep your resume updated even if you're not looking out for a change. Sadly, not many people like me realise this on time.</summary></entry><entry><title type="html">Bain and Co. Interview Experience</title><link href="https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience.html" rel="alternate" type="text/html" title="Bain and Co. Interview Experience" /><published>2024-05-13T00:00:00+05:30</published><updated>2024-05-13T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-bain-and-co-interview-experience.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo from &lt;a href=&quot;https://www.brandcolorcode.com/bain-company/&quot;&gt;Brand color code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Staff Engineer II&lt;/strong&gt; at &lt;strong&gt;Bain and Company&lt;/strong&gt; in &lt;strong&gt;Jan-Feb 2024&lt;/strong&gt;. They were hiring engineers for the &lt;strong&gt;Gurgaon team&lt;/strong&gt; (that‚Äôs a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to their website where I applied. For those who haven‚Äôt heard much about the company:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Popularly abbreviated as &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Three_(management_consultancies)&quot;&gt;MBB&lt;/a&gt;, McKinsey, Boston Consulting Group and Bain &amp;amp; Company are known as the Big three management consultant firms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As the name suggests, these are mostly into consultancy and not in product development. And unlike other consultant firms where developers are outsourced by the company to build something, these big firms mostly ‚Äúplan‚Äù the execution. Generally, the actual implementation (code) is not done by these companies. They just meet clients to understand the problem, document everything and make plans.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most of the roles are &lt;strong&gt;Individual Contributor&lt;/strong&gt; roles where you‚Äôre expected to travel for 20-50% of your time (based on role/seniority). This is true for engineering roles as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interview-process&quot;&gt;Interview process&lt;/h2&gt;

&lt;p&gt;I got an email from their recruitment team that they want to schedule a hiring manager call to begin with. Except for one instance, entire communication happened over emails and the team was quite responsive. There were &lt;strong&gt;five rounds&lt;/strong&gt; in total. I cleared all of them but because there was a single vacancy and high competition, I was informed that they chose someone else. Overall, it was a good learning experience as this was the first time I went through all the rounds for any company‚Äôs process.&lt;/p&gt;

&lt;h3 id=&quot;hiring-manager-round&quot;&gt;Hiring manager round&lt;/h3&gt;

&lt;p&gt;This was scheduled with Sr. Director of Global Engineering team who was based out of Singapore. There are many companies that put you through the evaluation process directly but I like the organisations where we have a human interaction with a senior person before starting with the interview rounds. They make sure that they understand your current role, future growth path/expectations and also explain the new role in the best possible way. For example, most of us work with product/service based companies where travel is almost negligible for engineers. This was very different for Bain. Another thing was that we get to code less in consultant roles. He made sure that I completely understand these two things before starting with the evaluation process. He sounded calm and ‚Äúnot in a hurry‚Äù like many directors/senior managers. We did some technical discussion around my projects but only on surface level.&lt;/p&gt;

&lt;h3 id=&quot;live-coding-round&quot;&gt;Live coding round&lt;/h3&gt;

&lt;p&gt;This was scheduled with a &lt;strong&gt;Senior Engineer&lt;/strong&gt; who just got promoted to &lt;strong&gt;Staff&lt;/strong&gt;. Generally, when you talk to Engineers during interviews, you might find them less expressive but people at Bain are much more open (and somewhat more professional) when it comes to communication. This is because Engineers also deal with the clients and are expected/trained to be good on communication skills. A junior engineer also joined the interview as an observer. He dropped mid way due to a clashing meeting. The problem statement was based on strings and 1D arrays (quite simple, but I don‚Äôt remember exactly). While the problem was simple to solve, the platform they chose was not good. Most of the coding interviews I gave were on platforms like Coderbyte that has a wide choice of languages. Being a Ruby Engineer, I prefer to solve DS questions in &lt;strong&gt;Ruby&lt;/strong&gt; but here, the choice was among &lt;strong&gt;Python, Java and Javascript&lt;/strong&gt;. This was not communicated by HR team in advance. Somehow I ended up coding the solution in Java, which is my second language of choice, and that ran without any issues. I expected another question but the interviewer preferred to play around with minor changes in requirements and edge cases, all of which were passing. This sounded easier than I expected and what I faced in other companies.&lt;/p&gt;

&lt;h3 id=&quot;technical-assessment&quot;&gt;Technical Assessment&lt;/h3&gt;

&lt;p&gt;This was basically a &lt;strong&gt;System Design / HLD round&lt;/strong&gt; with another &lt;strong&gt;Staff Engineer II.&lt;/strong&gt; I prefer interviews during morning hours because I‚Äôm fresh at that time. But because of interviewer‚Äôs preference/availability, this was scheduled in the evening. I‚Äôm generally mentally-saturated by that time (6PM IST). The problem statement was around designing a &lt;strong&gt;blob&lt;/strong&gt; &lt;strong&gt;storage platform&lt;/strong&gt; like &lt;strong&gt;Dropbox / Google Drive&lt;/strong&gt;. Although this is a common HLD problem, I had not solved it before. The only way was to think from first principles. I‚Äôm good at cloud related things and protocols so that never remains an issue for me when I‚Äôm solving a HLD problem. I‚Äôm also good at databases but my major exposure is around SQL databases only. Considering the numbers shared by them, I tried to propose a NoSQL database for the metadata storage. They immediately pointed this out and asked me why I chose a NoSQL database here. When I started pointing out the reasons, I figured out that I was not having strong reasons to go for NoSQL. Within next two minutes, both of us mutually agreed to start with a SQL database like PostgreSQL. The major discussion in a blob storage backend (from a functional perspective) is to think about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Breaking file(s) into chunks for both uploading/downloading.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hashing these parts to see if it already exists on the backend (can happen frequently for large platforms or when people upload duplicate files).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encryption/Decryption on client/server side (this was one of the requirements).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talk about Disk, storage, cost, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I had read read an article on &lt;a href=&quot;https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html&quot;&gt;Amazon S3&lt;/a&gt; (not full, it‚Äôs a long one for me to absorb). I took some ideas from it when talking about low level storage. Although S3 is much more complex and I was not supposed to talk about things like storage tiers. We didn‚Äôt conclude our discussion around all the points (can happen in a HLD round, that is more open ended in comparison to coding rounds) but he asked me to talk around APIs, schema design and draw some boxes on &lt;a href=&quot;https://excalidraw.com/&quot;&gt;Excalidraw&lt;/a&gt; (my choice for drawing diagrams) before the time ends. The overall discussion went very well. Hence, I qualified.&lt;/p&gt;

&lt;h3 id=&quot;technical-assessment-case-study&quot;&gt;Technical Assessment (Case Study)&lt;/h3&gt;

&lt;p&gt;This was another HLD round scheduled with &lt;strong&gt;Director of Engineering, India team&lt;/strong&gt;. He wanted to understand about my projects in great depth and probe around choices. Then we moved to designing an app that we regularly use - like &lt;strong&gt;Zomato&lt;/strong&gt;. He asked some problems specific to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How we‚Äôll show restaurants/branches near customer‚Äôs current location?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What tables will you make to store restaurants, branches, etc?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you build Zomato‚Äôs homepage (gave some requirements, similar to the actual app)? Write SQL queries and see what things should be cached for fast page load.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the previous round was centered around a single problem (Blob storage), this included my projects, a case study, discussion around databases, discussion around other technology choices, and a lisuttle bit on the product side.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;After this round, I got a phone call from the recruiter (for the first time). They gave me feedback on all my previous rounds which was very positive. The only negative she pointed out that I sounded comfortable with only Ruby programming language. She concluded this because I had mailed them about the platform issue in live coding round that did not have sufficient language options to choose from. I explained the same and I told that I was comfortable enough with Java to solve the problem within time. I again explained that I consider myself as a &lt;em&gt;Sr. Engineer&lt;/em&gt;, and not a &lt;em&gt;Ruby Engineer&lt;/em&gt; but their platform should have had more options available. Otherwise they should inform the same before the interview. It was important for them to clear this expectation from their side, as for client projects languages keep on changing. Moreover, most of their enterprise clients were using Java/C#.&lt;/p&gt;

&lt;p&gt;They told me that next round is with an Expert Partner. This will be a Behavioural Round (kind of cultural fit round). Because the partner is generally travelling, I‚Äôll have to provide my availability over multiple slots in a week and they‚Äôll schedule in any of these slots.&lt;/p&gt;

&lt;h3 id=&quot;behavioural-round&quot;&gt;Behavioural Round&lt;/h3&gt;

&lt;p&gt;As explained, this was held with an &lt;strong&gt;Expert Partner&lt;/strong&gt; from &lt;strong&gt;APAC region&lt;/strong&gt;. The interview was scheduled for 45 minutes but in the beginning they told me that they just have 30 minutes because of a last minute meeting setup with a client. This was the first time I was giving Behavioural Round in my life so I had spent considerable time in understanding what this round is meant for. Obviously, I couldn‚Äôt fool this person if I was not a cultural fit because they had 21 years of experience and 16+ years within Bain. But I said to myself - If I fail in this round after clearing 4 technical rounds, this would be the worst thing. I checked a lot of videos to learn about the STAR approach, making stories out of things you‚Äôve done in your career. There was one short video that suggested to build stories around (at least) these axes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Stories that indicate good leadership,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Where you acted as a great team player,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accomplishment story to show that you can tick off your goals,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overcoming hurdles to show that you can surpass challenges,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Failure story to show that you learn from your mistakes and bounce back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I say ‚Äústories‚Äù, don‚Äôt take me wrong. It doesn‚Äôt mean creating fake stories. Because the interviews are structured in a way that you‚Äôre evaluated on a lot of things in a short interval, it‚Äôs good to know the axes on which you should prepare before-hand. Otherwise you might have showcased all the skills but you‚Äôd still forget those when you‚Äôre asked during an interview.&lt;/p&gt;

&lt;p&gt;The interview started with our introductions. He talked a little bit around Logistics business (i.e. around LocoNav). Then they said ‚Äú&lt;em&gt;You‚Äôve worked at LocoNav for 6 years, can you explain me one big task that you completed each year&lt;/em&gt;‚Äù. This was the moment when all the preparation felt useless. While I‚Äôve done a lot of work at LocoNav and everybody around me knows that, I felt blank for 2-3 seconds. After that I started explaining my contributions. There were a few more questions that were no where related to what I had expected. At the end, they asked if I had questions for them. I asked a few questions and we wrapped with the interview.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The interview at Bain took slightly longer than other companies. The overall process took close to 2 months as rounds happened within a gap of 1-2 weeks, specially for the last round where availability of Expert Partner was very limited. Even after the last round, they took 2-3 weeks before sharing the result. I was informed that there was &lt;strong&gt;only one opening&lt;/strong&gt; for this position and they shortlisted some other candidate. I probed for more details during the month of March because this feedback seemed like a generic &lt;em&gt;platform generated email&lt;/em&gt;. The HR added the hiring manager to the email and they both confirmed the same. It sounded somewhat like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From HR:&lt;/p&gt;

  &lt;p&gt;Thank you for reaching out. We had multiple candidates, including yourself, who progressed to the final stages of the interview. It‚Äôs important to note that while you demonstrated strong skills and abilities, the candidate who ultimately succeeded in the final round performed exceptionally well. This outcome doesn‚Äôt reflect any deficiency in your skills; rather, it‚Äôs a testament to the competitive nature of the final selection process.&lt;/p&gt;

  &lt;p&gt;--&lt;/p&gt;

  &lt;p&gt;From the Hiring Manager:&lt;/p&gt;

  &lt;p&gt;Thanks for reaching out. Yes, we liked your candidature and got good feedback from the interviewers. Unfortunately we only had one open position at this point of time and had a tough decision to select one candidate. We will surely reach out to you if we open more positions in the future.&lt;/p&gt;

  &lt;p&gt;Once again, really appreciate the time and effort you spent for the interview process with us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got some relief after this email, because I believe feedbacks must be shared when a candidate spends time with you. Including all the emails, the phone call and the interview rounds - I spent more than 6 hours with them. I read a lot about consultant life during the interview process to see if I can work like that (because I‚Äôm not a travel freak). I might have given a chance to this role if I was selected. I also thought - will I stay relevant in the &lt;em&gt;SaaS Product industry&lt;/em&gt; if I opt for this role for a few years (that doesn‚Äôt involve hands-on coding)? But whatever happens, happens for the best. I got the complete experience but I was not selected. I was overall happy.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="bain" /><category term="interview" /><category term="staff-software-engineer" /><category term="consultant" /><summary type="html">I interviewed for the position of Staff Engineer II at Bain and Company in Jan-Feb 2024. They were hiring engineers for the Gurgaon team (that's a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to..</summary></entry><entry><title type="html">Stripe Interview Experience</title><link href="https://gagan93.me/blog/2024/05/07/stripe-interview-experience.html" rel="alternate" type="text/html" title="Stripe Interview Experience" /><published>2024-05-07T00:00:00+05:30</published><updated>2024-05-07T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/07/stripe-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/07/stripe-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-07-stripe-interview-experience.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo from &lt;a href=&quot;https://www.google.com/search?sca_esv=87522dea2824ff52&amp;amp;sca_upv=1&amp;amp;sxsrf=ADLYWILkvvPEaLSLta0vbUlLLiSxs0BWaw:1715080024675&amp;amp;q=stripe&amp;amp;uds=ADvngMjTNPKEE-q7I44lun7GC2_xSBJakMDKk-zKP558UX3sGFgOo0obkT031nY191A6wYa4TKscNMz9nP09qudeXs6qjCVIMuAYWsNeUj1s-4H7nT9Qe8VwqZDmCXUj1j6FA1u2k2VYrDv3nso5ytnOUTS-I_q57ncjE0lSWYQOUjGzhq2Q6jSJwajnI5-4O-5SG-GId7Ebxmrab0S7tl0xBLhPcrufYwvgG_qRMVkigo81MJHwaHwu31KwhIxtySTCHOFpjrTG_mwsclx4pnuJ8YDWgoKJb-w717k6A5s5toPiq-guPtM&amp;amp;udm=2&amp;amp;prmd=isvnmbtz&amp;amp;sa=X&amp;amp;ved=2ahUKEwi0_Ib9svuFAxWybmwGHTv9D0QQtKgLegQIDBAB&amp;amp;biw=1496&amp;amp;bih=812&amp;amp;dpr=2#vhid=LKToaxY8zwIc8M&amp;amp;vssid=mosaic&quot;&gt;Stripe Engineering&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Staff Software Engineer&lt;/strong&gt; at &lt;strong&gt;Stripe&lt;/strong&gt; in &lt;strong&gt;December 2023&lt;/strong&gt;. They were hiring engineers in the &lt;strong&gt;Verification &amp;amp; Identity Platform team&lt;/strong&gt;. I applied through a referral as that increases your chances of getting shortlisted. For those who haven‚Äôt heard much about Stripe:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It is one of the big players in &lt;a href=&quot;https://docs.stripe.com/products&quot;&gt;global payment products&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the past, Stripe has been known to be the &lt;a href=&quot;https://www.linkedin.com/posts/gergelyorosz_stripe-softwareengineering-activity-7140426202174967808-xDQE/&quot;&gt;largest Ruby codebase&lt;/a&gt; in the world. They used Sinatra (not Rails) for web apps, so they‚Äôre not the largest Rails codebase (which &lt;a href=&quot;https://shopify.engineering/shopify-monolith#:~:text=Our%20main%20monolith%20is%20one,of%20developers%20currently%20adding%20features.&quot;&gt;Shopify is&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They have a wide tech stack now but their founder explains &lt;a href=&quot;https://www.quora.com/Why-did-Stripe-choose-to-use-Ruby-for-its-backend-language&quot;&gt;why they used Ruby&lt;/a&gt; to start with. Stripe also has a very &lt;a href=&quot;https://stripe.com/blog/engineering&quot;&gt;popular technical blog&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Stripe asks the candidates to sign a &lt;a href=&quot;https://news.ycombinator.com/item?id=1952848&quot;&gt;NDA&lt;/a&gt; because of which I cannot share the exact interview questions but I‚Äôll still share the format of interview and difficulty of questions to some extent.&lt;/p&gt;

&lt;h2 id=&quot;interview-rounds&quot;&gt;Interview rounds&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Telephonic round with Recruiting team&lt;/strong&gt; - This was scheduled to understand my role, projects, career goals and set up alignment with the role. The recruiter was based out of Singapore and was taking care of APAC hiring. Although they were not technical, they were expert in explaining the job description and were clearly able to point out things that I was not doing right now in my job role (that they needed for the role). For example, I work as a Staff Engineer at LocoNav which is a small team. So here, my role doesn‚Äôt involve regularly setting up technical direction for the team but considering Stripe‚Äôs scale, Staff Engineers are very senior in role and they take care of the same on regular basis. So, they told me before hand that based on my performance, I might be &lt;strong&gt;down-levelled&lt;/strong&gt; if they see a need to do this. This could sound discouraging as the position below &lt;strong&gt;Staff Engineer&lt;/strong&gt; was of &lt;strong&gt;Software Engineer&lt;/strong&gt; but they explained that engineers with the experience range of 0-15 years of experience do fall under this role. This is so because Staff Engineers are very senior in Stripe and they do not have a middle role (i.e. Senior Software Engineer).
 On a side note, I wrote about &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;titles and down-levelling&lt;/a&gt; incase you want to understand when it is good or bad for you. Additionally, although the JD mentioned the location as &lt;strong&gt;Remote&lt;/strong&gt;, the recruiter clarified that they‚Äôre planning to start WFO soon (early 2024) so the location would be Hyderabad/Bangalore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System Design Round&lt;/strong&gt; - Staff Engineers at Stripe typically go through &lt;strong&gt;two&lt;/strong&gt; System Design rounds. In each round, there is a Staff Engineer who evaluates your design. In this round, the interviewer was from a different timezone and a very senior person (~10 years senior to me). They explained the problem statement and waited for me to probe for details. While many companies ask for the design of well-known large systems (eg. Youtube, Whatsapp, Google Drive, etc), Stripe is known to ask questions around their own systems only. So the question was related to payments product. This was first ever System Design Interview that I was giving in my career, so I was skeptical on my approach. The problem statement seemed very simple and I queried 2-3 times (like ‚Äúis &lt;em&gt;this is what I have to build?‚Äù).&lt;/em&gt; At that time, I was not familiar with the fact that simple problems can also be asked for senior roles, but the expectation of solution is with respect to candidate‚Äôs expertise/seniority. Just to explain this more - You might have heard that some companies (like Atlassian) have High level design (or System Design) round even for hiring college freshers. At their level, the expectation is that they should understand basic building blocks of the overall system and have some idea on non-functional requirements. The same problem statement can be given to a Senior Engineer where the expectations will be very different. The interviewer can probe into specifics of protocols, choice of databases and so on. For Staff/Principal/Distinguished levels, the discussion can go towards privacy, compliance, regional failovers, disaster recovery etc. I started attempting the question and explained the components of the system and some APIs. I missed one thing around scale of data that the interviewer pointed out. At this point, I realised that exposing an API endpoint is not a good idea and we should have a queueing mechanism like Kafka in between for improved reliability at scale (eg. if consumer system crashes, it can retry from where it left on the Topic).
 Because this was my first ever System Design interview, I was a bit confused during my attempt and the interviewer sensed that. They shared the feedback with the recruiting team that I‚Äôm a good candidate but probably I should be considered for a lower level (i.e. Software Engineer). The same was conveyed to me and I agreed to be evaluated again for SE role. The interview process restarted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding round&lt;/strong&gt; - As per the documents shared with me, Stripe‚Äôs interview format claims to be very different than big tech companies as they have rounds where you engage more with the interviewer to solve problems and debug issues. For example, their interview process mentions some rounds where you have a codebase ready in which you implement a specific functionality or solve a bug that they‚Äôve intentionally added. Surprisingly, this round was nothing like that and I was presented with a typical data structures problem üò∂. It was a simple problem, again related to their products (i.e. payments). I asked my doubts and implemented the solution that worked. The interviewer modified the problem statement and asked me to accommodate the same in my solution. This one took some time but I was still able to solve it. With this, the interview came to an end and he asked me if I have questions. I asked how many more variations exist in the problem, to which he said ‚Äútotal of five‚Äù. After the interview, I searched for the problem and found that this question was a typical Google‚Äôs telephonic interview round question (not one ‚Äúrelated to their products‚Äù) üò≤.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a few days, I was informed through email that I did not clear the round. I thought - maybe I was expected to solve more variations of the problem within the given time because my solution was working for the given cases. As usual, I thought I‚Äôd reach out to the recruiter to seek the exact feedback but couldn‚Äôt do so because they were on new year vacation. They asked me to schedule a slot on their calendar that never loaded on my browser. Even today if I open the link, it keeps loading like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-07-stripe-goodtime.jpg&quot; alt=&quot;scheduler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LOL. Not blaming it on them. They might have responded if I had mailed them back with the loading issue, but I lost touch due to their vacations and never contacted them again.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was a good experience with Stripe team. The recruiter was responsive on call/chat/email throughout and ensured timely response. I like their &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/stripe-part-2&quot;&gt;culture of writing&lt;/a&gt; that &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_culture-writing-team-activity-7170322475212374016-UjEc?utm_source=share&amp;amp;utm_medium=member_desktop&quot;&gt;starts from their CTO&lt;/a&gt; - something that everyone should do (if they can). I would have performed better in System Design Interview if this was not my first ever HLD interview but no regrets. Failures are integral to the journey of success üìà.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="stripe" /><category term="interview" /><category term="staff-software-engineer" /><summary type="html">I interviewed for the position of Staff Software Engineer at Stripe in December 2023. They were hiring engineers in the Verification &amp; Identity Platform team.</summary></entry><entry><title type="html">Atlassian Interview Experience</title><link href="https://gagan93.me/blog/2024/05/04/atlassian-interview-experience.html" rel="alternate" type="text/html" title="Atlassian Interview Experience" /><published>2024-05-04T00:00:00+05:30</published><updated>2024-05-04T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/04/atlassian-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/04/atlassian-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-04-atlassian-interview-experience.png&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://logos-world.net/wp-content/uploads/2023/03/Atlassian-Logo.png&quot;&gt;Logo World&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Senior Software Engineer&lt;/strong&gt; at &lt;strong&gt;Atlassian&lt;/strong&gt; in &lt;strong&gt;November 2023&lt;/strong&gt;. This was my first ever experience getting interviewed by a large product organisation. Just to brief about myself and my background - I currently work as a Staff Software Engineer at LocoNav India (2018-present) and have previously worked with Josh Technology Group (2015-2018). You can know more about me &lt;a href=&quot;https://gagan93.me/&quot;&gt;here&lt;/a&gt;. I was not actively looking for a change but thought of giving a try. Having spent ~ 6 years at LocoNav (as of that time), I was completely out of touch with the current market expectations and interview process. Atlassian, just like many other big tech companies takes candidate experience very seriously. So their HR contacted me and explained everything on a 30 minute phone call including my salary expectations. They did not ask my current compensation though (something most of the companies ask). After our call, he sent me a few emails that summarized whatever he explained and had details about the interview process. Apart from this, the email also contained some documents to assist me in preparing (eg. telling what all things I should go through). Overall, it was a very good experience with them.&lt;/p&gt;

&lt;h2 id=&quot;the-rounds&quot;&gt;The rounds&lt;/h2&gt;

&lt;p&gt;Atlassian was hiring aggressively in past 6-8 months for multiple positions (Senior/Principal/Fullstack) and rounds are more or less same for these positions, except 1-2 extra rounds for Principal Engineers. The rounds were as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://karat.com/&quot;&gt;Karat&lt;/a&gt; screening round (coding + Rapid QnA)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data structures round (coding)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Low Level Design round (coding)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;System Design round (diagrammatic mostly)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Values round (discussion)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Management round (discussion)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The same is documented &lt;a href=&quot;https://online.flippingbook.com/view/325478/4/&quot;&gt;here&lt;/a&gt; as a reference for candidates.&lt;/p&gt;

&lt;h2 id=&quot;round-details&quot;&gt;Round details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Karat Screening Round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Karat is an online platform used by companies like Atlassian, to filter candidates after shortlisting the resume. The interviewers are Senior Engineers who are trained for many hours before they start taking interviews. As they have a global pool of interviewers, you can choose any time slot (unlike for other rounds) and they‚Äôll arrange an interviewer for you. My interviewer was an Indian from Hyderabad or Bangalore (don‚Äôt remember exact location). He was very professional and friendly. Because this interview had to cover a lot of things in an hour, he made sure that we do not waste time discussing something specific at length. I remember him introducing himself within 15-20 seconds and then asking me to introduce myself in a minute or less. The format of the round was as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Introduction and explanation of format - 3-4 mins&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5 Rapid fire system design problems (debugging rather than diagramming) - 20 minutes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Two data structure problems (easy, medium) - 30 mins&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because this round was not with a company employee, you do not ask questions about the company in this round. We started with rapid fire system design problems. Here, we do not solve one large problem (like designing Spotify or Google Drive). Rather, we are presented with situations where experience is required to debug a system that is facing problems. I found this much better than the actual System Design round that all the companies take because only practical knowledge can help in debugging such problems. There were five questions, out of which I answered 4 correctly (the passing percentage was 60%, i.e. 3 questions). Just to share a few of them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A system is running very slow (+ some more details about the system). How would you debug this to solve the slowness.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A system is scaling from x to y users (x and y are number of users. What things would you consider to upgrade in your system to ensure smooth scaling?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An electronic system exists for a smart freezer. An external computer system does a processing right now but later we‚Äôre assuming to migrate this code to an internal microcontroller (raspberry pi for example). What things to consider while porting this code?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These questions were easy for me because I had seen systems growing during my role at LocoNav. So I knew the pain points. In this round, the challenge lies in quickly understanding the problem and sharing all potential solutions within 3-4 minutes. With 5 questions to address in just 20 minutes, this means you have approximately 4 minutes per question, including the time taken by them to read out each question. To optimise your chances of success, the Atlassian Talent team recommends requesting the interviewer to refrain from reading the questions aloud, allowing you to read them at your own pace and save valuable time.&lt;/p&gt;

&lt;p&gt;After this, we moved to the data structure problems where the first question was around string manipulation. They use &lt;a href=&quot;https://coderbyte.com/&quot;&gt;Coderbyte&lt;/a&gt; platform to asses the coding part. I chose Ruby language to solve data structures in all the coding rounds I have given because I was most comfortable in Ruby. Unlike Leetcode, the test cases are not large in number and you‚Äôre just expected to pass 5-7 test cases. I don‚Äôt remember the exact problem but I remember that it was an easy one and related to Strings. One thing I remember is that I told wrong complexity when I was asked for the first time, and within 2-3 seconds I figured out and corrected myself. The second question sounded medium level leetcode problem but there was not much time left so I just explained the logic that sounded okayish to him and we concluded.&lt;/p&gt;

&lt;p&gt;I had a chat with my recruiter who told me that I should have qualified as solving one DS problem was the criteria and I had also explained the logic for second one. One bad part here was that he ghosted me for about 2 weeks after this round (didn‚Äôt pick my calls or responded to chat).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Structures Round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After 2 weeks, I got a call from another recruiter within Atlassian who told me that she‚Äôll be taking my candidature forward. She explained that the next two rounds (Data structures and Low level design) would happen on the same day, with a difference of 30-60 minutes in between. Both the rounds were for about 45 minutes (although marked for 1h on Calendar). The data structures round was taken by a Senior Software Engineer who was working with Atlassian Bangalore team for about 2 years. Like the previous round, this guy was also very professional and polite. He explained the problem and started discussing the solution with me. The problem was similar to what is explained &lt;a href=&quot;https://leetcode.com/discuss/interview-experience/1739628/atlassian-sse-remote-reject&quot;&gt;here&lt;/a&gt; (don‚Äôt go into his solution, just read the problem). There were multiple issues at my end due to which I didn‚Äôt move forward from this round:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The question wasn‚Äôt a hard one but I was much less prepared.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While most of the data structure problems are simple to implement with a single method (or maybe 2-3 methods for readability), this problem required classes to solve because he was changed the question twice after initial problem statement and that was only solvable cleanly if we had written a custom comparator in the class (basically tie breaking logic in the comparator).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It seemed like the round mixed DS and OOPs (low level) slightly but that‚Äôs fine. He gave me hints after which I changed my approach, but probably that was a negative point that lead to rejection despite solving it. My implementation:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ballot&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:candidates&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BallotUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BallotUnit&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:weightage&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate_name&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Candidate&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comparable&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:weightages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# override the comparator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runner&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ballot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;candidate_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;candidate_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;candidate_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightage&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Low Level Design Round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this round, I was asked to write complete logic for the &lt;a href=&quot;https://www.google.com/search?sca_esv=58ac0b011cee9c7d&amp;amp;sca_upv=1&amp;amp;sxsrf=ADLYWILxVaKlInE0xUo1vWu1XUaU7ZPEjw:1714822721076&amp;amp;q=nokia+snake+game&amp;amp;uds=ADvngMjdw7-lOP0usjsMlKT3CLljzP00Ul4oFLKOAj9fGL-X8YrXHqfKk07DE1nxWsVjTChlHiOSf6mINDYeCaoPC80kWZL5frydgbHBTjR1-hBeX8_9mae0Jo4tFKDauOj2WZof5WWOTBGjTgfTRsJxhNX76UcXMq2fdnNIDy4XpwoCyddzgAaVdeFZqk8KxQNmT1nBUEup6WozpKo7AidCFu94Pjsc6hAHYEeOUzUUIxciXWD8hb2cykGoSwB7t1TBJoK9aab2T6YSSaZaRtKMkRFsxgudAzOnpozTwyj0JRoV9gxKM_zQwzRvBpfneq80yfWSeQP4&amp;amp;udm=2&amp;amp;prmd=isvnmbtz&amp;amp;sa=X&amp;amp;ved=2ahUKEwjkt5G59POFAxWtd2wGHZxpAXEQtKgLegQIEBAB&amp;amp;biw=1496&amp;amp;bih=812&amp;amp;dpr=2#vhid=vrfGi0KpOSUCsM&amp;amp;vssid=mosaic&quot;&gt;snake game&lt;/a&gt;. The panel comprised of a Senior Software Engineer and a Software Engineer (as a shadower) from the Sydney team. Both were old members of the team. I was somewhat surprised to hear this question because I had read that this was asked by them in 2022 and I thought they won‚Äôt repeat it. The miss on my side is that I didn‚Äôt practice this at all, so it took some time to understand the requirement and start. The expectation was that I‚Äôll write a completely working code and write test cases (or at least discuss the edge cases) within 45 minutes. I later implemented the code in both &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/ruby/snakegame&quot;&gt;Ruby&lt;/a&gt; and &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/java/snakegame&quot;&gt;Java&lt;/a&gt; along with test cases and found that it was quite hard to complete this within the expected time frame. You can read the requirements (Readme in both the links) and the code as well. Do read test cases to understand what scenarios I‚Äôve covered.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;I was skeptical of my performance in these DS and LLD rounds and was quite sure that I won‚Äôt easily pass these. Given the market conditions of Dec 2023 (and even today) where the supply of good engineers is much more than the demand, I was sure that either they‚Äôd reject me or will do the same round again. I called the recruiter after a few days who told me that they‚Äôre not carrying my candidate forward. She was very transparent to read out feedback of both the interviewers on the call. I noted those points to improve upon them before giving further interviews.&lt;/p&gt;

&lt;h2 id=&quot;the-good-and-bad&quot;&gt;The Good and bad&lt;/h2&gt;

&lt;p&gt;The interviews these days do not test if someone can solve a genuine problem within an hour. They basically test if you can solve fast enough, and that is only possible by practising for days and months. I started my first job in 2015, and since then I had not formally prepared for any interview. The recruitment process at LocoNav was not very formal as I joined among the first 5-6 engineers. And having spent 6+ years at LocoNav, I was completely out of touch with the market expectations. Sharing a few good parts and mistakes that I did starting with good parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The interviewer saw my profile on Instahyre and reached out to me. As I knew that I‚Äôm completely unprepared, I took 2 weeks of time for preparation even before the Karat round.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I went through all the docs shared by him religiously and asked more questions to understand each round better.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After years, I started practising data structure problems and solved about 30-40 problems before my first round (mostly easy, medium).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My practical experience at LocoNav eased the preparation for LLD and HLD rounds (although I didn‚Äôt attain the required speed because that needs more practice).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now coming to some bad parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I didn‚Äôt spend time in checking existing questions asked by them. Later I googled more and found that Atlassian is one of the companies that is known to repeat questions many times. One should always spend time in checking previously asked questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I should have taken about a month to prepare because my practice was not enough. I was shy to ask for more time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Was I discouraged by the rejection&lt;/em&gt;? Yes (for a few days). But I applied in more companies and faced more rejections that helped in building my confidence. You might feel like you have practised enough, but that 1 hour of time with the interviewer is very different. The mental pressure leads to drop in confidence due to which you go in wrong direction and end up wasting time. The only way to solve this is to give more interviews and learn to be comfortable.&lt;/p&gt;

&lt;p&gt;Atlassian was not my dream company but I have been using JIRA and confluence for years and I admire their products. I‚Äôm a JIRA administrator at LocoNav and my exposure has been far beyond the typical developer‚Äôs usage. The good point about Atlassian was a remote role with handsome compensation. It is known to offer perks similar to FAANG companies (check their Bangalore office). But the bad part (heard recently) is that they revoked PPO for freshers and &lt;a href=&quot;https://www.teamblind.com/search/Atlassian&quot;&gt;have also been putting many engineers on PIP recently&lt;/a&gt;. Looks like they‚Äôve over-hired like many other companies :) Another thing that seemed off to me was that I got in touch with multiple people working at Atlassian (including the Data structures round interviewer) and all of them were working on the same thing - &lt;strong&gt;Cloud migration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Atlassian still remains a dream organisation for many (thanks to didis and bhaiyas who keep uploading office tour videos). I‚Äôll be sharing more interview experiences in next few weeks. Thanks for reading and good luck if you‚Äôre looking for a change.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="atlassian" /><category term="interview" /><category term="senior-software-engineer" /><summary type="html">I interviewed for the position of Senior Software Engineer at Atlassian in November 2023. This was my first ever experience getting interviewed by a large product organisation. Just to brief about myself and my background ..</summary></entry><entry><title type="html">Titles, Inflation and Down-levelling</title><link href="https://gagan93.me/blog/2024/04/19/titles-inflation-downlevelling.html" rel="alternate" type="text/html" title="Titles, Inflation and Down-levelling" /><published>2024-04-19T00:00:00+05:30</published><updated>2024-04-19T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/04/19/titles-inflation-downlevelling</id><content type="html" xml:base="https://gagan93.me/blog/2024/04/19/titles-inflation-downlevelling.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-04-19-title-inflation-downlevelling.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-jason-strull-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jasonstrull?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Jason Strull&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/man-holding-his-head-while-sitting-on-chair-near-computer-desk-KQ0C6WtEGlo?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;If you‚Äôre confused about career ladders in different organisations, then this post will help you understand semantics of job titles (or job roles, or designations, or levels). There are many stories out there where people switch from a large service-based company to a product company (or one of the FAANG companies) where their titles are different or down-levelled. If you don‚Äôt have this understanding, you might think - &lt;em&gt;Why would someone move from a current role of Tech lead to a Senior Software Engineer&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;understanding-titles&quot;&gt;Understanding Titles&lt;/h2&gt;

&lt;p&gt;Titles are not standard across companies. And the reason is very obvious - you could open your own company and call yourself a Director/CEO. That might not have any significance unless you have some clients who pay you for the services you provide. As the company grows, you hire more people and/or get more customers. Only then the titles start making some sense. Applying the same example to the scenario where you might join a small company as a Founding engineer/Lead Engineer/VP of Engineering. Here, your initial title doesn‚Äôt matter because people in startups are &lt;a href=&quot;https://emeritus.org/blog/career-generalist-vs-specialist/&quot;&gt;generalists&lt;/a&gt;: You might be a Software developer by title but at times you could also be setting up servers, doing testing, and even doing customer support. Startups have flat hierarchy where most of the employees are less focussed on titles and more focussed on the mission.&lt;/p&gt;

&lt;p&gt;On the other end of this spectrum, we have medium to large organisations where leadership defines specific designations and salary bands. Here, people are very much concerned about their titles because their work and pay aligns with their bands. But that doesn‚Äôt mean that a Senior Engineer in one big tech does the same work and gets the same pay as the one working in another big tech. Although titles have a range of pay and not everyone on same title gets the same salary (even in a single company) but I hope you get what I‚Äôm saying - work and pay differs across companies. This is due to the variations in leadership styles, the complexity of work, and the specific skill sets and experience levels needed to attain a particular job title across different companies.&lt;/p&gt;

&lt;p&gt;The closest example in this concern is of my own. I work as a &lt;strong&gt;Staff Engineer&lt;/strong&gt; at &lt;a href=&quot;https://loconav.com/&quot;&gt;LocoNav&lt;/a&gt; that has a small engineering team of ~ 100 people. The complexity of my work is not at par with someone who is a &lt;strong&gt;Staff Engineer&lt;/strong&gt; at Google, Stripe, or Meta. So if I had to compare myself with a title in such companies, the closest one that aligns is of a &lt;strong&gt;Senior Software Engineer&lt;/strong&gt;. But the question is - how did I infer this, and how you can do the same for yourself?&lt;/p&gt;

&lt;h3 id=&quot;understanding-levels&quot;&gt;Understanding levels&lt;/h3&gt;

&lt;p&gt;If you want to understand where you currently are w.r.t big tech organisations, simply search something like ‚ÄúGoogle Software Engineer levels‚Äù (or Meta, or Uber). There are many articles already written by ex-employees that describe the responsibilities and expectations of each level. You can match the same with your current responsibilities and understand your level. This is helpful, specially if you‚Äôre targeting a role at that company.&lt;/p&gt;

&lt;p&gt;I hope the above explains something around titles.&lt;/p&gt;

&lt;h2 id=&quot;what-is-title-inflation&quot;&gt;What is Title Inflation?&lt;/h2&gt;

&lt;p&gt;There are some organisations that have a defined career ladder but you get promoted to the next level sooner. As an example, I‚Äôve seen people in small companies that have title of &lt;strong&gt;Principal Engineer&lt;/strong&gt; which is a really senior technical position if we compare the same title to people in large organisations. This is majorly for two reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Although the median tenure in the industry for software developers is ~ 4 years, there are people who do not change job for a 8-10 years. Organisations create new positions for such people so that they can be promoted (I‚Äôve seen this myself). In small teams, people with ~ 10 years of experience could be Principal Engineers, while large organisations usually consider people in the range of 12-15 years eligible for this position (although exceptions are always there).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes, organisations &lt;a href=&quot;https://en.wikipedia.org/wiki/Job_title_inflation&quot;&gt;inflate your title&lt;/a&gt; in order to retain you when you quit. This may or may not include a hike in your pay (based on your negotiation) but moves you to the next level. Not debating if this is right or wrong, fair or unfair but it is what it is :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second scenario is a typical case of title inflation. Advancing to the next level can boost your confidence, but it might not benefit you in the long term, especially if your current skills don‚Äôt align with that level. This situation could even lead to being down-levelled in your next position.&lt;/p&gt;

&lt;h2 id=&quot;down-levelling-explained&quot;&gt;Down-levelling explained&lt;/h2&gt;

&lt;p&gt;As the name suggests, it‚Äôs like getting a demotion (moving to a lower level). We need to understand when it actually concern us:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre in the same organisation and you‚Äôre getting down-levelled, then it might be a serious concern. You can talk to your manager to understand why this happened. If this is due to some performance concerns, then you might already be expecting this. Incase there is a major restructuring happening in the organisation and all the job roles are being redefined, this might be fine. It all depends on the situation and how you negotiate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre moving to some other organisation, you must learn about their levelling (as already explained above). If you are getting down-levelled while changing the organisation, it might not be wrong because of different role expectations in the next organisation. Although in all cases, you must negotiate with the hiring manager and understand the expectation of next level to see if you can move to the next it :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this clears up any confusion about different companies and their job titles.&lt;strong&gt;.&lt;/strong&gt; It‚Äôs mostly about the organisation, their expectations, and their team‚Äôs size that defines the levels. If you‚Äôre moving to a different organisation and are being considered at a lower level, don‚Äôt get sad. Understand their job role expectations. At the same time, if you feel that you meet the expectations of a higher level, never settle for less.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="title" /><category term="title-inflation" /><category term="downlevelling" /><category term="interview" /><summary type="html">If you're confused about career ladders in different organisations, then this post will help you understand semantics of job titles (or job roles, or designations, or levels). There are many stories out there where people switch from a large service-based company...</summary></entry><entry><title type="html">Cloud, SaaS Cost Reduction</title><link href="https://gagan93.me/blog/2024/03/21/cloud-saas-cost-reduction.html" rel="alternate" type="text/html" title="Cloud, SaaS Cost Reduction" /><published>2024-03-21T00:00:00+05:30</published><updated>2024-03-21T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/03/21/cloud-saas-cost-reduction</id><content type="html" xml:base="https://gagan93.me/blog/2024/03/21/cloud-saas-cost-reduction.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-03-21-cloud-saas-cost-reduction.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-ussama-azam-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@ussamaazam?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Ussama Azam&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/pink-arrow-neon-sign-26h317_UMYM?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Reducing spend on SaaS tools is a continuous effort. At LocoNav, we keep a strict eye on such expenses and spend some time every now and then to make sure we‚Äôre not paying extra for any service. In the past 1.5 years, we planned and executed a lot of tasks to reduce our spends. This included what we pay to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Cloud platforms,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Observability platforms,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Collaboration platforms,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And other SaaS tool (eg. we use location related services heavily in our products as we‚Äôre a &lt;a href=&quot;https://loconav.com/&quot;&gt;fleet management product&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This task was taken up by multiple people including myself and we had to figure out our usage of each tool in a way that we can either optimise them or (possibly) replace them. So the thought process was broken into these categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unused resources&lt;/strong&gt; - Are there unused resources lying that can be freed to save some üí∞? This includes unused Github seats, a server that was mistakenly left running, a disk volume that‚Äôs lying unattached after terminating a machine, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Optimising Data volume&lt;/strong&gt; - Are there tools where we could send less data without impacting the usage? For example, you can control how much data is sent to APM tools and save some cost here because general trend still remains (almost) same and they bill you for the amount of data you send.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Finding alternative tools&lt;/strong&gt; - Are there tools that can be replaced with cheaper or open source (self-hosted) alternatives?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Architectural optimisations&lt;/strong&gt; - Can we plan short term and long term architectural changes that would help us save cost? We knew a few things that could be architected better. So we prioritised tasks in a way that have high ROI in the short term were picked first while others were parked for the long term.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above thought process looks very structured. Frankly, we did not start like this but this is how it eventually turned out to be.&lt;/p&gt;

&lt;h2 id=&quot;figuring-out-everything&quot;&gt;Figuring out everything&lt;/h2&gt;

&lt;h3 id=&quot;unused-resources&quot;&gt;Unused resources&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SaaS platforms&lt;/strong&gt; - Most of the SaaS applications have pricing based on no. of users. While onboarding new team members is a usual activity and happens sooner or later, but it‚Äôs equally important to offboard them once they leave. In small teams, this leak often remains undetected for months. Beyond cost, this could have other risks unless the user logs in through SSO. So make sure to deactivate accounts and free those seats when users leave. It might have a small impact on monthly bills but it is important to have a complete list of apps where you need to deactivate user accounts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cloud platforms&lt;/strong&gt; - It‚Äôs hard to accurately understand and justify cloud spends but members of the team should still have an idea on how many databases, virtual machines and other cloud resources they‚Äôre using. If you have a single cloud account that multiple teams use, I‚Äôd recommend you to &lt;a href=&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html&quot;&gt;tag the resources&lt;/a&gt; used by respective teams. Once done, it becomes easy to discuss and optimise the cost for each team. Beyond this, you could figure out things that are not used or could be combined. For example, we figured out and did all this:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Buckets&lt;/strong&gt; - Check unused S3 buckets and deleted them. Modified storage class for a few of them and set intelligent tiering to a few.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;EC2/EBS&lt;/strong&gt; - We moved to EKS for many apps so we deleted &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html&quot;&gt;AMIs&lt;/a&gt; for those apps, that helped us free up a lot of space used by snapshots. Apart from this - basic optimisation like deleting unused machines that were left mistakenly, checking instance usage and resizing machines were also done.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Merging few deployments&lt;/strong&gt; - There were a lot of small projects (both internal and customer facing) which used individual databases, caches and machines. We consolidated databases for a lot of internal tools on a single RDS that still didn‚Äôt peak to even 50% of CPU after combining. Thankfully all our relational use cases are on Postgres that helped in this consolidation (read about &lt;a href=&quot;https://blog.gagan93.me/avoid-redundant-complexity&quot;&gt;embracing simplicity&lt;/a&gt;). This was planned for some other projects also that were customer facing but very much related to each other and could be combined.
 Note: Don‚Äôt overdo this as this has one potential downside - incase you upgrade this RDS in future in a way that it needs a downtime, you‚Äôd need to take downtime on all the apps that use this RDS.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;optimising-data-volume&quot;&gt;Optimising data volume&lt;/h3&gt;

&lt;p&gt;Before understanding what we optimised, I‚Äôll share some background on data transfer (ingress and outgress) costs. Data transfer is one of the most trickiest component in a cloud provider‚Äôs bill. For many managed resources, you pay for the amount of data transferred through them (apart from the basic cost of running them). &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/pricing/&quot;&gt;AWS load balancer&lt;/a&gt; is a perfect example of this where you pay a monthly cost of using it and another cost for the amount of data transferred. Even beyond this, if the data goes out to the public internet (outside AWS) or a &lt;a href=&quot;https://aws.amazon.com/about-aws/global-infrastructure/regions_az/&quot;&gt;different region&lt;/a&gt;, you get charged extra. The data transfer cost is negligible for personal projects / small apps but it becomes a considerable part of your bill if your apps have a lot of data flowing outside the AZ/Region. The point is - how do I know if the data goes out of cloud provider ü§î? The answer is not so simple and it varies from &lt;a href=&quot;https://babatrucks.atlassian.net/browse/INTAKE-7424&quot;&gt;one provider&lt;/a&gt; to &lt;a href=&quot;https://azure.microsoft.com/en-in/pricing/details/bandwidth/&quot;&gt;another&lt;/a&gt;. As a thumb rule, assume you‚Äôll be charged for data if:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It goes out of your AZ (availability zone) or region.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You connect to a service that runs on another cloud provider (or generally on public internet).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Coming back to optimising data volume - We use Datadog for Application Performance Monitoring (APM). Some of our large applications send a lot of data to Datadog. If you check their &lt;a href=&quot;https://docs.datadoghq.com/account_management/billing/pricing/#apm&quot;&gt;APM billing&lt;/a&gt;, you‚Äôll realise that they consider &lt;em&gt;amount of spans ingested&lt;/em&gt; for charging the user. Because the data can be very large for mid-large applications, they give an &lt;a href=&quot;https://docs.datadoghq.com/tracing/guide/ingestion_sampling_use_cases/#reducing-ingestion-for-high-volume-services&quot;&gt;option to control&lt;/a&gt; how much percentage of data we want to sample. This reduces costs in two ways: data received at the APM layer is lower (hence less bill) and data emitted from our system is also less (hence less transfer charges). Here, the data transfer cost would impact us only if Datadog‚Äôs infrastructure is deployed in a different AZ/Region/Cloud provider. As of March 2023, when someone &lt;a href=&quot;https://www.linkedin.com/pulse/datadog-outage-multi-cloud-reliability-dylan-ratcliffe/&quot;&gt;unofficially investigated&lt;/a&gt; Datadog‚Äôs outage, he found out that Datadog uses multi-cloud deployment strategy, i.e. they deploy in AWS, Azure and GCP. So you can believe that your data is most probably going out of the cloud provider.&lt;/p&gt;

&lt;p&gt;For your apps - If you start with this basic knowledge of ‚Äòhow your cloud provider charges for data transfer‚Äô, you can optimise a few things on the bill üòÄ.&lt;/p&gt;

&lt;h3 id=&quot;finding-alternative-tools&quot;&gt;Finding Alternative tools&lt;/h3&gt;

&lt;p&gt;This was a medium-hard problem because shifting people to a new tool is hard. Being a team of ~ 100 software engineers, we use a lot of industry standard tools like APM tools, error trackers, server and website monitoring tools, communication tools and what not. We moved from NewRelic to Datadog for APM back in 2021 (due to cost reasons) and I remember the switch was not easy. While both are very good tools and best in industry, we were habitual of using NewRelic for debugging our slowness and outage cases. It took some time to adjust to Datadog‚Äôs features and UX and now we find it quite useful to debug such cases (specially the &lt;a href=&quot;https://docs.datadoghq.com/monitors/types/watchdog/?tab=apm&quot;&gt;Watchdog&lt;/a&gt; feature üëå). Still we tried to find alternate platforms for whatever was possible to replace and started using &lt;a href=&quot;https://www.getoutline.com/&quot;&gt;this tool&lt;/a&gt; for documentations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can you also do this ? -&lt;/strong&gt; It depends on how much your team is flexible in moving to the new tool. It also depends on the pricing model of your current tool. Like if you‚Äôve already committed or paid for next few months or an year, then you could defer the plan to move. But always try to use tools that allow exporting data into common (non-proprietary) formats. For example, although JIRA is a industry standard tool for managing team sprints, there is &lt;a href=&quot;https://community.atlassian.com/t5/Jira-Software-questions/How-to-export-Jira-issues-to-CSV/qaq-p/175115&quot;&gt;no way to export all the issues&lt;/a&gt; as CSV. The best answer on this community post allows to export max 1000 issues at once. Although importing data to JIRA is easy and explained &lt;a href=&quot;https://support.atlassian.com/jira-cloud-administration/docs/migrate-from-other-issue-trackers/&quot;&gt;here&lt;/a&gt; ü§ì.&lt;/p&gt;

&lt;h3 id=&quot;architectural-optimisations&quot;&gt;Architectural optimisations&lt;/h3&gt;

&lt;p&gt;These optimisations majorly depend on your own project. For medium-large projects that are live in production from years, the teams are already aware of tech debt and architectural debt. Beyond debt, there could be technological advancements that you can leverage. As an example, Redis is a popular in-memory key-value database. The initial version of Redis was released almost 15 years ago. While there have been a lot of changes and features additions even recently, the basic architecture of command processing remains the same - a single threaded command execution thread. Don‚Äôt underestimate the speed of Redis after reading &lt;em&gt;single threaded.&lt;/em&gt; While Redis works well for applications of all sizes, there have been a lot of choices now, as Paypal open sourced it‚Äôs &lt;a href=&quot;https://github.com/paypal/junodb&quot;&gt;key value store&lt;/a&gt;, a team of developers released a new key value database called &lt;a href=&quot;https://www.dragonflydb.io/&quot;&gt;Dragonfly&lt;/a&gt; and Microsoft introduced &lt;a href=&quot;https://www.microsoft.com/en-us/research/blog/introducing-garnet-an-open-source-next-generation-faster-cache-store-for-accelerating-applications-and-services/&quot;&gt;Garnet&lt;/a&gt; this week. Not everyone wants to move their existing systems to new (promising) databases and you should actually never do that, but I was surprised to see a very stable and &lt;a href=&quot;https://github.com/sidekiq/sidekiq/commit/250cc1e4dde44e84d9b607a2ded84ec0835a3ef1&quot;&gt;popular Ruby library&lt;/a&gt; offering choice between Redis and DragonflyDB as a queueing backend for background jobs üòÉ.&lt;/p&gt;

&lt;p&gt;Developers rewrite systems all the time, but that choice is not always available. Even when allowed, large rewrites often fail to replace existing (stable) systems due to one or the other reason. To optimise our costs, we tried to rewrite parts of the systems that we were sure of. Some infrastructure changes also helped us save cost but that impacted our architecture and also how our team debugs production issues. We tried and did the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We moved a lot of our applications to Kubernetes cluster. The apps were tested for more than an year on non production environments before moving. Using a combination of AWS on-demand and spot instances clubbed with Kubernetes‚Äô &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;HPA&lt;/a&gt;, we were able to save on cloud costs. Spot instances helped us using same infra on a cheaper price, while some on-demand nodes balanced out for stability. HPA allowed us to turn off pods when load on the system was less (eg. at night).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We planned, tested and moved our ruby application server from a single threaded (&lt;a href=&quot;https://github.com/phusion/passenger&quot;&gt;passenger&lt;/a&gt;) to multi-threaded (&lt;a href=&quot;https://github.com/puma/puma&quot;&gt;puma&lt;/a&gt;). We had to validate thread safety of our code and third party libraries before doing this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We refactored our &lt;a href=&quot;https://github.com/sidekiq/sidekiq&quot;&gt;background job server&lt;/a&gt; setup to lesser number of queues that simplified our deployment one EC2 and eventually on k8s. This also helped in saving cost as pods were getting utilised to their maximum extent and HPA scaling pods up and down as needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other optimisations included rewriting a few systems, details of which cannot be shared (and also won‚Äôt be helpful to anyone). These were mostly long term optimisations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This was by no means a single person‚Äôs work. A lot of senior engineers and devops collaborated to plan and execute all these activities but the gains were rewarding and for the long term. These are recurring bills, so saving even $500 a month means saving $6000 annually. After seeing all these optimisations, I often think - &lt;em&gt;were we really wasting this much money per month&lt;/em&gt; ü§î? The answer for this might depend on the team/company. In a growing team, such scenarios often happen. New teams, new projects, new deployments can lead to some inefficiencies over time. Regular consolidations and some approval flow from centralised teams can help in reducing this. For teams that have dedicated people for optimising costs and ensuring efficient use of resources, these instances should be minimum. If you‚Äôre a team that has not yet focussed on optimising such costs, do try a few things mentioned here.&lt;/p&gt;

&lt;h1 id=&quot;bonus&quot;&gt;Bonus&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Budget alerts&lt;/strong&gt; - Many platforms allow setting alerts on user defined thresholds (&lt;a href=&quot;https://docs.github.com/en/billing/managing-billing-for-github-actions/managing-your-spending-limit-for-github-actions&quot;&gt;example 1&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/aws-cost-management/aws-budgets/&quot;&gt;example 2&lt;/a&gt;). You can set these up to catch anomalies in costs. We have some of these setup that often help us.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dedicated ownership -&lt;/strong&gt; Software teams rely on many tools. As the team grows, it‚Äôs hard for one person to keep a track of everything. At the same time, keeping a basic check on costs and anomalies doesn‚Äôt require a lot of expertise. If you assign some people to dedicatedly monitor some tools, it will not burden anyone and will ensure catching such leaks early.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Continuous monitoring&lt;/strong&gt; - In the past, we use to ignore a lot of platforms and were optimising only cloud bills. This was our first mistake as other bills were not negligible. Second mistake was to check for optimisations only a month before our reservations expired. Cost optimisation is not an annual activity. We should be continuously monitoring these costs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading. I hope this would help you to optimise some SaaS cost for your organisation. If you liked this post, do check out the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure your stack is &lt;a href=&quot;https://blog.gagan93.me/cloud-pricing-vendor-lock-ins&quot;&gt;not vendor locked-in&lt;/a&gt; if you want flexibility of moving out in future (or maybe otherwise also)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A detailed post on &lt;a href=&quot;https://blog.gagan93.me/optimising-docker-builds&quot;&gt;optimising docker build time and build size&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Working in a team requires asking for help every now and then. Learn &lt;a href=&quot;https://blog.gagan93.me/asking-good-questions&quot;&gt;how to ask good questions&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gagandeep Singh</name></author><category term="cloud" /><category term="saas" /><category term="pricing" /><category term="optimisation" /><summary type="html">Reducing spend on SaaS tools is a continuous effort. At LocoNav, we keep a strict eye on such expenses and spend some time every now and then to make sure we're not paying extra for any service. In the past 1.5 years, we planned and executed a lot ...</summary></entry><entry><title type="html">Developing From Scratch: 2016 vs. now</title><link href="https://gagan93.me/blog/2024/03/15/developing-from-scratch-2016-vs-now.html" rel="alternate" type="text/html" title="Developing From Scratch: 2016 vs. now" /><published>2024-03-15T00:00:00+05:30</published><updated>2024-03-15T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/03/15/developing-from-scratch-2016-vs-now</id><content type="html" xml:base="https://gagan93.me/blog/2024/03/15/developing-from-scratch-2016-vs-now.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-03-15-developing-from-scratch.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-brandspeople-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@brandsandpeople?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Brands&amp;amp;People&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/person-writing-on-white-paper-Ax8IA8GAjVg?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;One year into the industry, I wasn‚Äôt sure if I knew enough about full-stack software development. I was working on a maintenance project, where we were mostly scaling down the system, doing small bug-fixes, doing a lot of debugging and writing a little bit of new code. I visited my college in 2016 where I met some juniors and the placement head. I discussed the idea of creating an Alumni website for our college because no such connection existed between the college and it‚Äôs alumni. While I was into full-stack development but I didn‚Äôt like doing frontend a lot. So I discussed the idea with my friend &lt;a href=&quot;https://www.linkedin.com/in/ekas/&quot;&gt;Ekas&lt;/a&gt; (a year junior to me and just out of college) and we both started working on it. This was completely out of fun, not for profit project. This was our tech stack at that time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Backend&lt;/strong&gt; - Ruby on Rails,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Frontend&lt;/strong&gt; - JQuery/Bootstrap,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt; - MySQL (all user data), Redis (for some caching, probably redundant),&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cloud provider&lt;/strong&gt; - Linode (Reason: Non fancy platform &amp;amp; straight forward billing),&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Issue tracker&lt;/strong&gt; - Trello,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Version control&lt;/strong&gt; - Gitlab initially (now Github, &lt;a href=&quot;https://github.com/gagan93jtg/gtbit_alumni/&quot;&gt;source code&lt;/a&gt;),&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt; - Gmail/Whatsapp,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain&lt;/strong&gt; - Godaddy,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CDN&lt;/strong&gt; - Cloudflare (Wasn‚Äôt needed, but I needed a free SSL Cert that they provided).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Like many other side projects, the stack was pretty straight forward - We chose what the best we knew. For example, if I knew about &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncrypt&lt;/a&gt; for SSL certificate, I‚Äôd not have used Cloudflare because CDN was not required at that time.&lt;/p&gt;

&lt;h2 id=&quot;developing-something-in-2024&quot;&gt;Developing something in 2024&lt;/h2&gt;

&lt;p&gt;In past 8 years, software landscape has seen major changes. And with recent advancements in AI, we‚Äôre able to write code faster. Many low-code and no-code tools are also available if you need to build simple things (even beyond static websites). For example, I had to revamp my portfolio website from &lt;a href=&quot;https://gagan93.me/v2/&quot;&gt;this&lt;/a&gt; to &lt;a href=&quot;https://gagan93.me/&quot;&gt;current&lt;/a&gt; two months ago. It took me just a few hours to create the current version because the skeleton and design was &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_some-good-prompts-on-chatgpt-helped-me-revamp-activity-7145825841346674688-4ssY&quot;&gt;generated by ChatGPT&lt;/a&gt;. As recent as this week, &lt;a href=&quot;https://www.youtube.com/watch?v=AgyJv2Qelwk&quot;&gt;Devin is released&lt;/a&gt;, who is world‚Äôs first AI Software Engineer (although a bold claim to make).&lt;/p&gt;

&lt;p&gt;Given all the improvements over time, let‚Äôs discuss the choices we have if you are (or even I am) developing an MVP or side project today:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Backend&lt;/strong&gt; - Although my major backend experience has been in Rails and it will be a biased opinion if I say Rails is faster to develop than any other framework. But I‚Äôve seen many people and organisations use Rails to quickly build MVPs. So if I was building something that really needs a complete dynamic and full-stack website of it‚Äôs own (with UI), I‚Äôd still prefer Rails. If there‚Äôs a simpler requirement where I just need to develop APIs on the backend, and frontend is a mobile platform, I might be inclined to use serverless platform to start with. Reason for choosing serverless is simple - the deployment strategies are simpler and I‚Äôd pay for the time I‚Äôm using the backend, rather than running servers full-time. &lt;a href=&quot;https://docs.rubyonjets.com/&quot;&gt;Ruby on Jets&lt;/a&gt; is one such option if you‚Äôre a Rails developer. It‚Äôs just a wrapper over AWS Lambda, Gateway and databases. You can also use Lambda directly rather than using this fancy wrapper, and write your functions in Java, NodeJS, Python, Go and other &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported&quot;&gt;platforms supported by Lambda&lt;/a&gt;. Another stack is very popular these days that uses Google Cloud services like Cloud functions as backend, Firestore as a NoSQL database. If you‚Äôre planning to use AWS, you might want to consider serverless databases like &lt;a href=&quot;https://aws.amazon.com/rds/aurora/serverless/&quot;&gt;Aurora Serverless&lt;/a&gt; (for SQL) and &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2023/11/amazon-elasticache-serverless/&quot;&gt;Elasticache Serverless&lt;/a&gt; (for Redis/Memcached) or the famous &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;DynamoDB&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Frontend&lt;/strong&gt; - In the past 4-5 years, I‚Äôve worked quite less on the frontend side. My project‚Äôs frontend is in ReactJS and I‚Äôve never written code in it. For some internal portals and for my personal portfolio, I still get to work on HTML, CSS (sass), Bootstrap and Jquery. If I get someone to handle the frontend part, I might want to use React/Next/Vue on the frontend side with a modern CSS framework like Tailwind. But if I‚Äôm handling the frontend myself, I‚Äôd still use the old stack. It‚Äôs not that I don‚Äôt want to learn something new, but because I‚Äôd prioritise delivery speed over anything for the MVP. This is the single most important thing to consider when building MVP. &lt;strong&gt;Unless there‚Äôs a significant speed boost in using a new technology, don‚Äôt run towards it while validating your idea/product.&lt;/strong&gt; AFAIK, if I use a modern framework and write code in Typescript, I‚Äôd need a transpiler like webpack to convert it into JS code before deploying. And I‚Äôd not want to &lt;a href=&quot;https://blog.gagan93.me/avoid-redundant-complexity&quot;&gt;add more complexity&lt;/a&gt; in the beginning unless it‚Äôs worth.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Deployment / Hosting -&lt;/strong&gt; If you plan to use cloud functions / lambdas for your backend, you might not need any place to host your server. Your code could be deployed easily by the UI provided by the platform. Incase you‚Äôre still need to run your app server on a virtual machine, there are a few options like&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Deploying app directly on VM.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Deploying app as a container on VM (behind Nginx proxy maybe)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Deploying app as a container on managed platform (like AWS ECS)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Deploying app as a container on orchestration platform (like AWS EKS)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;If you don‚Äôt have experience with Docker or Kubernetes, just use the first option. it‚Äôs like deploying app on the server in the same way you‚Äôd setup on your local machine (with minimal differences). If you have experience with Docker and Kubernetes, still prefer to choose a service that‚Äôs cheap to start with. For example, you don‚Äôt need a full-blown EKS cluster to start with as it would cost $70-75 per month just to have the cluster running (while you could get a t4g.xlarge [4CPU / 16GB] machine in that cost). Given my expertise with containers and ease of deployment, I‚Äôd prefer 2nd or 3rd option.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt; - I see a lot of new folks preferring NoSQL databases for all kinds of use cases. All new shiny tech looks good unless you fall face operational complexities. That being said, I‚Äôd prefer SQL database if following conditions are satisfied:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;The requirements enforce some relation between the entities (that can be easily modelled as foreign keys).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The data is not just append only (i.e. it probably needs updation).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;There are (probably) transactional requirements.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Even if 2/3 are true, it makes sense to use an SQL database. If not, you can go for a NoSQL database. There are many choices in both of these, which are already discussed in the first point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cloud Provider&lt;/strong&gt; - If you‚Äôre having experience with any cloud provider and understand their billing well, choose them blindly (just kidding). Cloud billing is the most complex thing ever invented by these guys. I‚Äôve seen people struggling on their personal account (with their own credit card) when they‚Äôre not able to understand what they‚Äôre getting billed for. Even if you sit with your project‚Äôs Devops team and ask them to explain the components of this month‚Äôs bill, I bet there will be parts they can‚Äôt explain completely. Discussing cloud bills is a complete topic on it‚Äôs own and the subject is so complex that there are dedicated companies that help you lower your cloud bill (eg. &lt;a href=&quot;https://www.duckbillgroup.com/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.builder.ai/builder-cloud&quot;&gt;2&lt;/a&gt;). So if you have experience using AWS and you either understand their billing, or at least know how you can terminate everything and remove your credit card, then choose that provider. For your use case (i.e. an MVP), there won‚Äôt be huge difference in cloud costs. If you don‚Äôt have experience with cloud providers, do one of the following:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Choose any one provider, learn how to setup budget alerts and remove your credit card if something goes out of hands.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Find a dead simple one - I chose Linode because I had used it in my project and they gave only one service (plain unix VM). There was no additional service provided by them (like machine images, container hosting, security groups, load balancers) and hence billing was very simple. The server I ran back in 2016 costed me $10 per month (nothing more, nothing less).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Issue tracker&lt;/strong&gt; - Use anything that‚Äôs free. You could even use google sheets to keep things simple.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt; - Whatsapp has grown into a very nice communication tool but nothing beats a tool like Slack üòç. I just checked that they provide a free plan with limited features and 3 month message history. If that works for you, spin a new slack instance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Version control&lt;/strong&gt; - Github is a popular choice here. I‚Äôd happily use it because they now allow private repos for free. So incase you‚Äôre building something that could grow into a paid product later, you‚Äôd want to keep your code private. I‚Äôve used Gitlab and bitbucket also. Almost all of them support CI/CD setup incase you‚Äôre looking to have that for your project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain&lt;/strong&gt; - You need a domain for your project unless you‚Äôre happy hosting as a subdomain of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.herokuapp&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.netlify&lt;/code&gt; . I have a few domains and I find Godaddy cheap for domains. You can compare providers and see whatever works for you. There‚Äôs nothing special with domain providers. There are ways to migrate from one provider to another (it takes 1-2 days) if you need to do that in future. Also, you can move DNS management (that routing thing) to some other provider if you want. So in my organisation, we have DNS on AWS Route 53 while domain management is with Godaddy. That‚Äôs doable if you need to do that in future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CDN&lt;/strong&gt; - I think to start with, I won‚Äôt need it unless I‚Äôm creating paid videos for my DSA/System Design course ü§£ (jokes apart: because videos are static resources that could be served fast using a CDN). If we need a CDN, we can choose between popular ones like Akamai, Cloudflare or AWS Cloudfront. I don‚Äôt have any strong opinions here.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More things? Of course, we did not talk about Load balancers, API Gateways, Firewalls and many other components. In most of the cases, you won‚Äôt need them when starting up. The idea was to outline the choices available today vs those available back then. There were lesser cloud providers with fewer services, Docker was fairly new, managed docker services were limited, and Linode was dead simple (and not owned by Akamai). While choosing your stack, just make sure you‚Äôre not too much locked into one provider. For example, while Google‚Äôs stack sounds simple and cheap to begin with, you‚Äôll be locked with it completely if you build on it. It‚Äôs not impossible to migrate but it could be hard or expensive. Another example could be of AWS RDS - If you‚Äôre using a Postgres/MySQL database hosted on RDS, that doesn‚Äôt completely lock you with AWS as Postgres could be self hosted outside AWS also. But if you use something like DynamoDB, then you can‚Äôt move outside AWS unless you find an alternative, change your code and move all your data to the new datastore. If you write your code in a modular fashion and follow good design patterns (like a &lt;a href=&quot;https://refactoring.guru/design-patterns/facade&quot;&gt;facade&lt;/a&gt; over the classes that interact with DynamoDB), you could easily switch to new database. But if your code is coupled deeply, it could take time to refactor everything and &lt;a href=&quot;https://blog.gagan93.me/cloud-pricing-vendor-lock-ins&quot;&gt;take yourself out from AWS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As software developers, we often face &lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;imposter syndrome&lt;/a&gt; and feel like we don‚Äôt know nothing beyond our company projects. Building something in parallel could be a way to sharpen your skills and increase confidence. If you have time, you can build something in a new tech stack. If not, feel free to choose your existing stack and build it. Sadly, I got too busy with my work that I did not spare enough time to build anything else like the Alumni website. But thankfully I started writing last year and I enjoy that (I hope you too enjoy reading the blogs üòä).&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="Development" /><category term="Scratch" /><category term="BuildingAndLearning" /><summary type="html">One year into the industry, I wasn't sure if I knew enough about full-stack software development. I was working on a maintenance project, where we were mostly scaling down the system, doing small bug-fixes, doing a lot of ...</summary></entry><entry><title type="html">Devops Essentials for Developers</title><link href="https://gagan93.me/blog/2024/03/05/devops-essentials-for-developers.html" rel="alternate" type="text/html" title="Devops Essentials for Developers" /><published>2024-03-05T00:00:00+05:30</published><updated>2024-03-05T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/03/05/devops-essentials-for-developers</id><content type="html" xml:base="https://gagan93.me/blog/2024/03/05/devops-essentials-for-developers.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-03-05-devops-servers.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-taylor-vick-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@tvick?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Taylor Vick&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/cable-network-M5tzZtFCOfs?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;There are multiple definitions of the term &lt;strong&gt;DevOps&lt;/strong&gt; throughout the industry. I‚Äôll share a few and then we‚Äôll discuss more on them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Philosophical definition (by AWS)&lt;/strong&gt;: DevOps is the combination of cultural philosophies, practices, and tools that increases an organisation‚Äôs ability to deliver applications and services at high velocity: evolving and improving products at a faster pace than organisations using traditional software development and infrastructure management processes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;In relation to code&lt;/strong&gt;: DevOps involves some coding, but it‚Äôs not primarily about writing code. It‚Äôs more about improving processes, collaboration, and automation in software development and IT operations. While coding is essential for creating automation scripts and tools, it‚Äôs just one aspect of DevOps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;As a career / job profile&lt;/strong&gt;: Depending on kind of organisation, there might be different expectations. A decade ago, the work was more around physical server administration when the Devops team was responsible for handling physical servers (and later, cloud servers). In the recent years, most of the organisations have delegated the server administration to cloud providers. And the expectations have shifted to knowledge of technologies like &lt;strong&gt;Containerization&lt;/strong&gt; (Docker, Kubernetes), &lt;strong&gt;Observability&lt;/strong&gt; (Grafana, NewRelic, Datadog), &lt;strong&gt;IaaC&lt;/strong&gt; (Terraform, Ansible), &lt;strong&gt;Cloud cost optimisation&lt;/strong&gt; (planning infra reservation), etc.
 By job titles, organisations can have different profiles like Cloud Engineer, Site Reliability Engineers, IaaC Engineer, Automation Engineer, System Administrator etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In my ~ 9 years of experience, my work has been a mix of &lt;strong&gt;Backend&lt;/strong&gt; and &lt;strong&gt;Devops&lt;/strong&gt;. Getting my hands dirty on Devops side has given me a lot of edge in understanding things related to deployment, cloud, servers and operating systems that other developers couldn‚Äôt easily understand. For example - whenever I was working on a new project, I had a decent idea of what memory/CPU we‚Äôd allocate to it in staging and production environment. Not only this, I use to go ahead and provision the infrastructure myself. Someone might see this negatively, specially when you have had dedicated Devops team(s) in your company. In most of the organisations, there‚Äôs a clear separation between the responsibilities of Developers and Devops. And developers never get into infra related things. In my case, there were two major reasons why I got into Devops:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://copperegg.com/&quot;&gt;My first project&lt;/a&gt; in first organisation was a monitoring product for Devops (similar to Datadog/NewRelic). When I started working on it, it was acquired by a larger company and we were mostly maintaining it. Because we were not building new features, the customer base was not growing and our sprint tasks often involved assessing current infra and downsizing the infra. Around the same time, we planned a long migration from AWS Classic to AWS VPC (it was a big deal back in 2016-17). Most of these tasks were on the Devops side and there was 1 only Devops resource allocated to us. As a result of all these activities, all the developers (we were 3 people) became Devops experts. Within 2.5 years of work, I was hands on with AWS EC2, S3, RDS, R53, VPC, SQS and Unix servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In my second job (&lt;a href=&quot;https://loconav.com/&quot;&gt;LocoNav&lt;/a&gt;), we did not have a dedicated Devops team for first few years. We had at max 0-1 Devops on and off, so some engineers like me (who knew cloud &amp;amp; servers) took care of the Devops side. As a result, we mentored many developers to work as Devops (while we were primarily Rails, Java and Golang Developers).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For me there is not even a thin line between Developer tasks and Devops tasks. I swiftly switch between those as needed. But rest of the developers (who are not into Devops) feel like they‚Äôre missing something. During 1:1 meetings, we‚Äôve got this feedback from many Developers that they want to learn at least some part of Devops things we do. We encourage and guide people as needed because we feel this is a good added skill. I often see job descriptions where companies expect some understanding of Devops philosophy even from SDE candidates. Today, I‚Äôll try to bridge the path between these two disciplines so that you have an idea on how to start.&lt;/p&gt;

&lt;h2 id=&quot;things-to-know&quot;&gt;Things to know&lt;/h2&gt;

&lt;p&gt;I‚Äôd assume you are a typical SE/SSE who is majorly writing code, writing test cases, raising pull requests and merging pull requests. You might also be using something like &lt;em&gt;Jenkins&lt;/em&gt; to build and deploy your code to an environment. You might be deploying on VMs (eg. physical / EC2), some wrapper around it (eg. Heroku / Elastic Beanstalk) or as docker containers on kubernetes (EKS / AKS / self hosted).&lt;/p&gt;

&lt;p&gt;First of all, you need &lt;strong&gt;genuine curiosity&lt;/strong&gt; to learn anything not just Devops. Here, by &lt;em&gt;curiosity&lt;/em&gt; I mean you should be curious to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What happens after you click the &lt;em&gt;Build now&lt;/em&gt; button on Jenkins (for example).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is a Jenkins project? How do we configure one?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Where do we mention the steps that execute to build a project?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you understand the logs (specially errors) that come in the console output of your build tool? Are you able to debug the errors or you call the Devops guy? Knowing how to interpret logs and debug issues is an underrated skill. It can take you miles ahead from others.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have that curiosity, you‚Äôll try to &lt;strong&gt;look beyond code&lt;/strong&gt;. &lt;a href=&quot;https://blog.gagan93.me/asking-good-questions&quot;&gt;Ask questions&lt;/a&gt; to learn more about your overall architecture:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Which cloud provider(s) your team uses to deploy the code?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How are different components (eg. servers, databases, caches) connected to each other in a production environment? Is it different for staging, preprod or dev environment?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How does your service interact with rest of the services? Is there an architecture diagram of the system that you can refer?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you guys deploy on bare metal servers or cloud servers? Or do we deploy as containers?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What operating system is used to deploy your code? Even if you‚Äôre using containers, there should be one OS that is actually base image of your containers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By asking these questions, you‚Äôll get to hear a lot of buzzwords like ‚Äúdockers‚Äù, ‚ÄúAWS‚Äù, ‚Äúkubernetes‚Äù, ‚ÄúAPI Gateway‚Äù. Now it depends on what you want to learn and what you want to skip. At a minimum, I‚Äôd recommend knowing something around:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DNS / Networking&lt;/strong&gt; - &lt;em&gt;‚ÄúWhat happen within the time when you write google.com in your browser and when the page renders on your browser window?‚Äù&lt;/em&gt;. For years, this has been my favourite interview question. I‚Äôve asked this to all levels of engineers, and (obviously) got different level of detail in the answer. If your answer mentions DNS servers, IP resolution, proxy servers/load balancers/API gateways, Application server, request parsing, routing the request to specific handler (&lt;em&gt;controllers&lt;/em&gt; in &lt;strong&gt;MVC&lt;/strong&gt;), querying the backend (if a dynamic page), and rendering the response in the browser, then you know most of it. If not, please read about each of these things. Beyond this, you should know about basic networking like LAN (eg. your mobile/laptop are within the same network at home/office, i.e. a LAN). Also have some basic knowledge around IPv4/IPv6, &lt;a href=&quot;https://www.google.com/search?q=class+A+to+E+IP+addresses&amp;amp;oq=class+A+to+E+IP+addresses&amp;amp;gs_lcrp=EgZjaHJvbWUyBggAEEUYOdIBCDM1NzhqMGo3qAIAsAIA&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot;&gt;IP Address classes&lt;/a&gt;, &lt;a href=&quot;https://www.tutorialspoint.com/ipv4/ipv4_reserved_addresses.htm&quot;&gt;reserved address spaces&lt;/a&gt;, etc. It will help you later understand subnets and VPC in the cloud.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cloud Provider&lt;/strong&gt; - There major ones are &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/en-in&quot;&gt;Azure&lt;/a&gt; and &lt;a href=&quot;https://cloud.google.com/&quot;&gt;GCP&lt;/a&gt;. There are many more like &lt;a href=&quot;https://www.linode.com/&quot;&gt;Linode&lt;/a&gt;, &lt;a href=&quot;https://try.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;, &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; and newer ones like &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; and &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;. On a fundamental level, they all started with the same thing - providing you an easy way to provision a computer (i.e. a server) with required RAM, CPU, Disk and networking. Later, they evolved into more sophisticated platforms, providing variety of servers based on use case like general compute, memory heavy tasks, gaming, machine learning, etc. Beyond this, nowadays they also provide managed SQL/NoSQL databases, email service, DNS management, API Gateways, Docker image repositories, managed kubernetes service and practically everything you would need to run a medium-large app on the cloud. AWS alone provides 200+ managed services in the cloud ü§Ø.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data-centers, regions and lags&lt;/strong&gt; - Let‚Äôs assume that most of your customers are in India and your servers are also in India. By India, I mean your servers are either physically managed by you in a datacenter, or are running on a managed provider like &lt;a href=&quot;https://aws.amazon.com/blogs/aws/now-open-aws-asia-pacific-mumbai-region/&quot;&gt;AWS in mumbai&lt;/a&gt; or &lt;a href=&quot;https://www.digitalocean.com/blog/introducing-our-bangalore-region-blr1&quot;&gt;DigitalOcean in Bangalore&lt;/a&gt;. Here, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_to_first_byte&quot;&gt;TTFB&lt;/a&gt; and overall request will be fast, in an ideal scenario where other factors like server load and network congestion are low. Incase your customers are in India and servers run in Singapore, then it will be slightly slower. Similarly, if you go even far and move your servers to North America, then the request latency can increase. I think you got a basic idea of physical distance here but this is more related to DNS hops. Cloud providers provision a server for you in a specific region chosen by you (eg. Mumbai). Even in Mumbai, they will not have a single data center. So they can allow you to choose a specific data center (AWS calls them &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones&quot;&gt;availability zones&lt;/a&gt;) where you want to run your server. If two servers are running within the same data center, the network transfer speed among them will be maximum. But this doesn‚Äôt mean that you should run all your API servers and databases in a single data center because if one data center goes down (&lt;a href=&quot;https://www.reddit.com/r/aws/comments/b90kof/how_often_does_a_region_go_down_what_about_azs/&quot;&gt;although rare&lt;/a&gt;), your entire application will go down. From a stability and fault tolerance perspective, these cloud providers isolate the regions from each other completely.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build and Deployment process&lt;/strong&gt; - For many developers, deployment process is magical and ‚Äújust happens‚Äù.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Learn what happens during build and deployment of your app. Based on the size/complexity, this can take some time to dive deep but trust me, you‚Äôll learn &lt;strong&gt;a lot&lt;/strong&gt; in this process.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Understand what are the artifacts (output) of your build process. If it‚Äôs a Java project, you‚Äôll possibly get a JAR/WAR file after the build is complete. For a Golang project, you‚Äôll get a executable binary. For interpreted ones like Python and Ruby, your raw code is the artifact. This could be docker image (irrespective of the tech stack) if you‚Äôre building docker images and deploying them to swarm/kubernetes.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Learn about your build tool. &lt;a href=&quot;https://www.jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; is a widely used build tool. If you‚Äôre also using this, learn how to create projects, understand what is a build script, learn about pipelines, read about jenkins slaves and farms.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Containerisation technologies&lt;/strong&gt; - Everyone is doing micro-services these days (although that &lt;a href=&quot;https://adevait.com/software/why-most-startups-dont-need-microservices-yet&quot;&gt;might not be the best choice&lt;/a&gt; if you‚Äôre a startup). In a micro-services architecture, the teams are free to choose their own tech stack to develop services. While it gives you this freedom, it makes hard to choose and manage the deployment tooling. Containerisation technologies streamline the build and release process for multiple technology stacks. For example, Docker provides standardised containerisation framework for applications, while Docker Swarm / Kubernetes offer orchestration to efficiently manage deployment, scaling, and communication across services. Knowing these technologies would help you to write efficient Dockerfiles, &lt;a href=&quot;https://blog.gagan93.me/optimising-docker-builds&quot;&gt;create optimised images&lt;/a&gt; and write helm charts. These things will help to take new projects beyond the dev environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Operating system knowledge&lt;/strong&gt; - It‚Äôs important to have knowledge of the specific OS where your apps get deployed. Here I‚Äôm not focussing on core OS concepts like mutex, semaphores or process scheduling. We should have operational knowledge of the OS so that we can easily debug issues as required. For example, we‚Äôve been deploying our apps on Debian (Unix) for years. So we have a decent idea around &lt;a href=&quot;https://systemd.io/https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/chap-managing_services_with_systemd&quot;&gt;systemd&lt;/a&gt;, &lt;a href=&quot;https://www.techtarget.com/searchdatacenter/definition/crontab&quot;&gt;crontabs&lt;/a&gt;, &lt;a href=&quot;https://www.sumologic.com/syslog/&quot;&gt;syslog&lt;/a&gt;, &lt;a href=&quot;https://unix.stackexchange.com/questions/545083/auth-log-entries-how-do-you-interpret-this-log&quot;&gt;authlog&lt;/a&gt;, &lt;a href=&quot;https://wiki.debian.org/Apt&quot;&gt;apt&lt;/a&gt; (our package manager), &lt;a href=&quot;https://neo4j.com/developer/kb/linux-out-of-memory-killer/&quot;&gt;OOM&lt;/a&gt; and bunch of unix commands that ease our debugging. Without this knowledge, you‚Äôd want someone to hold your hand while debugging a server issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Observability&lt;/strong&gt; - Let‚Äôs assume you wrote a module that has bunch of REST APIs integrated with mobile and web apps. The product was initially rolled out to 100 users, then 1000, and finally to everyone (say 1 million users). With time you‚Äôd see that some API calls fail with HTTP 500 due to an edge case that was never thought of. Once 10K entries are made in a SQL table, you might see a query slowing down because you forgot to add an index on specific table column and initially the data was not large enough to cause slowness. While debugging some cases, you‚Äôd need exact request parameters that came in a POST request to see what caused it to fail. And once there are 100 request per second, you will find a need to add more servers for your service. With system architectures becoming more distributed and on cloud, there‚Äôs a need to be able to measure internal state of the system based on external inputs like logs, metrics and traces. This comes under &lt;em&gt;Observability.&lt;/em&gt; Coming back to the specific examples: you would need an &lt;strong&gt;error reporting&lt;/strong&gt; tool like Bugsnag/Sentry, to see the class/method/line where your code failed. You should have an &lt;strong&gt;APM tool&lt;/strong&gt; like Datadog/NewRelic to see if some API calls or database queries are slowing down recently. It‚Äôs important to have &lt;strong&gt;centalized logging tools&lt;/strong&gt; (like ELK/Scalyr) in a distributed environment so that we can trace a request that routes through different micro-services to process a request. Similarly, &lt;strong&gt;infrastructure monitoring&lt;/strong&gt; tools like Prometheus are important to have a high-level overview of your servers/containers. Observability is a very wide topic, and while all this sounds overwhelming, it is actually very easy to understand if you really get the core of the problem. For example, if we don‚Äôt integrate an error reporting tool, how would we know what part of code is failing and on what line of code? Each tool solves a problem that might or might not be important to you based on needs of your product but it‚Äôs important to know broadly what all tools exist.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are more things I can talk about (like IaaC) but I think this much should be good to start with. The best way to learn anything is to be hands-on. I‚Äôd suggest the following ways to get your hands dirty:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open source tools&lt;/strong&gt; (includes Jenkins, Grafana, Prometheus, Docker, Kubernetes, etc.) - All these tools are &lt;a href=&quot;https://en.wikipedia.org/wiki/Free_and_open-source_software&quot;&gt;FOSS&lt;/a&gt; and can be easily downloaded on your local machine. These are not heavy and many of them (eg. first three) come as docker images so you can uninstall them without bloating your machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cloud Platforms&lt;/strong&gt; - Most of the cloud providers have free-tier (eg. &lt;a href=&quot;https://aws.amazon.com/free&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/free/docs/free-cloud-features&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/en-in/pricing/offers/ms-azr-0044p&quot;&gt;3&lt;/a&gt;) so that you can learn things by doing (that‚Äôs the best way I believe). Aim towards learning 3-4 specific services than randomly trying out services. Keep budget alerts so that you don‚Äôt accidentally hit a &lt;a href=&quot;https://www.youtube.com/watch?v=N6lYcXjd4pg&quot;&gt;cloud overflow&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Other Platforms&lt;/strong&gt; - Almost all the platforms have free tier where they won‚Äôt charge you unless you‚Äôre pushing a lot of data (eg. a lot of traces to NewRelic or a lot of errors to Bugsnag, or many GBs of log data to Scalyr). Even they want people to use their platform so they encourage such free plans. Otherwise they at least have 15-30 day trial plans. Wherever you put your credit card, make sure your to setup some budget alert and remove the card after you are done practising. To avoid any mistakes that can cost you some dollars, concentrate and learn 1-2 things rather than picking 10 things at once.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gagandeep Singh</name></author><category term="Devops" /><category term="Cloud" /><category term="Developers" /><summary type="html">In my ~ 9 years of experience, my work has been a mix of Backend and Devops. Getting my hands dirty on Devops side has given me a lot of edge in understanding things related to deployment, cloud, servers and operating systems that other developers couldn't easily understand. For example...</summary></entry><entry><title type="html">Optimising docker builds</title><link href="https://gagan93.me/blog/2024/02/28/optimising-docker-builds.html" rel="alternate" type="text/html" title="Optimising docker builds" /><published>2024-02-28T00:00:00+05:30</published><updated>2024-02-28T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/02/28/optimising-docker-builds</id><content type="html" xml:base="https://gagan93.me/blog/2024/02/28/optimising-docker-builds.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-02-28-dockers.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-ian-taylor-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@carrier_lost?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Ian Taylor&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/blue-and-red-cargo-ship-on-sea-during-daytime-jOqJbvo1P9g?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;This month I worked on optimising docker build for an app. But before delving into the specifics of my optimisation efforts, let me provide you with a overview of the application:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It‚Äôs a medium size, fullstack Rails application (400+ models)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It has 300+ dependencies (a.k.a ruby gems).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It contains rails views (activeadmin majorly) and assets.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It uses react on the frontend and uses webpacker to transpile those into JS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We had two dockerfiles - one for the web app and one for background job processor (&lt;a href=&quot;https://github.com/sidekiq/sidekiq&quot;&gt;sidekiq&lt;/a&gt;, similar to &lt;a href=&quot;https://docs.celeryq.dev/en/stable/getting-started/introduction.html&quot;&gt;celary&lt;/a&gt;, &lt;a href=&quot;https://github.com/jobrunr/jobrunr&quot;&gt;jobrunr&lt;/a&gt;, etc). These could be combined now to some extent but were different due to different base images initially.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can think of optimising a docker image in two ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚òë&lt;/strong&gt; Optimising build time.
&lt;strong&gt;‚òë&lt;/strong&gt; Optimising image size.&lt;/p&gt;

&lt;p&gt;I had to tick both the boxes and optimise as much as possible in the next few days. The first and very obvious step was to understand the steps in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and read some good blogs on how people have been doing it for their app. I had already been reading this &lt;a href=&quot;https://diamol.net/&quot;&gt;excellent book&lt;/a&gt; earlier this month, that helped me build strong fundamentals around Docker as a technology. The first part of this book talks about the very basic things (needed to build and optimise images), while rest of the parts talk about operating Docker. While there were some excellent case studies talking specifically about optimising for Rails apps, most of the techniques were already applied back in 2022 when I picked the optimisation activity for the first time. To make sure that you get the most out of this post, I‚Äôll share the older optimisations also.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Understanding layering&lt;/strong&gt; - A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; typically starts with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt; instruction that points to a base image specific to your language/framework. Beyond this, there are many more instructions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARG&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD&lt;/code&gt;. It generally ends with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; instructions (unless we‚Äôre passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; from outside). The instructions that actually create heavy layers are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD&lt;/code&gt; because we run some commands or copy some files/directories from the host machine to the docker image using these commands. From an optimisation perspective, ‚Äúleast changing layers should remain on top and most changing layers should be at the bottom‚Äù. This is because when you run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt; command multiple times and if you haven‚Äôt cleared the build caches, the unchanged layers do not get computed again and subsequent builds are faster. This is the single most useful concept I used multiple times to get most out of caching.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Understanding base images&lt;/strong&gt; - Our app used ruby 2.5.9 so we used the &lt;a href=&quot;https://hub.docker.com/layers/library/ruby/2.5.9/images/sha256-0ed9d1839df4d5c08c98a0a7315519694c5da80b0885d6a5b96d5d5bb564d5a5?context=explore&quot;&gt;official ruby 2.5.9 image&lt;/a&gt; as our base image to start with. Digging deep on the tags, we found that there are multiple tags for the same version also (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slim&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buster&lt;/code&gt;, etc). Some of these have a different unix flavour as the base OS, while some of these have less system packages installed. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt; is the lightest image but it uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine linux&lt;/code&gt; as the base operating system. We did not move to it as we have always ran our app on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debian&lt;/code&gt; unix (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; mostly). In the end we settled for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slim&lt;/code&gt; version of the image that uses debian as the base OS but doesn‚Äôt bloat the image with a lot of pre-installed packages. Someone &lt;a href=&quot;https://github.com/rails/rails/issues/46855&quot;&gt;opened an issue&lt;/a&gt; on Rails official repo that has a detailed discussion on how these images are different and what native packages we generally need to run our apps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Understanding docker stages&lt;/strong&gt; - A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; can contain multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt; instructions where each of them starts another ‚Äústage‚Äù. This small yet powerful concept allows you to optimize your build size by copying only required things from one stage to another stage. We‚Äôll discuss it in detail below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Understanding caching&lt;/strong&gt; - Docker allows caching in multiple ways. As mentioned in the first point, docker caches all the layers so that unchanged layers are not rebuilt on subsequent runs. Docker also allows caching steps of some intermediate layers so that those are not computed again from scratch. This can be done using cache mounts. Docker‚Äôs &lt;a href=&quot;https://docs.docker.com/build/guide/mounts/#add-a-cache-mount&quot;&gt;official explanation&lt;/a&gt; of cache mounts is excellent. Another small optimisation on layering can be done using &lt;a href=&quot;https://docs.docker.com/build/guide/mounts/#add-bind-mounts&quot;&gt;bind mounts&lt;/a&gt; where you can skip a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; instruction incase you need files to just run an intermediate step.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope the above helped in building some ground. Sharing the actual details below.&lt;/p&gt;

&lt;h2 id=&quot;our-final-dockerfiles&quot;&gt;Our final Dockerfiles&lt;/h2&gt;

&lt;p&gt;I‚Äôm pasting three Dockerfiles here as a reference. We‚Äôll go through each line of all the three files to deeply understand why we did each change. While these are related to a Ruby on Rails fullstack application, I‚Äôll explain this in a general context and use examples from multiple languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Base Dockerfile&lt;/strong&gt; - We built our own ruby-2.5.9 image on the top of the official image. The reason for doing this is - although docker‚Äôs build cache optimises a lot of steps, our build machine (a jenkins slave) periodically runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker system prune&lt;/code&gt; to clear old images and save disk space. And that is done because a lot of apps build their image on the build machine, eating up all the disk space. This is how the base image looks like:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.9-slim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; curl  &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://deb.nodesource.com/setup_14.x | bash - &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; gcc g++ make git nodejs &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt autoremove &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt clean &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apt/archives/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /tmp/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /var/tmp/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;truncate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 0 /var/log/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;log &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler:2.3.26 &lt;span class=&quot;nt&quot;&gt;--no-document&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle config &lt;span class=&quot;nt&quot;&gt;--local&lt;/span&gt; without &lt;span class=&quot;s2&quot;&gt;&quot;development test&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile.lock,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile.lock &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;getconf _NPROCESSORS_ONLN&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sidekiq dockerfile - Sidekiq is our background job processor. This file uses the above image in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt; instruction, installs more dependencies and copies code&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; BASE_IMAGE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; $BASE_IMAGE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/app/my_app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile.lock,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Gemfile.lock &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gems,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gems &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;getconf _NPROCESSORS_ONLN&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/home/app/my_app/entrypoint.sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WebApp dockerfile - This file uses the sidekiq dockerfile as the base image and adds frontend assets on the top of it. This one is a multistage build, where we do building assets in one stage and copy only the required artifacts to the final stage. This is done to ensure that no bloat exists in the final stage.&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; BASE_IMAGE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$BASE_IMAGE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;frontend-pipeline&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; yarn
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--production&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cache,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/app/my_app/tmp/ &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;config/database.yml.example,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;config/database.yml &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake assets:precompile &lt;span class=&quot;nv&quot;&gt;DB_ADAPTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nulldb &lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production &lt;span class=&quot;nv&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production &lt;span class=&quot;nv&quot;&gt;NODE_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--max-old-space-size=28672&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; $BASE_IMAGE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 3000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;lt;whatever&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=frontend-pipeline /home/app/my_app/public /home/app/my_app/public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;digging-deep&quot;&gt;Digging deep&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why we switched to&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slim&lt;/code&gt; &lt;strong&gt;image of ruby 2.5.9 and how it impacted us?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We were sure that we don‚Äôt need those 500+ system packages that are pre-installed inside 2.5.9 image. Additionally, on my macos, if I pull both the images (slim and non-slim), there is a huge difference of 82% (140MB vs 790MB).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We knew what specific system packages we needed. Figuring this out is not hard. If your docker image is building successfully and all major features are working, you can conclude that easily. Having working experience on this repo of more than 5 years, I exactly knew what native dependencies we need here so we were able to move to slim image.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It led to a build size reduction of about 450MB on AWS ECR (where we host the images).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why we built our own base image?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;As explained above, our build machine purges docker caches regularly because of which the ruby docker image is pulled again and all the system packages are install again. This wasted roughly 3-4 minutes. Also, pulling the image from ECR should be faster than pulling from dockerhub (as build machine is on AWS).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If you check carefully, we install gems from Gemfiles in first two Dockerfiles. They point to different Gemfiles. In the first dockerfile, we use a Gemfile that has only those gems which are installed with native dependencies (and hence take time). This was done to ensure build time reduction. We save roughly a minute here. This technique can be used in all frameworks; if your package manager has some dependencies that hardly change and take time to install, move them to the base image. You might want to avoid this if you use one base image for multiple dependencies.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We have some tooling for configuration management that is built using golang base image. That is also present in the base image. When we were not having base &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;, that took about a minute to build in the sidekiq &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;.
  &lt;strong&gt;Note&lt;/strong&gt;: I‚Äôve not mentioned those lines in the Dockerfile as that tooling is proprietary. In real world, the first dockerfile is also multistage :)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How did we make dependency installation fast?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;All languages have some dependency manager: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundler&lt;/code&gt; for Ruby, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; for Python, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maven/gradle&lt;/code&gt; for Java and so on. Modern computers are multi-core and most of the new tools have ways to utilise multiple cores for tasks that can be parallelized. We used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobs&lt;/code&gt; argument to parallelize the installation for ruby‚Äôs bundler. Earlier we had hardcoded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; as the number of parallel jobs. But because our build machine is large now (it can be small in future), it makes sense to get this value dynamically. Hence you see this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getconf _NPROCESSORS_ONLN&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; step (this command works well in both unix and mac).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We installed some gems like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nokogiri&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcrypt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oj&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg&lt;/code&gt; in the base image because they‚Äôre built with native dependencies and take time. Also, we don‚Äôt upgrade them regularly and hence won‚Äôt need to revisit them in the base image. Due to this reason, there‚Äôs a special Gemfile for base image (different from the app‚Äôs Gemfile).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why did we combine many commands in a single RUN instruction?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Because each RUN command creates a new layer and we want to minimize the number of layers. Most importantly, if we create some files in one layer and delete them in other layer, it won‚Äôt reduce the image size as docker would maintain both of these layers (even the one that added the file). In brief, if there‚Äôs a RUN command that only deletes something, it might not bring a change in size of your image. As a clever trick, we‚Äôre deleting some logs related to package installation and other system logs (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf /var/cache/apt/archives/* &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &amp;amp;&amp;amp; truncate -s 0 /var/log/*log&lt;/code&gt; ) inside the same RUN instruction so that those are never inserted in the docker‚Äôs layer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why are we not copying the&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; &lt;strong&gt;in the image and then running the&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; &lt;strong&gt;command?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;We don‚Äôt need these files so we won‚Äôt copy them inside the docker‚Äôs layer. Rather, we‚Äôre using docker‚Äôs bind mounts to bind these files temporarily for the RUN instruction. You can use the same technique in other frameworks as well. For example, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; based projects, you can bind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; before running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; command (or mount &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; before running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; for a python project, and so on).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;In the second Dockerfile, why we add codebase later and just bind Gemfiles first?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Earlier, our instructions looked like this:&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  COPY Gemfile .
  COPY Gemfile.lock .
  RUN bundle install

  WORKDIR /home/app/my-app
  COPY . . # copies entire source code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;Now, we‚Äôre using the bind mount. But the question is same - why would we first copy files that define dependencies and copy rest of the code later. Reason is simple - There are more chances that something else in entire codebase will change than the dependencies. So if we copy everything and them run the dependency manager (bundler/maven/pip/yarn), then the cache of that layer will always be rebuilt. Whereas, if we copy package files first, there are more chances that the cached layer will be used.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why our files don‚Äôt have a CMD defined?&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;We have multiple entry points that can run on the top of these docker images (eg. &lt;a href=&quot;https://github.com/puma/puma/&quot;&gt;puma&lt;/a&gt;, &lt;a href=&quot;https://github.com/anycable/anycable&quot;&gt;anycable&lt;/a&gt;, &lt;a href=&quot;https://github.com/sidekiq/sidekiq&quot;&gt;sidekiq&lt;/a&gt;). So we prefer to pass CMD from outside. There are multiple ways to do so based on the way you‚Äôre running the container. For example, if you‚Äôre running the image using plain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; command then just write the command to be run in CMD after this (Eg. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run -it ruby:2.5.9-slim irb)&lt;/code&gt; . Similarly, you can provide CMD argument through docker-compose, docker-swarm or through helm charts (for kubernetes).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;There are many special things happening in asset precompile step. I‚Äôll explain them one by one&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;We mount a sample &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; file (dummy database configuration file, doesn‚Äôt contain any credentials) using bind mounts because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake&lt;/code&gt; commands sets up entire rails environment and that is needed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;To make sure database is not connected, we also use a &lt;a href=&quot;https://github.com/nulldb/nulldb&quot;&gt;special library&lt;/a&gt; during precompile step.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We use docker‚Äôs cache mounts (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mount=type=cache&lt;/code&gt;) to cache the results of this step so that next time only changed steps get recomputed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We supply specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_OPTIONS&lt;/code&gt; so that build machine‚Äôs memory can be utilized to compile as fast as possible.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Assets are compiled in an intermediate stage and only required artifacts are copied to the final layer.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;The results in our case were outstanding, specially in terms of image size. Image time did improve when I did optimizations in 2022, but this time there was no drastic increase. Time for numbers üéâ&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build size&lt;/strong&gt;: Earlier we were maintaining two docker images - 2.4G and 1.5G. So on any node in the kubernetes nodepool, if both of our images are needed, we were required to download ~ 4G of files. Only common thing among these two was the ruby base image. So probably we were downloading ~ 3.5G if we take that out. After optimization, the image size was 1.1G and 1.5G. More importantly, this 1.1G was common as one image was used in second image. So technically, we‚Äôll be downloading only 1.5G on any node where we need both the images. That‚Äôs an improvement of &lt;strong&gt;over 57%.&lt;/strong&gt; And this difference is only of our current optimization. If we compare it back to 2022, the difference was even large.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build time&lt;/strong&gt;: The current build time is 12-15min. A month ago it was around 14-18min. Back in 2022, it was about 30min. So from that time it has been a significant improvement but comparing from last month, the build time has not improved much. A major time goes into transpiling react code to JS, and pushing images to ECR.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;impact&quot;&gt;Impact&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build size&lt;/strong&gt;: At LocoNav, we have staging, preprod and production environments. We have our oldest production environment (on AWS) and few small production deployments in other countries where we operate on some other cloud providers. On AWS, we deploy daily but in other clusters we deploy weekly or fortnightly. Because we‚Äôre copying docker images from AWS ECR to other cloud providers, reduction of &amp;gt;50% would mean faster image pulls and faster deployments. In the long run, because we‚Äôre pushing lesser GBs from the build machine to ECR, and from ECR to EKS (and even outside AWS), it would lead to lesser S3 cost (for storing images) and lesser network transfer cost.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build time&lt;/strong&gt;: As developers build and deploy multiple times to staging environment(s), shorter build times encourage them to iterate faster and not lose context of things. When build times were higher, developers often switched to other tasks after triggering builds.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;There‚Äôs a very nice tool that helps to analyze docker images layer-by-layer. Although it didn‚Äôt help me a lot to reduce the size, it was a good experience diving deeply into layers. It‚Äôs known as &lt;a href=&quot;https://github.com/wagoodman/dive&quot;&gt;dive&lt;/a&gt; and it‚Äôs an open source tool that you can install on your machine to analyze any docker image. It also made me understand how docker ignores the intermediate stages of a multi-stage build and just copies the artifacts.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;Docker build time/size reduction is an interesting activity. There are some thumb rules (like moving less changing layers above) and some experimentation according to your app‚Äôs setup. You need to experiment a lot to understand what works for you. If you have a similar experience, or any suggestions on the above - please do comment.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="Docker" /><category term="Optimization" /><category term="Dockerfile" /><summary type="html">A detailed post on optimising docker build time and image size for any application based on my experience in optimising the same twice for one of our mid size application</summary></entry><entry><title type="html">Cloud pricing &amp;amp; Vendor lock-ins</title><link href="https://gagan93.me/blog/2024/01/27/cloud-pricing-and-vendor-lock-ins.html" rel="alternate" type="text/html" title="Cloud pricing &amp;amp; Vendor lock-ins" /><published>2024-01-27T00:00:00+05:30</published><updated>2024-01-27T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/01/27/cloud-pricing-and-vendor-lock-ins</id><content type="html" xml:base="https://gagan93.me/blog/2024/01/27/cloud-pricing-and-vendor-lock-ins.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-01-27-lock-in.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-micah-williams-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@mr_williams_photography?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Micah Williams&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/black-and-gray-code-padlock-anchored-on-chain-link-fence-selective-focus-photo-lmFJOx7hPc4?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Cloud pricing is complicated. If you are trying to optimize a cloud bill for the first time that mentions more than 10 managed services, it can take a decent time to understand how this is computed. Although most of this article will talk about pricing w.r.t AWS Cloud, most of the public clouds work like that. If I was to explain on a very high level, these are a few things that should help in understanding pricing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PAYG&lt;/strong&gt; (Pay as you go) - Most of the cloud providers charge in a prorated manner - i.e. if you use a service for 2 days out of 30 days and the monthly charge was $90, so you end up paying $6 only (simple maths). Since 2017, AWS shifted to &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-per-second-billing-for-ec2-instances-and-ebs-volumes/&quot;&gt;per-second billing&lt;/a&gt; for many of it‚Äôs services.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Machine size&lt;/strong&gt; - Bigger the hardware, more is the cost. For most of the cases, a machine having 4 core and 16G RAM will cost exact double of machine that has 2 core and 8G RAM. I think this is very obvious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Commitment&lt;/strong&gt; - If you commit to use a hardware for a given period (say 1 or 3 years), you get it at a discounted price (explained &lt;a href=&quot;https://aws.amazon.com/ec2/pricing/reserved-instances/&quot;&gt;here&lt;/a&gt;). Here the downside is that even if you don‚Äôt use the hardware (after say 7 months), you still pay for the remainder period (say next 5 months) because you committed to use it. Another option allows committing a fixed usage value (read &lt;a href=&quot;https://aws.amazon.com/savingsplans/&quot;&gt;this&lt;/a&gt; to know more).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data transfer&lt;/strong&gt; - This cost can increase if your user base is growing, depending on how much data is transferred between your application and the end user. I find data transfer as the most complex component of the bill. You can read &lt;a href=&quot;https://aws.amazon.com/blogs/architecture/overview-of-data-transfer-costs-for-common-architectures/&quot;&gt;this&lt;/a&gt; to understand more on how this works.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kind of service&lt;/strong&gt; - Each service can have it‚Äôs own pricing component that makes sense for it. As an example:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;A load balancer like ALB / NLB has a fixed monthly cost + cost of data transferred through it (explained &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/pricing/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A blob storage service like S3 bills according to storage class and obviously considers the size of data you‚Äôre storing (explained &lt;a href=&quot;https://aws.amazon.com/s3/pricing/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A Disk storage service like EBS has a different charge for different kinds of disk (GP2/IO1), for provisioned IOPS, etc (explained &lt;a href=&quot;https://aws.amazon.com/ebs/pricing/&quot;&gt;here&lt;/a&gt;). Additionally, a disk attached to a database service like RDS is slightly costlier than one attached to a EC2 machine.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;The above section is a very brief introduction to cloud pricing. You might have encountered new terms so I‚Äôve attached some links that will help you understand more. In the last point, I tried to write in a &lt;em&gt;metaphorical sense&lt;/em&gt; rather than simply mentioning fancy AWS service names. That has a special motive. From an architecture perspective, we should treat a load balancer as a load balancer, and not assume that we always need ‚ÄúAWS Application Load Balancer‚Äù. This thought process helps in decoupling our architecture from a specific cloud provider‚Äôs service.&lt;/p&gt;

&lt;p&gt;As this might not make much sense for some readers, let me explain more. If your product uses a lot of ‚Äúprovider specific‚Äù services, it might be harmful for you in the long run. As an example, if your code expects a lot of AWS Services to accomplish a task, you might not be able to exit AWS anytime in future (without significant investment). At this point, you might think - &lt;strong&gt;Why would I want to exit AWS&lt;/strong&gt;?. While this is a valid question, and most of the teams would not want to invest in this (risk-taking) migration, there are a few cases I know where people have done this and are expected to save a lot of dollars in the long run. The most popular ones I know are &lt;a href=&quot;https://www.youtube.com/watch?v=vFxQyZX84Ro&quot;&gt;Dukaan&lt;/a&gt; and &lt;a href=&quot;https://world.hey.com/dhh/we-have-left-the-cloud-251760fb&quot;&gt;Basecamp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another reason to design &lt;a href=&quot;https://www.synopsys.com/cloud/insights/cloud-native-vs-cloud-agnostic.html&quot;&gt;cloud agnostic&lt;/a&gt; systems is to be able to sell in certain markets. When &lt;a href=&quot;https://loconav.com/&quot;&gt;LocoNav&lt;/a&gt; expanded its sales beyond India, numerous markets had stringent data residency and localization laws. However, none of the prominent cloud service providers had established data centers in those countries. At that time, our infrastructure was completely on AWS but we were not completely locked-in as we had self-managed installations of a lot of things. For example, despite using Elasticache for Redis, we were also having self managed redis servers (on EC2). We knew good and bad of both the worlds. Same goes for our SQL database - While most of our postgres use-cases are on RDS, we also have large self-managed postgres installations on EC2 as well. Beyond this, we were also using load balancers and S3 from AWS heavily, but we were able to find open-source alternatives for both of these that helped us in making the architecture truly cloud agnostic. Today, although the process of setting up a new deployment is not one-click, it is doable with some effort and most importantly - possible without relying on a specific provider (AWS in our case) üòá.&lt;/p&gt;

&lt;p&gt;On the other hand, had we been deeply locked in one vendor, it would not have been possible to sell in these countries. By being cloud agnostic, I do not mean that we should manage everything on our own even if new cloud provider is providing those services. For example, we use kubernetes for deploying our containers. While we completely manage Kubernetes on our own in some small cloud providers (where we just get bare VMs), we prefer using EKS on AWS and AKS on Azure. Similarly, we use &lt;a href=&quot;https://min.io/&quot;&gt;minio&lt;/a&gt; as a self-managed option for S3 in some cloud providers but for OCI, their own object store is pretty good. The best part here is that both minio and OCI Object store have very good API compatibility with S3, so no code changes were required to work with these backends.&lt;/p&gt;

&lt;p&gt;Cloud native or cloud agnostic - both the patterns have their own merits and demerits. As an architect, I‚Äôd recommend you to stay flexible and build what suits the best for your business. Using a managed service can be easy to begin with but always remember the caveats. You can also modularize your code in a way that the outermost layer (eg. service layer for APIs) doesn‚Äôt directly interact with the innermost layer (eg. that calls the specific service). There should always be some layers of abstractions that can help you shift to a different backend easily.&lt;/p&gt;

&lt;p&gt;I hope this article gives some idea around cloud pricing and vendor lock-ins. If you have had an experience doing the same for your product, or if you have any questions around the same, please share in comments.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="cloud" /><category term="pricing" /><category term="lock-in" /><summary type="html">Cloud pricing is complicated. If you are trying to optimize a cloud bill for the first time that mentions more than 10 managed services, it can take a decent time to understand how this is computed. Although most of....</summary></entry></feed>