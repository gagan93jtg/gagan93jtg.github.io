<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gagan93.me/blog/" rel="alternate" type="text/html" /><updated>2024-09-22T15:23:02+05:30</updated><id>https://gagan93.me/blog/feed.xml</id><title type="html">Gagandeep Singh ‚Äî Blog</title><subtitle>Posts on Engineering, Culture, Leadership</subtitle><entry><title type="html">Blameless culture</title><link href="https://gagan93.me/blog/2024/09/22/blameless-culture.html" rel="alternate" type="text/html" title="Blameless culture" /><published>2024-09-22T00:00:00+05:30</published><updated>2024-09-22T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/09/22/blameless-culture</id><content type="html" xml:base="https://gagan93.me/blog/2024/09/22/blameless-culture.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-09-24-blameless-culture.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-krakenimages-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@krakenimages?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;krakenimages&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/man-in-white-dress-shirt-sitting-beside-woman-in-black-long-sleeve-shirt-376KN_ISplE?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Mistakes are inevitable in any project, especially when it comes to complex software projects. However, the way we respond to those mistakes can make or break the motivation and productivity of our teams. This post discusses how fostering a blameless culture can enhance team productivity.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-blameless-culture&quot;&gt;What is a Blameless Culture?&lt;/h2&gt;

&lt;p&gt;Have you ever heard of teams where individuals blame each other when a product release is delayed? Or perhaps, unfortunately, worked with such teams? It is quite disheartening to be part of a team where such inefficiencies outweigh productive work. A few reasons why this happens are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If managers do not invest sufficient time in designing a system that promotes transparency,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or when most of the team members encourage the blame-game, and no one steps up to highlight that this approach harms team motivation,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or where it is normal to delay releases or shift responsibilities, rather than maintaining clarity.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is exactly opposite of how &lt;strong&gt;Blameless culture&lt;/strong&gt; looks like. In a Blameless culture, we emphasize on &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;improving&lt;/strong&gt; but &lt;strong&gt;without pointing fingers&lt;/strong&gt;. So when a mistake happens, the focus is on analysing the &lt;strong&gt;root cause&lt;/strong&gt; and &lt;strong&gt;fixing it&lt;/strong&gt;. In such a culture, people are open to communicate and accept their mistakes rather than hiding them or shifting blames.&lt;/p&gt;

&lt;h2 id=&quot;role-of-processes&quot;&gt;Role of processes&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say you work in a startup with less than 10 people. There are high chances that you won‚Äôt have a process defined for anything. So if you are working in the leadership team and someone comes and asks for a leave, or wants to get their laptop repaired, or needs a comfortable chair ‚Äî you will need to define a process for them. On the contrary, in a large organisation you will see a process and budget defined for almost everything. While processes are important for any organisation, startups can‚Äôt prioritise defining these processes, as their goal is to get the first few paying customers for their product(s). At the same time, they can‚Äôt even inherit the processes from a large company because a lot of those will not make sense for a startup.&lt;/p&gt;

&lt;p&gt;As of now, I have over 9 years of industry experience, all in startups (including one at a &lt;strong&gt;very early stage&lt;/strong&gt;). I believe that team members should be open to learning new processes to tackle new challenges. They shouldn‚Äôt have a fixed mindset that makes them think in just one way. What worked at your previous company might not work at the next one. So, having an open mindset helps you adapt to the environment and come up with new, specific, and innovative solutions.&lt;/p&gt;

&lt;p&gt;Processes in startups evolve as the company grows. For instance, they determine which leave plan is effective and what kind of release schedule works best for their software. The evolution of these processes also addresses many cultural issues. I recall in my previous role, we began to develop a culture of shifting blame to individuals and teams when our product manager inquired ‚Äú&lt;strong&gt;Why is the Android release delayed?‚Äù&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the frontend team, it was the QA team that approved the API too late.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the QA team, it was the backend team whose estimates were off by days or weeks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the backend team, it was the product team that didn‚Äôt consider all scenarios, leading to changes in the code design after they started building the backend..&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We saw this as a chance to improve our processes. It took us 3-4 retrospective meetings to identify what needed improvement. Our &lt;strong&gt;open mindset&lt;/strong&gt; helped us eliminate the &lt;strong&gt;wrong culture&lt;/strong&gt; and address the &lt;strong&gt;root cause&lt;/strong&gt; of our problem. I also wrote a detailed &lt;a href=&quot;https://blog.gagan93.me/efficient-fullstack-delivery&quot;&gt;blog post&lt;/a&gt; about it many years later.&lt;/p&gt;

&lt;h2 id=&quot;culture--accountability&quot;&gt;Culture &amp;lt;&amp;gt; Accountability&lt;/h2&gt;

&lt;p&gt;Blameless culture doesn‚Äôt mean avoiding accountability; it means redefining it. Accountability is about ownership of tasks and outcomes. When an issue arises, the goal is to improve the process and systems that allowed the problem to occur, rather than penalizing the individual (or team) involved. This empowers team members to take responsibility without fear.&lt;/p&gt;

&lt;p&gt;Another story I remember is from a recent interaction with a junior colleague in my last role. Both of us were in our notice period at that time. I met them face to face for the first time on their last working day üòÖ. They were moving to a large investment bank as a Software Engineer. Moving from a startup to a big company that deals with money, they were worried about what would happen if their code caused a loss of real money in production. My shortest answer to them was ‚Äî&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;If it‚Äôs easy to cause loss of money in their systems, it‚Äôs a process problem and not an engineer‚Äôs fault. There should be sufficient processes and checks in place to make sure this doesn‚Äôt happen very easily&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, every now and then, I see a meme where an intern claims to accidentally destroy the production database. The problem is not the intern, but the policies that gave them write access to production database üòÑ.&lt;/p&gt;

&lt;h2 id=&quot;founding-teams-impact&quot;&gt;Founding Team‚Äôs Impact&lt;/h2&gt;

&lt;p&gt;The founding team has a profound impact on a company‚Äôs culture and processes, Founders establish the core values that reflect their work ethic and vision, setting the tone for how employees interact, make decisions, and solve problems. Whether intentional or not, the founding team‚Äôs leadership style influences the company‚Äôs norms ‚Äî whether it encourages open communication, innovation, or strict hierarchy. I recently interacted with an old friend who works as a Senior Business analyst. They recently changed their job and told that the culture is very poor. In their words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our managers do not treat their reportees well. If you don‚Äôt answer their Slack messages quickly, they‚Äôll ping others in the team asking, ‚ÄúWhere is XYZ person and why aren‚Äôt they responding?‚Äù It doesn‚Äôt matter if the person went to the washroom for five minutes. They expect immediate responses to everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I asked about their skip manager‚Äôs behavior, they said, &lt;em&gt;‚ÄúEveryone is the same here. Skip managers shout at managers, and managers shout at us.‚Äù&lt;/em&gt; üòø This shows how a bad culture spreads from top to bottom. Another example is a story shared by &lt;em&gt;The Pragmatic Engineer&lt;/em&gt; in &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/stripe-part-2&quot;&gt;their blog&lt;/a&gt;. It‚Äôs about Stripe‚Äôs &lt;strong&gt;strong writing culture&lt;/strong&gt;. Because their CEO and CTO write a lot, it encourages everyone to do the same. As a result, all engineers and managers write long internal documents. I wrote about the impact of the founding team on the rest of the team on &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_culture-writing-team-activity-7170322475212374016-UjEc/&quot;&gt;my LinkedIn&lt;/a&gt; a few months ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you‚Äôre an old member of a team, your work is beyond your work profile. One major role is to ensure a positive team culture. Culture propagates in two ways:&lt;/p&gt;

  &lt;p&gt;1. Vertically (CEO -&amp;gt; Dept leads -&amp;gt; managers -&amp;gt; seniors -&amp;gt; freshers).
2. Horizontally (Among peers / among old and new people).&lt;/p&gt;

  &lt;p&gt;If there is a blame-game culture in a team of 10 members, then chances are that 11th member will also start doing that, or will leave. On the positive side, if there‚Äôs a bar of ‚Äúhigh quality‚Äù code or processes in a team, then the new member will have to match that in order to survive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you work in a team with cultural issues, collaborate with your peers and manager to improve it. If you‚Äôre in a startup or a growing team, make sure the culture develops positively. Small habits have a big impact when others follow them, whether good or bad.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Have a good day.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Gagandeep Singh</name></author><category term="culture" /><category term="team" /><category term="motivation" /><summary type="html">Mistakes are inevitable in any project, especially when it comes to complex software projects. However, the way we respond to those mistakes can make or break the motivation and productivity of our teams. This post discusses how fostering a blameless culture can enhance team productivity....</summary></entry><entry><title type="html">Unseen risks of Inheritance</title><link href="https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance.html" rel="alternate" type="text/html" title="Unseen risks of Inheritance" /><published>2024-08-25T00:00:00+05:30</published><updated>2024-08-25T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance</id><content type="html" xml:base="https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-08-25-unseen-risks-inheritance.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@flyd2069?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;FlyD&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/text-5lU_WmKVus4?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I started learning Object-Oriented Programming (OOP) with C++ during my college days, and &lt;strong&gt;Inheritance&lt;/strong&gt; is one of the key concepts you can‚Äôt miss when learning OOP. In fact, inheritance is one of the four core principles of OOP, along with &lt;strong&gt;Encapsulation&lt;/strong&gt;, &lt;strong&gt;Abstraction&lt;/strong&gt;, and &lt;strong&gt;Polymorphism&lt;/strong&gt;. In our textbooks, the examples of inheritance were quite simple. The one I remember involved a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, where classes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; inherited from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; and override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;area&lt;/code&gt; method. Unfortunately, real-life classes are never that simple üòÑ.&lt;/p&gt;

&lt;h2 id=&quot;problems-with-inheritance&quot;&gt;Problems with Inheritance&lt;/h2&gt;

&lt;p&gt;I have written a significant amount of code using the Inheritance pattern, which complicated the overall design of my system over time. A common issue was that many classes in the hierarchy contained methods that were not useful to them. These methods were inherited from somewhere in the inheritance chain. This problem often arises when you use this pattern early in the design and fail to refactor the design when things become more complicated. So basically, if you stick with the design and keep adding more behavior to the classes without rethinking the design for new requirements, you‚Äôll end up with the same problem. As a result, your classes might have methods that don‚Äôt make much sense for them. A few other problems that come with Inheritance are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tight coupling&lt;/strong&gt; - Inheriting classes from each other inevitably increases coupling. While changes in a subclass do not affect the parent class, the reverse is not true. In a lengthy inheritance chain, any modifications to the base class design can impact all subclasses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long chain -&lt;/strong&gt; Inheritance is beneficial only when the chain is kept short. In a long chain of classes, it becomes challenging to trace the origin of method definitions and understand where they are overridden. Such a design complicates debugging and maintenance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigid design&lt;/strong&gt; - Because of the coupling introduced by inheritance, the design becomes less flexible and more rigid. When you make modifications to the base class, these changes can unintentionally affect all derived classes. This can lead to unexpected bugs or require changes in multiple places throughout the codebase.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-people-still-use-it&quot;&gt;Why people still use it?&lt;/h2&gt;

&lt;p&gt;We all know that &lt;strong&gt;low coupling&lt;/strong&gt;, &lt;strong&gt;ease of debugging&lt;/strong&gt; and &lt;strong&gt;flexibility&lt;/strong&gt; are the traits of a good design. So why should we use Inheritance if we do not get all of this? The answer to this is &lt;strong&gt;‚Äî&lt;/strong&gt; Inheritance is beautiful, only if you know how to do it nicely. For example, the Java‚Äôs collection framework hierarchy neatly implements inheritance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-08-25-unseen-risks-inheritance-java-collections.jpg&quot; alt=&quot;Java collections framework - Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above design is better because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Clean Abstraction&lt;/strong&gt; - It uses abstract classes and interfaces. Your language might not provide the same functionality (e.g., &lt;strong&gt;Ruby&lt;/strong&gt; doesn‚Äôt have &lt;strong&gt;interfaces&lt;/strong&gt;), but the general idea of breaking down the functionality should help.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; - They clearly define the role of each level, and they have been heavily refactoring the hierarchy since the collections framework was released in 1998.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design Patterns&lt;/strong&gt; - Beyond just inheritance, the framework also uses some design patterns internally to simplify the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inheritance Chain&lt;/strong&gt; - Although there is no strict rule on how long or wide your inheritance hierarchy should be, it‚Äôs good to keep an eye on it so you don‚Äôt end up with 10-20 levels of inheritance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beyond these points, the classes in the Java collection framework adhere to the SOLID principles, which are crucial for maintaining a robust and flexible design.&lt;/p&gt;

&lt;h2 id=&quot;clean-inheritance&quot;&gt;Clean Inheritance&lt;/h2&gt;

&lt;p&gt;There‚Äôs an excellent talk by &lt;a href=&quot;https://sandimetz.com/&quot;&gt;Sandi Metz&lt;/a&gt; from RailsConf 2014 (&lt;a href=&quot;https://www.youtube.com/watch?app=desktop&amp;amp;v=8bZh5LMaSmEhttps://www.youtube.com/watch?app=desktop&amp;amp;v=8bZh5LMaSmE&quot;&gt;link&lt;/a&gt;) where they explain how they refactored a code with high cyclomatic complexity to a much simpler design using Inheritance. While they are on it, they also explain when inheritance is good. Quoting from the same talk:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Despite of what you have have heard, Inheritance is not evil, and I can tell you exactly when it‚Äôs safe to use it. Here‚Äôs what you want - You want a shallow, narrow hierarchy. You don‚Äôt want it to be deep, and you don‚Äôt want it to be wide, alright? If that‚Äôs the problem you have, there‚Äôs no better solution that inheritance and you‚Äôre free to use it. Inheritance is not, evil but sometimes we are.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although I‚Äôve provided the gist of the talk in context of inheritance, there are a lot of other good things that you can learn from the talk, so you must watch it.&lt;/p&gt;

&lt;h2 id=&quot;other-patterns&quot;&gt;Other patterns&lt;/h2&gt;

&lt;p&gt;I also wrote a bit about the use of design patterns in the Java collections framework. That‚Äôs something I‚Äôd like to explain further. As a developer, you should always look for better ways to write cleaner, simpler code. So beyond inheritance, try these things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Small classes&lt;/strong&gt; - The entire idea of maintainable software comes from writing small, extensible classes that can work together to complete a task. Make sure that your classes do a single task nicely. If you feel that the new requirements are leading to some bloat in the existing class, plan to refactor it rather than adding behaviour that doesn‚Äôt belong to it. I‚Äôll touch on &lt;em&gt;refactoring safely&lt;/em&gt; in my next blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design patterns&lt;/strong&gt; - There‚Äôs nothing new that I‚Äôm suggesting here. It‚Äôs important for all engineers to read about design patterns at least once so that you do not make the same mistakes that these patterns solve. I‚Äôve personally found &lt;a href=&quot;https://refactoring.guru/design-patterns&quot;&gt;this website&lt;/a&gt; excellent for design patterns (and &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;code smells&lt;/a&gt;) but it‚Äôs ok if you‚Äôve read &lt;a href=&quot;https://www.amazon.in/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8&quot;&gt;GOF&lt;/a&gt; or some other book. I‚Äôve personally used Facade, Adapter, Decorator, Proxy, Strategy and a few more design patterns in my projects to simplify the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Composition over Inheritance&lt;/strong&gt; (&lt;a href=&quot;https://www.geeksforgeeks.org/favoring-composition-over-inheritance-in-java-with-examples/&quot;&gt;more here&lt;/a&gt;) - A lot of code that we write using Inheritance can be simplified using Composition pattern. By composing objects from simpler, reusable components, you create more flexible and maintainable code. Composition allows you to change or extend behaviours dynamically without altering existing code, unlike inheritance that leads to rigid hierarchies and tight coupling.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While inheritance has been a cornerstone of Object-Oriented Design, it‚Äôs important to recognise its limitations and explore alternatives that offer more flexibility and maintainability. As your software evolves, adopting these approaches can lead to more maintainable code.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="inheritance" /><category term="oops" /><category term="design" /><summary type="html">I started learning Object-Oriented Programming (OOP) with C++ during my college days, and Inheritance is one of the key concepts you can&apos;t miss when learning OOP. In fact, inheritance is one of the four core principles of OOP, along with...</summary></entry><entry><title type="html">Branch International Interview Experience</title><link href="https://gagan93.me/blog/2024/06/27/branch-interview-experience.html" rel="alternate" type="text/html" title="Branch International Interview Experience" /><published>2024-06-27T00:00:00+05:30</published><updated>2024-06-27T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/06/27/branch-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/06/27/branch-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-06-27-branch-international-interview-experience.png&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;After giving a lot of interviews in small and large companies, I‚Äôve &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7203321685398212609/&quot;&gt;joined Branch International&lt;/a&gt; this month. As I‚Äôve shared my past interview experiences &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;here&lt;/a&gt;, I‚Äôm sharing this one too. My profile was shortlisted for the position of &lt;strong&gt;Senior Software Engineer&lt;/strong&gt; through the &lt;a href=&quot;https://tophire.co/&quot;&gt;Tophire&lt;/a&gt; platform. After that, their account executive contacted me. Once they finished, I was connected to a recruiter from Branch, who explained the company and the role to me. Those who do not know much about the company:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Branch is a &lt;strong&gt;registered non-banking financial company&lt;/strong&gt; (NBFC) regulated by the RBI, offering services in India and select international markets&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Branch‚Äôs &lt;strong&gt;fully-remote team&lt;/strong&gt; is spread across India, the US, and Africa, bringing together diverse expertise.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We offer a range of financial solutions, including &lt;strong&gt;micro-loans&lt;/strong&gt; and &lt;strong&gt;investment products&lt;/strong&gt;, to help you achieve your financial goals&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interview-process&quot;&gt;Interview Process&lt;/h2&gt;

&lt;p&gt;After speaking with the Tophire account manager and the company‚Äôs recruiter, these were the interview rounds:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hiring Manager Conversation&lt;/strong&gt; - This round was scheduled with the Chief Technology Officer. The aim of this round was to understand my current role, aspirations and what I am looking for in the next role. We discussed about my projects and about a few more technical things briefly. I took this as a chance to learn more about the company and their tech stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical Screening Round&lt;/strong&gt; - This round was scheduled with a Senior Engineer from the India team. It consisted of two parts - a data structures problem (easy) and rapid questions and answers based on web. I solved the data structures problem on &lt;a href=&quot;https://coderpad.io/&quot;&gt;Coderpad platform&lt;/a&gt; where I could choose any language to implement the solution. I was able to wind up with a working solution in 18-20 mins. There were no modifications done in the problem statement to make it harder so we moved to the next part. The rapid fire QnA part was quite unique. The questions were related to databases, security, scalability, low-level design, authentication mechanisms, etc. No coding was required to answer these questions, but they were great for assessing someone‚Äôs experience in backend development.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Low Level Design Round&lt;/strong&gt; - This round was scheduled with a Senior Engineer from the US team. The problem statement was designed in a way to see how would someone design APIs. I did not write any code in this round. We picked one problem and discussed how the APIs would look for that problem. Apart from a few APIs, rest of them were quite simple. In these (slightly complex) APIs, there were multiple ways to implement but I chose the RESTful method and explained the reasoning behind my decision. For a very specific requirement, I was also asked to write a SQL query.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;High Level Design Round&lt;/strong&gt; - This round was scheduled with an Engineering Manager from the India team. The problem statement was around one of their products. I started sketching the system after understanding the initial requirements. They asked about the role of each box (the service) in my design, the choice of database, protocols etc. After discussing each design decision in detail, we also discussed how I would test, deploy and monitor this system. We winded up the discussion in an hour.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Presentation Round&lt;/strong&gt; - This round was very unique where I was asked to prepare a presentation on my past projects and present that in front of a panel. The panel included all the previous round interviewers, and a few more people. I had submitted the presentation to company recruiter few days before the round. I presented 3-4 major projects and the panel cross questioned me wherever they needed more details. According to their job description, this round was to better understand:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Verbal and written communication skills, and ability to handle questions,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Complexity and scale of work,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ability to execute on a project, in particular around evaluating tradeoffs and making decisions&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Final Discussion Round&lt;/strong&gt; - After clearing all the rounds, the company recruiter informed me that they want to extend an offer and scheduled a call with the hiring manager again. During this call, the hiring manager asked for any feedback I had about the overall process. They explained the compensation structure, and I asked a few questions that I had noted down. They gave me time to think before accepting the offer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After careful consideration, I accepted the offer and resigned from my position at LocoNav where I had worked for over six years. It was a tough decision to leave after spending such a long time. I joined Branch on June 3, 2024, and it has been great since then.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="branch" /><category term="interview" /><category term="senior-software-engineer" /><summary type="html">I interviewed for the position of Staff Engineer II at Bain and Company in Jan-Feb 2024. They were hiring engineers for the Gurgaon team (that&apos;s a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to..</summary></entry><entry><title type="html">Tech Interview Mistakes</title><link href="https://gagan93.me/blog/2024/05/24/tech-interview-mistakes.html" rel="alternate" type="text/html" title="Tech Interview Mistakes" /><published>2024-05-24T00:00:00+05:30</published><updated>2024-05-24T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/24/tech-interview-mistakes</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/24/tech-interview-mistakes.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-24-tech-interview-mistakes.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@francisco_legarreta?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Francisco De Legarreta C.&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/a-man-with-glasses-is-looking-at-a-laptop-hHg9MC-G8_Y?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;There are a lot of mistakes people make while preparing for and giving technical interviews. Like everyone else, I also made a lot of mistakes during my interview journey and learned the hard way (by getting rejected). Generally speaking, rejections shouldn‚Äôt hurt you because they teach you a lot. But in tech interviews, there are scenarios when things are outside your control, despite the best preparation. We‚Äôll discuss about such scenarios in the end of this post.&lt;/p&gt;

&lt;p&gt;To start with, I‚Äôll divide this post into two parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Preparation mistakes (during preparation).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Execution mistakes (during interview).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;during-preparation&quot;&gt;During Preparation&lt;/h3&gt;

&lt;p&gt;When I started looking out, I was completely unaware of industry expectations. I got in touch with a few people who had switched roles in last few years to understand the same. Apart from industry expectations, there were many other things that I had to know, like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How titles work in different companies?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to prepare for the specific rounds? What sources are good (free / paid)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How interviews are different from real work?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the companies hire me if my tech stack doesn‚Äôt overlap much with theirs?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The more you know about all these things, the better you can prepare and manage your expectations. Let‚Äôs talk about all these things one by one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not understanding industry expectations&lt;/strong&gt; - There are two types of companies (or roles that are open). Some roles explicitly mention that you need to be an expert in a specific technology stack to even get shortlisted. The other category is of roles that require you to be a good problem solver who can learn the tech stack and get things done. Both the roles have their own significance and we cannot blame the hiring team for being stringent in the first case. If the product is in early stage, the company would prefer to hire someone who is familiar with the stack so that they can contribute fast without the need of ramping up. If the product is in later stage, it‚Äôs upto the choice of hiring team - they could hire people from a different technology stack, or they may still prefer to hire people with the same stack only. It depends on the stack also - incase they‚Äôre using something very niche (for which developers are not available easily), the hiring team relaxes the tech stack expectations. But incase hiring for that tech stack is easy, they‚Äôd prefer someone who knows the stack. In my experience, it‚Äôs easier for companies to find Java developers so rather than hiring for &lt;em&gt;Senior Software Engineer&lt;/em&gt;, they put the job title as &lt;em&gt;Senior Java Engineer&lt;/em&gt;. For medium-large organisations, the positions are tech stack agnostic for candidates who are good at problem solving. In the first case, some interview rounds focus on specific technologies (e.g., Core Java, Spring Boot). In the second case, you can choose your favorite programming language for the coding rounds.
 The above information is from my job hunt experience in the last 6-8 months. Obviously, exceptions are always there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Strong tech stack inclination&lt;/strong&gt; - This point is interesting because, deep down, programmers have strong opinions about languages. For example, some people hate PHP (&lt;a href=&quot;https://www.reddit.com/r/PHP/comments/1fy71s/why_do_so_many_developers_hate_php/&quot;&gt;example&lt;/a&gt;) while some make fun of java for it‚Äôs verbosity (&lt;a href=&quot;https://www.youtube.com/watch?v=kdMG40wUCm4&quot;&gt;example 1&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=m4-HM_sCvtQ&quot;&gt;example 2&lt;/a&gt;, &lt;a href=&quot;https://github.com/Hello-World-EE/Java-Hello-World-Enterprise-Edition/tree/master/src/com/example&quot;&gt;example 3&lt;/a&gt;). This could still be seen as a personal choice. The bigger issue comes when people &lt;strong&gt;associate themselves&lt;/strong&gt; with one tech stack only. Let‚Äôs take my example - I‚Äôve been majorly writing Ruby for the past 9 years but I‚Äôve also written a little bit of C, Java for Android, Powershell, Bash, jQuery, BackboneJS, and a few other languages in my current and previous role. While I too have opinions about what languages to avoid, I did not limit my job search to Ruby/Rails openings only. Limiting my job search to only Ruby/Rails positions would have been stupid, especially in the current market where openings are less. I‚Äôd recommend the same to everyone - do not call yourself a Ruby developer, Java developer or GoLang developer. Call yourself a Software Engineer who can learn syntax and be productive in any language. Having this mindset helps a lot in the long run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confusion in job titles&lt;/strong&gt; - This is the most important thing to know when you‚Äôre searching for a new role. Some websites allow you to search jobs with years of experience, while some websites (like LinkedIn) allow you to search with job titles. LinkedIn also helps you to set job alerts for specific titles. Based on multiple factors, you could be eligible for multiple roles. Taking my example again - I work as a Staff Software Engineer in a small team but when it comes to job search, I search for Software Engineer, Senior Software Engineer, Staff Engineer, Team lead and Engineering manager roles. All these roles overlap with my experience range based on the size of organisation where I‚Äôm applying. I‚Äôve already explained this point in a &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;detailed blog post&lt;/a&gt;, so I‚Äôll rather leave you with a link to read the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Building Resume only once&lt;/strong&gt; - Resume building is an underrated exercise. When you‚Äôre looking out, there are high chances that you‚Äôre applying to many positions without a referral. In such cases, your resume is your first impression. If you‚Äôve not spent enough time in build the same, there are high chances that you‚Äôll not get calls from good companies. Resume building is not a one time effort. You need to work on it continuously to reword your tasks in a more impactful manner. Just like job titles, I‚Äôve already written a &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;detailed blog post&lt;/a&gt; on how I did more than 5 iterations on my resume in past 8-9 months. Even today, I don‚Äôt think my resume is the best it can be, so I keep improving it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not preparing an Introduction&lt;/strong&gt; - In all the companies, the first thing people ask is to introduce yourself. In some companies, each interviewer asks this question (although that sounds repetitive). Generally, you get a minute or less to talk about yourself before they ask about your specific projects or give you a problem to solve. You might have built a lot of products but it‚Äôs important to summarise your journey in this one minute and talk about everything that you find important. Write a long introduction of yourself, use AI to summarise it and keep improving it (just like your resume). I skipped this initially and found myself struggling while explaining my role/journey. I clearly remember that I forgot to explain to one employer that I manage a team of seven people in my current role. So my role might have sounded more of an &lt;strong&gt;IC&lt;/strong&gt; than a &lt;strong&gt;Manager&lt;/strong&gt; that could have good/bad impact based on what they were hiring for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applying directly to dream companies&lt;/strong&gt; - If you‚Äôre interviewing after a long time, do not get discouraged by rejections. Despite building a lot of things and being hands-on after 9 years of total experience (6+ in my current role), I faced a lot of rejections in the beginning. The current way of tech hiring is not the best way to hire good candidates, it‚Äôs a way to filter out candidates who are not interview ready. And being interview ready means something else for technical roles. You might not have built anything in real world but if you are prepared for the interviews, you‚Äôll get the job. And the reverse is also true. For this reason, it is important to not apply for your dream companies directly (in case you are targeting some). Do many interviews at different companies to see if you can handle the questions under pressure before applying to your target company. Given the competitive nature of the market, I‚Äôve heard from many experienced people that you should give a few interviews every year even if you‚Äôre not looking out. It‚Äôs just to bridge the gap between your current preparation and market expectations.Another way of practising to a decent level is by taking mock interviews. While there are many paid websites for the same, a free solution for the same is by using ChatGPT as your interviewer. I‚Äôve tried it and it is decently good, if not the best. You need to do some initial conversation with it to explain what it is supposed to do (otherwise it will give you both question and answer). I‚Äôll share my prompt for reference:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-24-tech-interview-mistakes-chatgpt.png&quot; alt=&quot;chatgpt&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The above screenshot is of my conversation with ChatGPT when I was preparing for my final round at Bain &amp;amp; Co (read the &lt;a href=&quot;https://blog.gagan93.me/bain-and-company-interview-experience&quot;&gt;complete interview experience&lt;/a&gt;). It‚Äôs important to set context for ChatGPT before you start the conversation. You can modify the above prompt for technical roles as well. I also prepared for System Design interview using this format.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Overconfidence&lt;/strong&gt; - Assuming that you already know everything can be bad. It happened with me when I was learning LLD and HLD. Because the problems seemed familiar/simple, I thought I‚Äôll be able to crack the rounds (till I failed 1-2 of them initially). Everything demands your time and some practice. Tech interviews demand even more practice because you‚Äôre expected to build (LLD) or talk about a MVP (HLD) within a period of 40-50 minutes. Although problems seem simple, thinking about the models, APIs, writing code, or talking about high level design, databases, protocols, challenges within this time period is very hard if you‚Äôve not spent time in practising the same. I always recommend everyone to solve at least 5-10 problems for both LLD/HLD (without looking at the solutions) before appearing for any company.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the top six things that came to my mind from my experience. Now let‚Äôs talk about mistakes during interviews.&lt;/p&gt;

&lt;h3 id=&quot;during-interviews&quot;&gt;During Interviews&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not talking enough / talking a lot&lt;/strong&gt; - In an interview, you have an hour to talk about yourself and showcase your skills. It‚Äôs important that you portray best of your skills. A good technical interview is a collaborative exercise where you and your interviewer solve a particular problem. In most of the cases, the interviewer has a fair idea around possible solution(s) because they have asked the same problem many times. A good candidate would ask questions (not cleverly seek hints) to understand the problem in depth before jumping towards the solution. There are generally three technical rounds - Data Structures, LLD and HLD. While Data structures question is a mathematical question (i.e. can be judged as right or wrong), the other two are somewhat open-ended. In many cases, ambiguities are present in the problem statement (even in DS round) to see how the candidate interprets the problem and asks questions. It‚Äôs our responsibility to make sure that we‚Äôre querying the interviewer to frame the problem better, scope the boundaries of the problem and present a solution that works for it. It‚Äôs quite possible that some iterations are needed to tailor the solution to cover edge cases or changing requirements. I‚Äôll just recommend to keep on talking with your interviewer to make share what‚Äôs going on your mind. On the opposite side, don‚Äôt keep talking so much that you don‚Äôt leave space for them to talk or share their feedback on your solution. A balance is important here. In my experience as an interviewer, very few candidates talk more than what is required, but talking less is a common problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Assuming without discussing&lt;/strong&gt; - While you‚Äôre talking, make sure that you don‚Äôt &lt;strong&gt;assume&lt;/strong&gt; anything in your mind. Assumptions can lead to different solutions, hence it is important to speak about your assumptions. If that assumption is wrong, your interviewer will point out the same. For example: In most of the LLD problems if I‚Äôm talking about APIs, I assume that authentication is always in place and some header is coming in all the requests that is interpreted by the server for identifying the user. While most of the interviewers agree to this assumption, one of the interviewer asked this question- &lt;em&gt;What are the different authentication mechanisms you know about, and which one you‚Äôd like to use here (and why)?&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Design Interviews) Stubborn with choices&lt;/strong&gt; - In design interviews, you try to solve a problem by using some components like Databases, Load balancers, API Gateways, Firewalls, Protocols, API Servers, etc. Let‚Äôs take an example of a System Design interview. The most common discussion that happens in almost all the interviews is around the choice of database - SQL vs NoSQL (let‚Äôs assume we‚Äôre comparing SQL databases with Document oriented databases like Mongo/Elastic). We need to have strong reasons to choose one kind of database for the specific use case rather than &lt;a href=&quot;https://www.youtube.com/watch?v=b2F-DItXtZs&quot;&gt;this guy&lt;/a&gt; who is a MongoDB fan. There are many more places in a design interview where we need to make choices (eg. protocols). Just choosing one side is not enough - you need to justify your choice (or your interviewer will ask you to). Stubborn candidates leave a very bad impression on the interviewer and usually get rejected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Design Interviews) Finding the core problem / not catching hints -&lt;/strong&gt; In both LLD and HLD interviews, there is &lt;strong&gt;one core problem&lt;/strong&gt; that we‚Äôre solving. As we talk more with our interviewer and frame the actual problem from that &lt;em&gt;one liner ambiguous problem statement,&lt;/em&gt; we get closer to the problem. For example:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;In a cab booking platform like Uber, matching the driver with rider could be a core problem because you need to choose the drivers using some algorithm (you can‚Äôt just search them based on displacement as they might be a river apart).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;In a movie booking platform like BookMyShow, holding the seats while user is in process of paying for the tickets, or releasing the seats when payment fails / times out could be the core problems.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Similarly, your problem statement has one core problem which you need to identity. Although other parts of the systems are also important but this is one part that interests the interviewer. While you‚Äôre talking with your interviewer, try to see if they‚Äôre impressed with your design or are they like - &lt;em&gt;there‚Äôs something more to the problem.&lt;/em&gt; Incase you‚Äôre missing something important or are going wrong, they try to give you a hint (eg. &lt;em&gt;How are you making sure that &amp;lt;this&amp;gt; problem is also addressed?&lt;/em&gt; ). Do not miss these inputs, they may impact your overall design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bad luck -&lt;/strong&gt; In the beginning of this post, I wrote about a problem that is outside your control. That‚Äôs bad luck. I‚Äôll share some scenarios to explain this:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Untrained interviewers -&lt;/strong&gt; This usually happens in small companies where they‚Äôre trying to expand the team. The interviewers might not be trained to conduct the discussion properly. Generally, some senior person &lt;a href=&quot;https://www.metaview.ai/resources/blog/interviewer-shadowing-the-secret-of-the-most-effective-hiring-machines-in-the-world&quot;&gt;shadows the new interviewer&lt;/a&gt; to make sure they are ready to interview but in small companies (due to multiple things running in parallel) such processes are not mature and training is not sufficient.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Stubborn interviewers&lt;/strong&gt; - Not only candidates, interviewers can be stubborn. It‚Äôs hard not only to work with them but even harder to do an interview. Such interviewers have one approach in mind and would expect you to give exactly same solution. I‚Äôve faced this once where despite doing everything well, I was rejected. And this was because there was &lt;strong&gt;one thing&lt;/strong&gt; that they wanted to happen in a certain way and I suggested something else (with a valid reason). This person also gave me feedback (I generally ask for the same at the end of interview) that I should have asked about scale of system (in a LLD problem) so that I had modified that one thing in my solution early. I‚Äôve &lt;strong&gt;never seen&lt;/strong&gt; anyone else talking about ‚Äúscale of system‚Äù in a LLD interview. We generally go into details of API design, database design and the core problem.
 The best part - they were junior to me by designation, years of experience, and attitude towards better solutions :)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from this, many other things (like mood of the interviewer) can impact your performance. Such things are generally not in your hands. Just like for candidates, interviewers also need training and feedback. In the organisations where interview process is more formalised and where interview calls are recorded, there are high chances that the interviewer would get feedback(s) if they need to improve on certain axes. In many organisations the feedback process is completely missing, which leads to bad candidate experience. If you face such a situation, you can also share your feedback with the recruiter / hiring manager. Make sure your tone is professional and not rude if you want them to consider your feedback.&lt;/p&gt;

&lt;p&gt;I hope the above points would help you to avoid mistakes that people (including myself) generally make. Good luck for your preparation üëç.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="mistakes" /><category term="software-design" /><summary type="html">There are a lot of mistakes people make while preparing for and giving technical interviews. Like everyone else, I also made a lot of mistakes during my interview journey and learned the hard way (by getting rejected). Generally speaking, rejections shouldn&apos;t hurt...</summary></entry><entry><title type="html">Low Level Design Interviews</title><link href="https://gagan93.me/blog/2024/05/17/low-level-design-interviews.html" rel="alternate" type="text/html" title="Low Level Design Interviews" /><published>2024-05-17T00:00:00+05:30</published><updated>2024-05-17T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/17/low-level-design-interviews</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/17/low-level-design-interviews.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-17-lld.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@sambourke?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Samuel Bourke&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/woman-in-gray-hoodie-sitting-on-chair-in-front-of-laptop-computer-foH9owaHXng?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I work as a Staff Software Engineer at LocoNav. When I give interviews with my current experience (that is close to 9 years), I am considered for these roles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Software Engineer / Senior Software Engineer,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Staff Software Engineer / Lead,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Engineering Manager (incase I want to move to a management role).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The responsibilities for each role are highly dependent on the organisation‚Äôs needs, and it doesn‚Äôt harm me in the long run if I switch from &lt;em&gt;Staff Engineer&lt;/em&gt; to &lt;em&gt;Senior Engineer&lt;/em&gt; in my next role, as some might think (&lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;explained here&lt;/a&gt;). According to the role, the Low Level Design round and the overall interview process can be very different. Although the aim of this post is to talk about LLD with respect to interviews, but I believe it‚Äôs a skill that should help you on your job as well. So don‚Äôt limit your learning to interviews only.&lt;/p&gt;

&lt;h2 id=&quot;what-is-lld&quot;&gt;What is LLD?&lt;/h2&gt;

&lt;p&gt;From wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Low-level design&lt;/strong&gt; (LLD) is a component-level design process that follows a step-by-step refinement process. This process can be used for designing data structures, required software architecture, source code and ultimately, performance algorithms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There‚Äôs a reason for sharing this formal definition. Unfortunately, the &lt;strong&gt;interview directed preparation&lt;/strong&gt; has spoiled the &lt;strong&gt;step-by-step&lt;/strong&gt; nature of Low Level Design for many people. In many cases, the interviewers expect you to magically present the best design with working code and test cases within 45-50 minutes. While this is somewhat doable by practising the common problems, this is not what design means in Software Engineering.&lt;/p&gt;

&lt;p&gt;I‚Äôve given about 5-6 LLD interviews and all of them were not of the same kind. I‚Äôll first share &lt;strong&gt;how I prepared&lt;/strong&gt; for the interviews and improved my low level design skills in general. After that I‚Äôll share &lt;strong&gt;my experience&lt;/strong&gt; with different kind of LLD interviews I gave. In the end, I‚Äôll share different &lt;strong&gt;categories of problems&lt;/strong&gt; that I found in different playlists, courses and interviews.&lt;/p&gt;

&lt;h2 id=&quot;learning-and-improving-lld&quot;&gt;Learning and Improving LLD&lt;/h2&gt;

&lt;p&gt;Somewhere in late 2023, I was reached out by &lt;a href=&quot;https://blog.gagan93.me/atlassian-interview-experience&quot;&gt;Atlassian&lt;/a&gt; recruiting team on Instahyre when they were hiring for the position of Senior Software Engineer. At that time, I was having zero preparation and almost zero idea of the overall process. Their team phone called me to explain the entire process and shared &lt;a href=&quot;https://online.flippingbook.com/view/325478/&quot;&gt;documents&lt;/a&gt; that would help me to understand more about each round. I figured out there were three major things on the tech side - Data Structures, Low level design (LLD) and High level design (HLD/System Design). Going through details of each round, I figured out that I had practically worked on everything they would need, but I need to prepare in a way that I‚Äôm able to portray that during interviews.&lt;/p&gt;

&lt;p&gt;As anyone would do, I searched for free content. There were plenty of excellent videos on YouTube but they varied in quality. This was a typical &lt;a href=&quot;https://blog.gagan93.me/information-overflow&quot;&gt;information overflow&lt;/a&gt; problem - pick anything you want to learn and there will be 100 people on YouTube already sharing how to do it. Not all of them are the best, and almost none of them are wrong but you need to choose and stick to one or two (else you‚Äôll get lost).&lt;/p&gt;

&lt;p&gt;This was the pattern of each channel/playlist that was teaching LLD:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Teach SOLID principles,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Teach Design Patterns,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose 5-10 of the common problems (A TicTacToe Game, Snakes and Ladders Game, Elevators System, Building Splitwise, Car Rental platform, etc.). While solving these problems, they will try to fit in at least one / two design patterns in each problem.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think this is a pretty good roadmap if you‚Äôre only targeting interviews. Practice 5-10 problems in a way that you do not look into solutions before attempting them on your own. If you look into their solutions, they look very obvious and you get fake confidence that you know everything. I was in this situation for both LLD/HLD rounds where I thought that I know everything just because I watched videos. It was only after getting rejected in good companies, I figured out that &lt;em&gt;things are not that obvious&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I‚Äôll discuss little bit about each point before moving forward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SOLID principles&lt;/strong&gt; - These principles act as foundation of good design if you‚Äôre implementing your solution in an Object Oriented Language. I‚Äôm personally a very big fan of &lt;em&gt;Single Responsibility Principle&lt;/em&gt; than any other rule or design pattern. I think if someone understands this well, they can write pretty neat classes and ensure no unnecessary sharing of code/properties among classes. I‚Äôll not explain these principles in detail here, but I‚Äôll leave you with an &lt;a href=&quot;https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/&quot;&gt;excellent free blog&lt;/a&gt; to read the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design patterns&lt;/strong&gt; - These patterns are nothing but solutions to common problems that people face in Object Oriented Design. For example, in large projects, developers usually write layers of abstractions over language or frameworks. While designing these classes, they figure out that you need to provide a very simple and easy to use interface (API) for the end user. Such a pattern is known as a &lt;a href=&quot;https://refactoring.guru/design-patterns/facade&quot;&gt;Facade&lt;/a&gt;. I‚Äôve been using this pattern to build abstractions in my projects, even before I formally studied design patterns.
 If you‚Äôre 3+ years of experience, there are chances that you‚Äôve either read or heard about the &lt;a href=&quot;https://www.geeksforgeeks.org/gang-of-four-gof-design-patterns/&quot;&gt;GOF book&lt;/a&gt;. This book is known to be the original work on design patterns. Although I got a chance to find &lt;a href=&quot;https://refactoring.guru/design-patterns&quot;&gt;this website&lt;/a&gt; (they also have a PDF book) that has very good examples and illustrations incase someone wants to learn about Design Patterns. One bonus thing about this website is discussed in the next point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Bonus) Code smells&lt;/strong&gt; - Before I found a good content around code smells, I had read about a few of them in a separate blogs. Generally, no course suggests you to read about code smells, but as I promised to share content beyond interviews that would help you to actually build good LLD, I‚Äôd suggest you to read about common &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;code smells&lt;/a&gt; and their corresponding remedies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Common coding problems&lt;/strong&gt; - Pick any playlist on YouTube and you‚Äôll find authors discussing around building your own small version of Uber, ZoomCar, BookMyShow, Splitwise and so on. I‚Äôll strongly suggest you to solve at least 5-7 problems on your own (without looking into solutions) before you appear for interviews. This exercise will make sure that you‚Äôre able to apply the principles, patterns and product understanding to build a good low level design. I do not have a strong choice on the content but I‚Äôll &lt;a href=&quot;https://www.youtube.com/watch?v=rliSgjoOFTs&amp;amp;list=PL6W8uoQQ2c61X_9e6Net0WdYZidm7zooW&quot;&gt;share this one&lt;/a&gt; incase you want to get some idea on these problems.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;diving-deep&quot;&gt;Diving deep&lt;/h2&gt;

&lt;p&gt;I‚Äôve given multiple interviews for different companies and positions. So I‚Äôll share what is expected from each level:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For Software Engineer/Sr. Software Engineer&lt;/strong&gt; - The focus is more on machine coding. So your performance in Data structures and Low level design is judged more than anything.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For Staff/Principal/EM roles&lt;/strong&gt; - The focus is more on HLD (System design) and leadership qualities. Hands-on coding is evaluated less in comparison to HLD or in comparison to junior roles. You‚Äôre just asked to share the schema design, API design, any challenging part of system that you need to discuss about.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As an example, I was asked to write code for LLD of the &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/ruby/snakegame&quot;&gt;Snake Game&lt;/a&gt; in the Atlassian Interview process. As this was for a Senior Software Engineer role, the focus was on hands-on coding and they expected me to write completely working code within 45 minutes (plus some discussion around how I‚Äôd test this).&lt;/p&gt;

&lt;p&gt;Whereas for Staff Engineer role, one of the LLD round did not involve coding at all. We majorly discussed the system entities (models), their relations, little bit on database design, API design and some specific parts of the system that sounded tricky (I call it the &lt;strong&gt;core problem&lt;/strong&gt;). So it‚Äôs very important to understand in the beginning what your evaluator is looking for. In most of the cases, the evaluator should clearly explain what they‚Äôre looking for. But I‚Äôve appeared for smaller companies also where this did not happen so I thought it is better to clarify rather than assuming. As a thumb rule, &lt;strong&gt;never assume anything in an interview&lt;/strong&gt; (in any round). And if you do, share the same with your interviewer so that they can point out if that is a wrong assumption. Within a small period of 40-50 minutes, it‚Äôs very costly to start with a wrong assumption and then correct it later.&lt;/p&gt;

&lt;p&gt;I‚Äôll share a superset of what all things were asked from me in LLD round of different companies. Once the introductions are over, the interviewer gives you a problem statement. These are the things I take care of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Making notes&lt;/strong&gt;: I have a habit of taking down notes in all the technical interviews I give. I use a plain text editor window for the same (Sublime Text being my default choice for years). You could also use pen and paper but here the aim is that your interviewer should be able to read the same as you‚Äôre writing. For the same, I also share my screen in the beginning. This helps me to scope down the problem statement before I start solving the specific parts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Figure out requirements&lt;/strong&gt; - So my first task would be to understand what all parts of system we want to build. Take anything real world - Uber, ZoomCar or BookMyShow (let‚Äôs use &lt;strong&gt;BMS&lt;/strong&gt;). You cannot discuss their complete product within 45 minutes. So it‚Äôs better that you figure out with your interviewer what they are interested in. For example, in BMS problem, they might be interested in the &lt;strong&gt;core booking problem&lt;/strong&gt;, rather than discussing kind of seats in a movie hall. Similarly, while discussing a cab booking platform like Uber, the core problem could be &lt;strong&gt;driver allocation&lt;/strong&gt; and not the &lt;strong&gt;inter city travel&lt;/strong&gt; feature. Think from a product perspective here. If you have used the app, then you must be knowing about the core features (and maybe the core problem also) but incase you have not used the app, tell the same so that you both can work together to scope down the problem. Once this is done, there are two scenarios - Either they‚Äôll ask you to write the code or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding required&lt;/strong&gt; - Incase you need to write the code, start thinking about &lt;strong&gt;core entities&lt;/strong&gt; (models), their &lt;strong&gt;interactions&lt;/strong&gt;, &lt;strong&gt;relation&lt;/strong&gt; with each other. Validate your understanding with the interviewer. If they‚Äôre ok, start writing some code. Write the code in a top-down manner where you write the structure of everything first and leave some core algorithm implementation to a later time. Once the structure looks good, fill in the method implementations (based on available time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding not required&lt;/strong&gt; - Incase they have not stated the expectations, talk to them to understand if you should be writing some code or just talk about APIs, models, and some core problem. If you‚Äôre not required to write a working code, you should still mention the &lt;strong&gt;models&lt;/strong&gt; and &lt;strong&gt;services&lt;/strong&gt; because they are a starting point of your database design. In this case, do talk about detailed &lt;strong&gt;request and response formats&lt;/strong&gt;. Some interviewers want you to talk about REST APIs and see your understanding around the same, specially if you‚Äôre working on a API based problem (there are non-web problems also, discussed later). While talking about APIs, do state your assumptions (if any). For example - I assume that there is an authentication mechanism in place already and auth information is being passed in the headers for each of the APIs we‚Äôre discussing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Database schema&lt;/strong&gt; - Some interviewers can ask you to explicitly mention the specific tables and columns. In BMS, you‚Äôd have a &lt;strong&gt;city&lt;/strong&gt; that has many &lt;strong&gt;theaters&lt;/strong&gt;. Then a &lt;strong&gt;theater&lt;/strong&gt; that has many &lt;strong&gt;movie halls&lt;/strong&gt;. A hall can screen multiple &lt;strong&gt;shows&lt;/strong&gt; during a day and has multiple &lt;strong&gt;seats&lt;/strong&gt;. I hope you got an idea that highlighted words are our &lt;strong&gt;Models&lt;/strong&gt;. So the interviewer would want you to write these tables, their columns (at least important ones) to see if you‚Äôre designing the schema correctly. They can also ask you to write queries for specific APIs to see if your design can fulfil system requirements (eg. &lt;em&gt;Write a query to see if a Movie Show is completely sold out for a specific theater&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The core problem&lt;/strong&gt; - Different systems can have different core problems. For example, if you‚Äôre designing an app like &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/ruby/splitwise&quot;&gt;Splitwise&lt;/a&gt;, your core problem could be settling the amount within a group of people. For Uber, finding drivers and showing ETA could be discussed. Here, the interviewer can expect a mix of things from algorithms to design patterns based on the specific problem. As you dig deeper into the problem, there are chances that you‚Äôll figure out the core problem. Otherwise your interviewer may also give you a hint like: &lt;em&gt;I want you to talk about this problem&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Test cases/scenarios&lt;/strong&gt; - One of expectations from a good developer is to figure out how can they test their code well. Incase you wrote code and have time left, you‚Äôll be asked to write some test cases. Otherwise you‚Äôre expected to talk only around some test scenarios that you think are important. Nothing much to add here. If you know how to break your classes, follow design patterns and write test cases, that should suffice. If you think there is a part of problem in which some specific edge cases exist, do talk about it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So this is mostly what I‚Äôve seen people asking during LLD interviews. One thing I‚Äôd like to add here - I saw three kinds of problems that are generally asked:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Simple Games&lt;/strong&gt; based on some logic - Snakes game, snakes and ladders, Tic Tac Toe, Chess game, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Popular products&lt;/strong&gt; - Cab booking (Uber), Car renting (Zoom Car), some booking platform (BookMyShow), etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical systems&lt;/strong&gt; - A rate limiter, Cache with LRU eviction, A PubSub System, Key-Value database, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The different kinds of problems have their own complexity. For example, it could be easy for you to discuss an app that you use a lot (like Uber) than discussing a PubSub system. I‚Äôd suggest you to spend time practising all these kinds of problems so that you get an idea on complexity of each of them. Although the general approach (as discussed above) would remain the same. Happy learning üòä.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you for reading this detailed post on Low Level Design. If you liked this, please have a look here also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I created a small &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning&quot;&gt;github repo&lt;/a&gt; that has solutions for four LLD problems in Ruby and Java languages. If you go to any of the problem, it will have a README that describes what we‚Äôre building. You can take that README as a requirement to practice these problems. Refer my code only if you‚Äôre stuck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All my interview preparation/experience related posts are available &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wrote a post last year about the &lt;a href=&quot;https://blog.gagan93.me/classify-your-codebase&quot;&gt;benefits of building small classes&lt;/a&gt;, a practice I embraced years ago when I began refactoring systems.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="lld" /><category term="software-design" /><summary type="html">I work as a Staff Software Engineer at LocoNav. When I give interviews with my current experience (that is close to 9 years), I am considered for these roles...</summary></entry><entry><title type="html">Improving your resume</title><link href="https://gagan93.me/blog/2024/05/13/improving-your-resume.html" rel="alternate" type="text/html" title="Improving your resume" /><published>2024-05-13T00:00:00+05:30</published><updated>2024-05-13T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/13/improving-your-resume</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/13/improving-your-resume.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-improving-your-resume.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@joaoscferrao?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Jo√£o Ferr√£o&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/white-printer-paper-on-macbook-pro-4YzrcDNcRVg?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello people. I‚Äôve you‚Äôre reading this, you might be looking to build a better resume. It‚Äôs important to keep your resume updated even if you‚Äôre not looking out for a change. Sadly, not many people like me realise this on time. And because of this, we end up doing major changes in our resume when we actually start looking out. For example, I started looking out from my previous job in late 2017 and this time in late 2023. In this six years, almost everything changed - from my role to market expectations.&lt;/p&gt;

&lt;h2 id=&quot;the-versions&quot;&gt;The versions&lt;/h2&gt;

&lt;p&gt;Feel free to laugh but the 2017 resume looked like this (that got me into LocoNav). Before LocoNav, I applied to &lt;a href=&quot;https://www.reddoorz.com/&quot;&gt;RedDoorz&lt;/a&gt; also and got a call from this resume. So probably it was good according to that time and my YOE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v1.jpg&quot; alt=&quot;v1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôll not discuss a lot on this resume because I did not continue editing on this file. It needed a lot of restructuring, so rewrite was better. I‚Äôll share two more resumes based on my current skill set, the comparison between both. Even the first one was not that bad (rather it‚Äôs fancy) as it got me a call from &lt;a href=&quot;https://blog.gagan93.me/atlassian-interview-experience?&quot;&gt;Atlassian&lt;/a&gt; without a referral :)&lt;/p&gt;

&lt;p&gt;The resume shared below was created around mid 2023:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v2.jpg&quot; alt=&quot;v2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I thought fancy resume with photo would look cool üò∂. I used some template on &lt;a href=&quot;https://www.canva.com/&quot;&gt;Canva&lt;/a&gt; to build this. I shared this with 4-5 friends for a feedback. These were the points that I worked on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build a simpler resume. That photo is not needed. Better start building on a simpler tool like Google Docs. I did that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The two column resume is generally not extensible. For example, I had not mentioned a lot about my roles/responsibilities in the previous organisation. And once I added those details, the right section expanded to the second page where as left (blue-ish) section was empty.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove these things as much as possible, no one wants to read them:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;The top right part of resume [Objective] that starts with &lt;em&gt;Having about 8 years&lt;/em&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Sections like Strenghts, weakness, languages, hobbies.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had made the &lt;em&gt;Language and Platforms&lt;/em&gt; section too fancy by adding so many things, categorised under 4 sub-headings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the space is used nicely and we opt for a single column (plain Google Doc) resume, we could put the contact information in a single line (yes, I did that later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Education section could be trimmed. Remove school/college name and just talk about degree and board/university. Again this can come in 3 lines if we go for a wider page (single column basically).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The most important point - The points mentioned in the resume do not talk enough about &lt;strong&gt;the impact&lt;/strong&gt; I got into the projects. I majorly wrote like - &lt;em&gt;‚ÄúI did this task single handedly‚Äù&lt;/em&gt; or ‚Äú&lt;em&gt;I contributed to this along with the team&lt;/em&gt;‚Äù. Our focus should be on the &lt;strong&gt;outcome&lt;/strong&gt; or &lt;strong&gt;the impact.&lt;/strong&gt; No one is interested to read plain stories that do not bring a good business or engineering impact.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from this, few improvements were done from my end also:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Although I had done a lot of work in the past 6 years, it‚Äôs important to choose the impactful work. The issue in my case was that I had taken up multiple things that were very impactful but I had to choose and still let go of few good things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had divided my role as a Staff Engineer into two parts - &lt;strong&gt;Enablement team and Payments team&lt;/strong&gt;. That sounded like over-engineering the resume because for the reader, it might not make a lot of sense. Also, because the work on payment product had winded up, so I thought I should talk less about that and merge these sections. Moreover, I was working on a large internal product that was neither under payment, not enablement role, and I had to accommodate that as well. The best way was to merge a single ‚ÄúStaff Engineer‚Äù role and mention in points/sub-points.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I created second level category inside my resume wherever required. For example, for mentioning my work on the payments product, I thought it‚Äôs better to mention a wider heading and explain everything under it, rather than putting each thing about payments product in a new point where this can get mixed with other points, or where I need to mention the context of ‚Äúpayments‚Äù in a repeated fashion. Because this was now a single column resume, creating nested categories was possible and was not wasting much space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I tweaked font size, page margins, bullet margins and other settings in the Google Doc to ensure I‚Äôm not wasting space and I‚Äôm able to wrap everything in a single page. For example, I tweaked the indentation for nested bullets so that most of the nested points get completed within a single line.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used ChatGPT to ensure no typos, grammar issues. It‚Äôs also very helpful to write shorter sentences without losing the context. The only thing to see while using AI tools is that we need to make sure that overall language of resume is consistent. It shouldn‚Äôt happen that some specific points are written in a very fancy English while others are too simple. Just take care to ensure that consistency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider yourself as a problem solver (senior engineer). Don‚Äôt associate yourself closely with a technology stack when you‚Äôre talking about your contributions (eg. Java/Spring or Ruby/Rails or Python/Django). When you think in a framework-agnostic manner, you don‚Äôt use names of libraries that are specific to your tech. This makes it easier for the reader to understand incase they don‚Äôt share the same technology background. For example, Rails developers usually mention libraries like Sidekiq, ActiveAdmin, Devise and Rspec in their Resume. Now for someone who is filling a Java position, it will not be possible to understand these without googling. And resumes are hardly skimmed for a minute or less :) We should rather talk in generic terms like background processing framework, admin/backoffice library, authentication framework and testing framework. In this way, there are better chances of someone understanding your resume. Only place to mention your current language/framework is under the &lt;strong&gt;Skills section&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;This is my current resume that I have posted on my &lt;a href=&quot;https://gagan93.me/&quot;&gt;portfolio&lt;/a&gt; also.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-v3.jpg&quot; alt=&quot;v3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In comparison to the two column fancy resume, this is easier to modify because there were instances while editing the two column resume when I thought of adjusting the ratio of left and right side just because few points were crossing the line just by 1 word. Or I thought I should adjust the fonts. This one is much simpler and flexible to future modifications, just like a good software design :)&lt;/p&gt;

&lt;p&gt;Again highlighting the most important point - talk of impact. I‚Äôll share a few examples on how I modified the points to show impact:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Took the first microservice out of a 6+ year old monolith, reducing a decent load from database&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Pioneered the transition of critical components to a microservices architecture, achieving a 75% speedup in the five slowest endpoints.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Scaled Fastag payments product from 0 to 2.5Cr daily transaction amount. This is almost 2% of India‚Äôs total daily toll.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Successfully scaled the system from inception to handle 2.5Cr daily transaction (2% of India‚Äôs total toll volume).&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Worked on reducing cloud spend by analyzing usage of servers and using other methods.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt; &lt;em&gt;Strategically reduced from 70+ to 5 queues based on latency/memory requirements, optimizing approximately 25% of infra costs.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Simplified how the main entity of system (vehicle) is accessed by various components.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Planned and executed refactoring of core system entities, streamlining the access over 200+ reports and APIs.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;: &lt;em&gt;Migrated Email provider to AWS SES with bounce/complaint list handling flow.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;: &lt;em&gt;Efficiently migrated ~ 150 different kinds of emails from Sparkpost to Amazon SES implementing bounce handling for increased reliability.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removed points that could not be modified to show impact. Like:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Involved in discussing overall global architecture of logistics based Saas Product.&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Lead various other initiatives like removing huge chunks of dead code‚Ä¶&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In total, I had to do 5-6 iterations on my resume over a period of 9 months, based on feedback that I received from multiple people. The idea of this blog post &lt;strong&gt;is not&lt;/strong&gt; to provide you &lt;em&gt;the best resume template on the internet&lt;/em&gt; that will get you into your next FAANG role. I‚Äôll just share what worked for me and how I improved it over time. I‚Äôve applied in about 6-7 companies where this got selected even without a referral. This includes both big tech and smaller companies.&lt;/p&gt;

&lt;p&gt;Many of the points mentioned above are subjective, like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I‚Äôve seen many senior people adding Objective / Career Summary on the top.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or adding things like Strengths, Hobbies and Languages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I do not mean that those resumes will get rejected. I just wanted to build an optimised resume which can be skimmed over efficiently and get me some interview calls. Some job portals allow you to write a separate cover letter where you can include details of your current role and expected role (overlaps somewhat with &lt;strong&gt;Objective&lt;/strong&gt; section of the resume). At the end, it‚Äôs not about &lt;em&gt;that one way of building it&lt;/em&gt;, but for &lt;em&gt;what works for you&lt;/em&gt;. Good luck for your Resume building journey.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="interview" /><category term="resume-building" /><summary type="html">Hello people. I&apos;ve you&apos;re reading this, you might be looking to build a better resume. It&apos;s important to keep your resume updated even if you&apos;re not looking out for a change. Sadly, not many people like me realise this on time.</summary></entry><entry><title type="html">Bain and Co. Interview Experience</title><link href="https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience.html" rel="alternate" type="text/html" title="Bain and Co. Interview Experience" /><published>2024-05-13T00:00:00+05:30</published><updated>2024-05-13T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/13/bain-and-co-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-13-bain-and-co-interview-experience.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo from &lt;a href=&quot;https://www.brandcolorcode.com/bain-company/&quot;&gt;Brand color code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Staff Engineer II&lt;/strong&gt; at &lt;strong&gt;Bain and Company&lt;/strong&gt; in &lt;strong&gt;Jan-Feb 2024&lt;/strong&gt;. They were hiring engineers for the &lt;strong&gt;Gurgaon team&lt;/strong&gt; (that‚Äôs a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to their website where I applied. For those who haven‚Äôt heard much about the company:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Popularly abbreviated as &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Three_(management_consultancies)&quot;&gt;MBB&lt;/a&gt;, McKinsey, Boston Consulting Group and Bain &amp;amp; Company are known as the Big three management consultant firms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As the name suggests, these are mostly into consultancy and not in product development. And unlike other consultant firms where developers are outsourced by the company to build something, these big firms mostly ‚Äúplan‚Äù the execution. Generally, the actual implementation (code) is not done by these companies. They just meet clients to understand the problem, document everything and make plans.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most of the roles are &lt;strong&gt;Individual Contributor&lt;/strong&gt; roles where you‚Äôre expected to travel for 20-50% of your time (based on role/seniority). This is true for engineering roles as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interview-process&quot;&gt;Interview process&lt;/h2&gt;

&lt;p&gt;I got an email from their recruitment team that they want to schedule a hiring manager call to begin with. Except for one instance, entire communication happened over emails and the team was quite responsive. There were &lt;strong&gt;five rounds&lt;/strong&gt; in total. I cleared all of them but because there was a single vacancy and high competition, I was informed that they chose someone else. Overall, it was a good learning experience as this was the first time I went through all the rounds for any company‚Äôs process.&lt;/p&gt;

&lt;h3 id=&quot;hiring-manager-round&quot;&gt;Hiring manager round&lt;/h3&gt;

&lt;p&gt;This was scheduled with Sr. Director of Global Engineering team who was based out of Singapore. There are many companies that put you through the evaluation process directly but I like the organisations where we have a human interaction with a senior person before starting with the interview rounds. They make sure that they understand your current role, future growth path/expectations and also explain the new role in the best possible way. For example, most of us work with product/service based companies where travel is almost negligible for engineers. This was very different for Bain. Another thing was that we get to code less in consultant roles. He made sure that I completely understand these two things before starting with the evaluation process. He sounded calm and ‚Äúnot in a hurry‚Äù like many directors/senior managers. We did some technical discussion around my projects but only on surface level.&lt;/p&gt;

&lt;h3 id=&quot;live-coding-round&quot;&gt;Live coding round&lt;/h3&gt;

&lt;p&gt;This was scheduled with a &lt;strong&gt;Senior Engineer&lt;/strong&gt; who just got promoted to &lt;strong&gt;Staff&lt;/strong&gt;. Generally, when you talk to Engineers during interviews, you might find them less expressive but people at Bain are much more open (and somewhat more professional) when it comes to communication. This is because Engineers also deal with the clients and are expected/trained to be good on communication skills. A junior engineer also joined the interview as an observer. He dropped mid way due to a clashing meeting. The problem statement was based on strings and 1D arrays (quite simple, but I don‚Äôt remember exactly). While the problem was simple to solve, the platform they chose was not good. Most of the coding interviews I gave were on platforms like Coderbyte that has a wide choice of languages. Being a Ruby Engineer, I prefer to solve DS questions in &lt;strong&gt;Ruby&lt;/strong&gt; but here, the choice was among &lt;strong&gt;Python, Java and Javascript&lt;/strong&gt;. This was not communicated by HR team in advance. Somehow I ended up coding the solution in Java, which is my second language of choice, and that ran without any issues. I expected another question but the interviewer preferred to play around with minor changes in requirements and edge cases, all of which were passing. This sounded easier than I expected and what I faced in other companies.&lt;/p&gt;

&lt;h3 id=&quot;technical-assessment&quot;&gt;Technical Assessment&lt;/h3&gt;

&lt;p&gt;This was basically a &lt;strong&gt;System Design / HLD round&lt;/strong&gt; with another &lt;strong&gt;Staff Engineer II.&lt;/strong&gt; I prefer interviews during morning hours because I‚Äôm fresh at that time. But because of interviewer‚Äôs preference/availability, this was scheduled in the evening. I‚Äôm generally mentally-saturated by that time (6PM IST). The problem statement was around designing a &lt;strong&gt;blob&lt;/strong&gt; &lt;strong&gt;storage platform&lt;/strong&gt; like &lt;strong&gt;Dropbox / Google Drive&lt;/strong&gt;. Although this is a common HLD problem, I had not solved it before. The only way was to think from first principles. I‚Äôm good at cloud related things and protocols so that never remains an issue for me when I‚Äôm solving a HLD problem. I‚Äôm also good at databases but my major exposure is around SQL databases only. Considering the numbers shared by them, I tried to propose a NoSQL database for the metadata storage. They immediately pointed this out and asked me why I chose a NoSQL database here. When I started pointing out the reasons, I figured out that I was not having strong reasons to go for NoSQL. Within next two minutes, both of us mutually agreed to start with a SQL database like PostgreSQL. The major discussion in a blob storage backend (from a functional perspective) is to think about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Breaking file(s) into chunks for both uploading/downloading.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hashing these parts to see if it already exists on the backend (can happen frequently for large platforms or when people upload duplicate files).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encryption/Decryption on client/server side (this was one of the requirements).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talk about Disk, storage, cost, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I had read read an article on &lt;a href=&quot;https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html&quot;&gt;Amazon S3&lt;/a&gt; (not full, it‚Äôs a long one for me to absorb). I took some ideas from it when talking about low level storage. Although S3 is much more complex and I was not supposed to talk about things like storage tiers. We didn‚Äôt conclude our discussion around all the points (can happen in a HLD round, that is more open ended in comparison to coding rounds) but he asked me to talk around APIs, schema design and draw some boxes on &lt;a href=&quot;https://excalidraw.com/&quot;&gt;Excalidraw&lt;/a&gt; (my choice for drawing diagrams) before the time ends. The overall discussion went very well. Hence, I qualified.&lt;/p&gt;

&lt;h3 id=&quot;technical-assessment-case-study&quot;&gt;Technical Assessment (Case Study)&lt;/h3&gt;

&lt;p&gt;This was another HLD round scheduled with &lt;strong&gt;Director of Engineering, India team&lt;/strong&gt;. He wanted to understand about my projects in great depth and probe around choices. Then we moved to designing an app that we regularly use - like &lt;strong&gt;Zomato&lt;/strong&gt;. He asked some problems specific to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How we‚Äôll show restaurants/branches near customer‚Äôs current location?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What tables will you make to store restaurants, branches, etc?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you build Zomato‚Äôs homepage (gave some requirements, similar to the actual app)? Write SQL queries and see what things should be cached for fast page load.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the previous round was centered around a single problem (Blob storage), this included my projects, a case study, discussion around databases, discussion around other technology choices, and a lisuttle bit on the product side.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;After this round, I got a phone call from the recruiter (for the first time). They gave me feedback on all my previous rounds which was very positive. The only negative she pointed out that I sounded comfortable with only Ruby programming language. She concluded this because I had mailed them about the platform issue in live coding round that did not have sufficient language options to choose from. I explained the same and I told that I was comfortable enough with Java to solve the problem within time. I again explained that I consider myself as a &lt;em&gt;Sr. Engineer&lt;/em&gt;, and not a &lt;em&gt;Ruby Engineer&lt;/em&gt; but their platform should have had more options available. Otherwise they should inform the same before the interview. It was important for them to clear this expectation from their side, as for client projects languages keep on changing. Moreover, most of their enterprise clients were using Java/C#.&lt;/p&gt;

&lt;p&gt;They told me that next round is with an Expert Partner. This will be a Behavioural Round (kind of cultural fit round). Because the partner is generally travelling, I‚Äôll have to provide my availability over multiple slots in a week and they‚Äôll schedule in any of these slots.&lt;/p&gt;

&lt;h3 id=&quot;behavioural-round&quot;&gt;Behavioural Round&lt;/h3&gt;

&lt;p&gt;As explained, this was held with an &lt;strong&gt;Expert Partner&lt;/strong&gt; from &lt;strong&gt;APAC region&lt;/strong&gt;. The interview was scheduled for 45 minutes but in the beginning they told me that they just have 30 minutes because of a last minute meeting setup with a client. This was the first time I was giving Behavioural Round in my life so I had spent considerable time in understanding what this round is meant for. Obviously, I couldn‚Äôt fool this person if I was not a cultural fit because they had 21 years of experience and 16+ years within Bain. But I said to myself - If I fail in this round after clearing 4 technical rounds, this would be the worst thing. I checked a lot of videos to learn about the STAR approach, making stories out of things you‚Äôve done in your career. There was one short video that suggested to build stories around (at least) these axes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Stories that indicate good leadership,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Where you acted as a great team player,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accomplishment story to show that you can tick off your goals,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overcoming hurdles to show that you can surpass challenges,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Failure story to show that you learn from your mistakes and bounce back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I say ‚Äústories‚Äù, don‚Äôt take me wrong. It doesn‚Äôt mean creating fake stories. Because the interviews are structured in a way that you‚Äôre evaluated on a lot of things in a short interval, it‚Äôs good to know the axes on which you should prepare before-hand. Otherwise you might have showcased all the skills but you‚Äôd still forget those when you‚Äôre asked during an interview.&lt;/p&gt;

&lt;p&gt;The interview started with our introductions. He talked a little bit around Logistics business (i.e. around LocoNav). Then they said ‚Äú&lt;em&gt;You‚Äôve worked at LocoNav for 6 years, can you explain me one big task that you completed each year&lt;/em&gt;‚Äù. This was the moment when all the preparation felt useless. While I‚Äôve done a lot of work at LocoNav and everybody around me knows that, I felt blank for 2-3 seconds. After that I started explaining my contributions. There were a few more questions that were no where related to what I had expected. At the end, they asked if I had questions for them. I asked a few questions and we wrapped with the interview.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The interview at Bain took slightly longer than other companies. The overall process took close to 2 months as rounds happened within a gap of 1-2 weeks, specially for the last round where availability of Expert Partner was very limited. Even after the last round, they took 2-3 weeks before sharing the result. I was informed that there was &lt;strong&gt;only one opening&lt;/strong&gt; for this position and they shortlisted some other candidate. I probed for more details during the month of March because this feedback seemed like a generic &lt;em&gt;platform generated email&lt;/em&gt;. The HR added the hiring manager to the email and they both confirmed the same. It sounded somewhat like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;From HR:&lt;/p&gt;

  &lt;p&gt;Thank you for reaching out. We had multiple candidates, including yourself, who progressed to the final stages of the interview. It‚Äôs important to note that while you demonstrated strong skills and abilities, the candidate who ultimately succeeded in the final round performed exceptionally well. This outcome doesn‚Äôt reflect any deficiency in your skills; rather, it‚Äôs a testament to the competitive nature of the final selection process.&lt;/p&gt;

  &lt;p&gt;--&lt;/p&gt;

  &lt;p&gt;From the Hiring Manager:&lt;/p&gt;

  &lt;p&gt;Thanks for reaching out. Yes, we liked your candidature and got good feedback from the interviewers. Unfortunately we only had one open position at this point of time and had a tough decision to select one candidate. We will surely reach out to you if we open more positions in the future.&lt;/p&gt;

  &lt;p&gt;Once again, really appreciate the time and effort you spent for the interview process with us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got some relief after this email, because I believe feedbacks must be shared when a candidate spends time with you. Including all the emails, the phone call and the interview rounds - I spent more than 6 hours with them. I read a lot about consultant life during the interview process to see if I can work like that (because I‚Äôm not a travel freak). I might have given a chance to this role if I was selected. I also thought - will I stay relevant in the &lt;em&gt;SaaS Product industry&lt;/em&gt; if I opt for this role for a few years (that doesn‚Äôt involve hands-on coding)? But whatever happens, happens for the best. I got the complete experience but I was not selected. I was overall happy.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="bain" /><category term="interview" /><category term="staff-software-engineer" /><category term="consultant" /><summary type="html">I interviewed for the position of Staff Engineer II at Bain and Company in Jan-Feb 2024. They were hiring engineers for the Gurgaon team (that&apos;s a small team of &amp;lt;15 engineers). They had posted the job on LinkedIn, that redirected to..</summary></entry><entry><title type="html">Stripe Interview Experience</title><link href="https://gagan93.me/blog/2024/05/07/stripe-interview-experience.html" rel="alternate" type="text/html" title="Stripe Interview Experience" /><published>2024-05-07T00:00:00+05:30</published><updated>2024-05-07T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/07/stripe-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/07/stripe-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-07-stripe-interview-experience.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo from &lt;a href=&quot;https://www.google.com/search?sca_esv=87522dea2824ff52&amp;amp;sca_upv=1&amp;amp;sxsrf=ADLYWILkvvPEaLSLta0vbUlLLiSxs0BWaw:1715080024675&amp;amp;q=stripe&amp;amp;uds=ADvngMjTNPKEE-q7I44lun7GC2_xSBJakMDKk-zKP558UX3sGFgOo0obkT031nY191A6wYa4TKscNMz9nP09qudeXs6qjCVIMuAYWsNeUj1s-4H7nT9Qe8VwqZDmCXUj1j6FA1u2k2VYrDv3nso5ytnOUTS-I_q57ncjE0lSWYQOUjGzhq2Q6jSJwajnI5-4O-5SG-GId7Ebxmrab0S7tl0xBLhPcrufYwvgG_qRMVkigo81MJHwaHwu31KwhIxtySTCHOFpjrTG_mwsclx4pnuJ8YDWgoKJb-w717k6A5s5toPiq-guPtM&amp;amp;udm=2&amp;amp;prmd=isvnmbtz&amp;amp;sa=X&amp;amp;ved=2ahUKEwi0_Ib9svuFAxWybmwGHTv9D0QQtKgLegQIDBAB&amp;amp;biw=1496&amp;amp;bih=812&amp;amp;dpr=2#vhid=LKToaxY8zwIc8M&amp;amp;vssid=mosaic&quot;&gt;Stripe Engineering&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Staff Software Engineer&lt;/strong&gt; at &lt;strong&gt;Stripe&lt;/strong&gt; in &lt;strong&gt;December 2023&lt;/strong&gt;. They were hiring engineers in the &lt;strong&gt;Verification &amp;amp; Identity Platform team&lt;/strong&gt;. I applied through a referral as that increases your chances of getting shortlisted. For those who haven‚Äôt heard much about Stripe:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It is one of the big players in &lt;a href=&quot;https://docs.stripe.com/products&quot;&gt;global payment products&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the past, Stripe has been known to be the &lt;a href=&quot;https://www.linkedin.com/posts/gergelyorosz_stripe-softwareengineering-activity-7140426202174967808-xDQE/&quot;&gt;largest Ruby codebase&lt;/a&gt; in the world. They used Sinatra (not Rails) for web apps, so they‚Äôre not the largest Rails codebase (which &lt;a href=&quot;https://shopify.engineering/shopify-monolith#:~:text=Our%20main%20monolith%20is%20one,of%20developers%20currently%20adding%20features.&quot;&gt;Shopify is&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They have a wide tech stack now but their founder explains &lt;a href=&quot;https://www.quora.com/Why-did-Stripe-choose-to-use-Ruby-for-its-backend-language&quot;&gt;why they used Ruby&lt;/a&gt; to start with. Stripe also has a very &lt;a href=&quot;https://stripe.com/blog/engineering&quot;&gt;popular technical blog&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Stripe asks the candidates to sign a &lt;a href=&quot;https://news.ycombinator.com/item?id=1952848&quot;&gt;NDA&lt;/a&gt; because of which I cannot share the exact interview questions but I‚Äôll still share the format of interview and difficulty of questions to some extent.&lt;/p&gt;

&lt;h2 id=&quot;interview-rounds&quot;&gt;Interview rounds&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Telephonic round with Recruiting team&lt;/strong&gt; - This was scheduled to understand my role, projects, career goals and set up alignment with the role. The recruiter was based out of Singapore and was taking care of APAC hiring. Although they were not technical, they were expert in explaining the job description and were clearly able to point out things that I was not doing right now in my job role (that they needed for the role). For example, I work as a Staff Engineer at LocoNav which is a small team. So here, my role doesn‚Äôt involve regularly setting up technical direction for the team but considering Stripe‚Äôs scale, Staff Engineers are very senior in role and they take care of the same on regular basis. So, they told me before hand that based on my performance, I might be &lt;strong&gt;down-levelled&lt;/strong&gt; if they see a need to do this. This could sound discouraging as the position below &lt;strong&gt;Staff Engineer&lt;/strong&gt; was of &lt;strong&gt;Software Engineer&lt;/strong&gt; but they explained that engineers with the experience range of 0-15 years of experience do fall under this role. This is so because Staff Engineers are very senior in Stripe and they do not have a middle role (i.e. Senior Software Engineer).
 On a side note, I wrote about &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;titles and down-levelling&lt;/a&gt; incase you want to understand when it is good or bad for you. Additionally, although the JD mentioned the location as &lt;strong&gt;Remote&lt;/strong&gt;, the recruiter clarified that they‚Äôre planning to start WFO soon (early 2024) so the location would be Hyderabad/Bangalore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System Design Round&lt;/strong&gt; - Staff Engineers at Stripe typically go through &lt;strong&gt;two&lt;/strong&gt; System Design rounds. In each round, there is a Staff Engineer who evaluates your design. In this round, the interviewer was from a different timezone and a very senior person (~10 years senior to me). They explained the problem statement and waited for me to probe for details. While many companies ask for the design of well-known large systems (eg. Youtube, Whatsapp, Google Drive, etc), Stripe is known to ask questions around their own systems only. So the question was related to payments product. This was first ever System Design Interview that I was giving in my career, so I was skeptical on my approach. The problem statement seemed very simple and I queried 2-3 times (like ‚Äúis &lt;em&gt;this is what I have to build?‚Äù).&lt;/em&gt; At that time, I was not familiar with the fact that simple problems can also be asked for senior roles, but the expectation of solution is with respect to candidate‚Äôs expertise/seniority. Just to explain this more - You might have heard that some companies (like Atlassian) have High level design (or System Design) round even for hiring college freshers. At their level, the expectation is that they should understand basic building blocks of the overall system and have some idea on non-functional requirements. The same problem statement can be given to a Senior Engineer where the expectations will be very different. The interviewer can probe into specifics of protocols, choice of databases and so on. For Staff/Principal/Distinguished levels, the discussion can go towards privacy, compliance, regional failovers, disaster recovery etc. I started attempting the question and explained the components of the system and some APIs. I missed one thing around scale of data that the interviewer pointed out. At this point, I realised that exposing an API endpoint is not a good idea and we should have a queueing mechanism like Kafka in between for improved reliability at scale (eg. if consumer system crashes, it can retry from where it left on the Topic).
 Because this was my first ever System Design interview, I was a bit confused during my attempt and the interviewer sensed that. They shared the feedback with the recruiting team that I‚Äôm a good candidate but probably I should be considered for a lower level (i.e. Software Engineer). The same was conveyed to me and I agreed to be evaluated again for SE role. The interview process restarted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coding round&lt;/strong&gt; - As per the documents shared with me, Stripe‚Äôs interview format claims to be very different than big tech companies as they have rounds where you engage more with the interviewer to solve problems and debug issues. For example, their interview process mentions some rounds where you have a codebase ready in which you implement a specific functionality or solve a bug that they‚Äôve intentionally added. Surprisingly, this round was nothing like that and I was presented with a typical data structures problem üò∂. It was a simple problem, again related to their products (i.e. payments). I asked my doubts and implemented the solution that worked. The interviewer modified the problem statement and asked me to accommodate the same in my solution. This one took some time but I was still able to solve it. With this, the interview came to an end and he asked me if I have questions. I asked how many more variations exist in the problem, to which he said ‚Äútotal of five‚Äù. After the interview, I searched for the problem and found that this question was a typical Google‚Äôs telephonic interview round question (not one ‚Äúrelated to their products‚Äù) üò≤.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a few days, I was informed through email that I did not clear the round. I thought - maybe I was expected to solve more variations of the problem within the given time because my solution was working for the given cases. As usual, I thought I‚Äôd reach out to the recruiter to seek the exact feedback but couldn‚Äôt do so because they were on new year vacation. They asked me to schedule a slot on their calendar that never loaded on my browser. Even today if I open the link, it keeps loading like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-07-stripe-goodtime.jpg&quot; alt=&quot;scheduler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LOL. Not blaming it on them. They might have responded if I had mailed them back with the loading issue, but I lost touch due to their vacations and never contacted them again.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was a good experience with Stripe team. The recruiter was responsive on call/chat/email throughout and ensured timely response. I like their &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/stripe-part-2&quot;&gt;culture of writing&lt;/a&gt; that &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_culture-writing-team-activity-7170322475212374016-UjEc?utm_source=share&amp;amp;utm_medium=member_desktop&quot;&gt;starts from their CTO&lt;/a&gt; - something that everyone should do (if they can). I would have performed better in System Design Interview if this was not my first ever HLD interview but no regrets. Failures are integral to the journey of success üìà.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="stripe" /><category term="interview" /><category term="staff-software-engineer" /><summary type="html">I interviewed for the position of Staff Software Engineer at Stripe in December 2023. They were hiring engineers in the Verification &amp; Identity Platform team.</summary></entry><entry><title type="html">Atlassian Interview Experience</title><link href="https://gagan93.me/blog/2024/05/04/atlassian-interview-experience.html" rel="alternate" type="text/html" title="Atlassian Interview Experience" /><published>2024-05-04T00:00:00+05:30</published><updated>2024-05-04T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/05/04/atlassian-interview-experience</id><content type="html" xml:base="https://gagan93.me/blog/2024/05/04/atlassian-interview-experience.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-05-04-atlassian-interview-experience.png&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://logos-world.net/wp-content/uploads/2023/03/Atlassian-Logo.png&quot;&gt;Logo World&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I interviewed for the position of &lt;strong&gt;Senior Software Engineer&lt;/strong&gt; at &lt;strong&gt;Atlassian&lt;/strong&gt; in &lt;strong&gt;November 2023&lt;/strong&gt;. This was my first ever experience getting interviewed by a large product organisation. Just to brief about myself and my background - I currently work as a Staff Software Engineer at LocoNav India (2018-present) and have previously worked with Josh Technology Group (2015-2018). You can know more about me &lt;a href=&quot;https://gagan93.me/&quot;&gt;here&lt;/a&gt;. I was not actively looking for a change but thought of giving a try. Having spent ~ 6 years at LocoNav (as of that time), I was completely out of touch with the current market expectations and interview process. Atlassian, just like many other big tech companies takes candidate experience very seriously. So their HR contacted me and explained everything on a 30 minute phone call including my salary expectations. They did not ask my current compensation though (something most of the companies ask). After our call, he sent me a few emails that summarized whatever he explained and had details about the interview process. Apart from this, the email also contained some documents to assist me in preparing (eg. telling what all things I should go through). Overall, it was a very good experience with them.&lt;/p&gt;

&lt;h2 id=&quot;the-rounds&quot;&gt;The rounds&lt;/h2&gt;

&lt;p&gt;Atlassian was hiring aggressively in past 6-8 months for multiple positions (Senior/Principal/Fullstack) and rounds are more or less same for these positions, except 1-2 extra rounds for Principal Engineers. The rounds were as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://karat.com/&quot;&gt;Karat&lt;/a&gt; screening round (coding + Rapid QnA)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data structures round (coding)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Low Level Design round (coding)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;System Design round (diagrammatic mostly)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Values round (discussion)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Management round (discussion)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The same is documented &lt;a href=&quot;https://online.flippingbook.com/view/325478/4/&quot;&gt;here&lt;/a&gt; as a reference for candidates.&lt;/p&gt;

&lt;h2 id=&quot;round-details&quot;&gt;Round details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Karat Screening Round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Karat is an online platform used by companies like Atlassian, to filter candidates after shortlisting the resume. The interviewers are Senior Engineers who are trained for many hours before they start taking interviews. As they have a global pool of interviewers, you can choose any time slot (unlike for other rounds) and they‚Äôll arrange an interviewer for you. My interviewer was an Indian from Hyderabad or Bangalore (don‚Äôt remember exact location). He was very professional and friendly. Because this interview had to cover a lot of things in an hour, he made sure that we do not waste time discussing something specific at length. I remember him introducing himself within 15-20 seconds and then asking me to introduce myself in a minute or less. The format of the round was as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Introduction and explanation of format - 3-4 mins&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5 Rapid fire system design problems (debugging rather than diagramming) - 20 minutes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Two data structure problems (easy, medium) - 30 mins&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because this round was not with a company employee, you do not ask questions about the company in this round. We started with rapid fire system design problems. Here, we do not solve one large problem (like designing Spotify or Google Drive). Rather, we are presented with situations where experience is required to debug a system that is facing problems. I found this much better than the actual System Design round that all the companies take because only practical knowledge can help in debugging such problems. There were five questions, out of which I answered 4 correctly (the passing percentage was 60%, i.e. 3 questions). Just to share a few of them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A system is running very slow (+ some more details about the system). How would you debug this to solve the slowness.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A system is scaling from x to y users (x and y are number of users. What things would you consider to upgrade in your system to ensure smooth scaling?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An electronic system exists for a smart freezer. An external computer system does a processing right now but later we‚Äôre assuming to migrate this code to an internal microcontroller (raspberry pi for example). What things to consider while porting this code?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These questions were easy for me because I had seen systems growing during my role at LocoNav. So I knew the pain points. In this round, the challenge lies in quickly understanding the problem and sharing all potential solutions within 3-4 minutes. With 5 questions to address in just 20 minutes, this means you have approximately 4 minutes per question, including the time taken by them to read out each question. To optimise your chances of success, the Atlassian Talent team recommends requesting the interviewer to refrain from reading the questions aloud, allowing you to read them at your own pace and save valuable time.&lt;/p&gt;

&lt;p&gt;After this, we moved to the data structure problems where the first question was around string manipulation. They use &lt;a href=&quot;https://coderbyte.com/&quot;&gt;Coderbyte&lt;/a&gt; platform to asses the coding part. I chose Ruby language to solve data structures in all the coding rounds I have given because I was most comfortable in Ruby. Unlike Leetcode, the test cases are not large in number and you‚Äôre just expected to pass 5-7 test cases. I don‚Äôt remember the exact problem but I remember that it was an easy one and related to Strings. One thing I remember is that I told wrong complexity when I was asked for the first time, and within 2-3 seconds I figured out and corrected myself. The second question sounded medium level leetcode problem but there was not much time left so I just explained the logic that sounded okayish to him and we concluded.&lt;/p&gt;

&lt;p&gt;I had a chat with my recruiter who told me that I should have qualified as solving one DS problem was the criteria and I had also explained the logic for second one. One bad part here was that he ghosted me for about 2 weeks after this round (didn‚Äôt pick my calls or responded to chat).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Structures Round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After 2 weeks, I got a call from another recruiter within Atlassian who told me that she‚Äôll be taking my candidature forward. She explained that the next two rounds (Data structures and Low level design) would happen on the same day, with a difference of 30-60 minutes in between. Both the rounds were for about 45 minutes (although marked for 1h on Calendar). The data structures round was taken by a Senior Software Engineer who was working with Atlassian Bangalore team for about 2 years. Like the previous round, this guy was also very professional and polite. He explained the problem and started discussing the solution with me. The problem was similar to what is explained &lt;a href=&quot;https://leetcode.com/discuss/interview-experience/1739628/atlassian-sse-remote-reject&quot;&gt;here&lt;/a&gt; (don‚Äôt go into his solution, just read the problem). There were multiple issues at my end due to which I didn‚Äôt move forward from this round:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The question wasn‚Äôt a hard one but I was much less prepared.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While most of the data structure problems are simple to implement with a single method (or maybe 2-3 methods for readability), this problem required classes to solve because he was changed the question twice after initial problem statement and that was only solvable cleanly if we had written a custom comparator in the class (basically tie breaking logic in the comparator).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It seemed like the round mixed DS and OOPs (low level) slightly but that‚Äôs fine. He gave me hints after which I changed my approach, but probably that was a negative point that lead to rejection despite solving it. My implementation:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ballot&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:candidates&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BallotUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BallotUnit&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:weightage&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate_name&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Candidate&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comparable&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:weightages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# override the comparator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runner&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ballot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;candidate_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;candidate_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;candidate_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;candidate_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weightage&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;candidates_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ballot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ballots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Low Level Design Round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this round, I was asked to write complete logic for the &lt;a href=&quot;https://www.google.com/search?sca_esv=58ac0b011cee9c7d&amp;amp;sca_upv=1&amp;amp;sxsrf=ADLYWILxVaKlInE0xUo1vWu1XUaU7ZPEjw:1714822721076&amp;amp;q=nokia+snake+game&amp;amp;uds=ADvngMjdw7-lOP0usjsMlKT3CLljzP00Ul4oFLKOAj9fGL-X8YrXHqfKk07DE1nxWsVjTChlHiOSf6mINDYeCaoPC80kWZL5frydgbHBTjR1-hBeX8_9mae0Jo4tFKDauOj2WZof5WWOTBGjTgfTRsJxhNX76UcXMq2fdnNIDy4XpwoCyddzgAaVdeFZqk8KxQNmT1nBUEup6WozpKo7AidCFu94Pjsc6hAHYEeOUzUUIxciXWD8hb2cykGoSwB7t1TBJoK9aab2T6YSSaZaRtKMkRFsxgudAzOnpozTwyj0JRoV9gxKM_zQwzRvBpfneq80yfWSeQP4&amp;amp;udm=2&amp;amp;prmd=isvnmbtz&amp;amp;sa=X&amp;amp;ved=2ahUKEwjkt5G59POFAxWtd2wGHZxpAXEQtKgLegQIEBAB&amp;amp;biw=1496&amp;amp;bih=812&amp;amp;dpr=2#vhid=vrfGi0KpOSUCsM&amp;amp;vssid=mosaic&quot;&gt;snake game&lt;/a&gt;. The panel comprised of a Senior Software Engineer and a Software Engineer (as a shadower) from the Sydney team. Both were old members of the team. I was somewhat surprised to hear this question because I had read that this was asked by them in 2022 and I thought they won‚Äôt repeat it. The miss on my side is that I didn‚Äôt practice this at all, so it took some time to understand the requirement and start. The expectation was that I‚Äôll write a completely working code and write test cases (or at least discuss the edge cases) within 45 minutes. I later implemented the code in both &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/ruby/snakegame&quot;&gt;Ruby&lt;/a&gt; and &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning/tree/main/java/snakegame&quot;&gt;Java&lt;/a&gt; along with test cases and found that it was quite hard to complete this within the expected time frame. You can read the requirements (Readme in both the links) and the code as well. Do read test cases to understand what scenarios I‚Äôve covered.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;I was skeptical of my performance in these DS and LLD rounds and was quite sure that I won‚Äôt easily pass these. Given the market conditions of Dec 2023 (and even today) where the supply of good engineers is much more than the demand, I was sure that either they‚Äôd reject me or will do the same round again. I called the recruiter after a few days who told me that they‚Äôre not carrying my candidate forward. She was very transparent to read out feedback of both the interviewers on the call. I noted those points to improve upon them before giving further interviews.&lt;/p&gt;

&lt;h2 id=&quot;the-good-and-bad&quot;&gt;The Good and bad&lt;/h2&gt;

&lt;p&gt;The interviews these days do not test if someone can solve a genuine problem within an hour. They basically test if you can solve fast enough, and that is only possible by practising for days and months. I started my first job in 2015, and since then I had not formally prepared for any interview. The recruitment process at LocoNav was not very formal as I joined among the first 5-6 engineers. And having spent 6+ years at LocoNav, I was completely out of touch with the market expectations. Sharing a few good parts and mistakes that I did starting with good parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The interviewer saw my profile on Instahyre and reached out to me. As I knew that I‚Äôm completely unprepared, I took 2 weeks of time for preparation even before the Karat round.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I went through all the docs shared by him religiously and asked more questions to understand each round better.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After years, I started practising data structure problems and solved about 30-40 problems before my first round (mostly easy, medium).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My practical experience at LocoNav eased the preparation for LLD and HLD rounds (although I didn‚Äôt attain the required speed because that needs more practice).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now coming to some bad parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I didn‚Äôt spend time in checking existing questions asked by them. Later I googled more and found that Atlassian is one of the companies that is known to repeat questions many times. One should always spend time in checking previously asked questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I should have taken about a month to prepare because my practice was not enough. I was shy to ask for more time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Was I discouraged by the rejection&lt;/em&gt;? Yes (for a few days). But I applied in more companies and faced more rejections that helped in building my confidence. You might feel like you have practised enough, but that 1 hour of time with the interviewer is very different. The mental pressure leads to drop in confidence due to which you go in wrong direction and end up wasting time. The only way to solve this is to give more interviews and learn to be comfortable.&lt;/p&gt;

&lt;p&gt;Atlassian was not my dream company but I have been using JIRA and confluence for years and I admire their products. I‚Äôm a JIRA administrator at LocoNav and my exposure has been far beyond the typical developer‚Äôs usage. The good point about Atlassian was a remote role with handsome compensation. It is known to offer perks similar to FAANG companies (check their Bangalore office). But the bad part (heard recently) is that they revoked PPO for freshers and &lt;a href=&quot;https://www.teamblind.com/search/Atlassian&quot;&gt;have also been putting many engineers on PIP recently&lt;/a&gt;. Looks like they‚Äôve over-hired like many other companies :) Another thing that seemed off to me was that I got in touch with multiple people working at Atlassian (including the Data structures round interviewer) and all of them were working on the same thing - &lt;strong&gt;Cloud migration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Atlassian still remains a dream organisation for many (thanks to didis and bhaiyas who keep uploading office tour videos). I‚Äôll be sharing more interview experiences in next few weeks. Thanks for reading and good luck if you‚Äôre looking for a change.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="atlassian" /><category term="interview" /><category term="senior-software-engineer" /><summary type="html">I interviewed for the position of Senior Software Engineer at Atlassian in November 2023. This was my first ever experience getting interviewed by a large product organisation. Just to brief about myself and my background ..</summary></entry><entry><title type="html">Titles, Inflation and Down-levelling</title><link href="https://gagan93.me/blog/2024/04/19/titles-inflation-downlevelling.html" rel="alternate" type="text/html" title="Titles, Inflation and Down-levelling" /><published>2024-04-19T00:00:00+05:30</published><updated>2024-04-19T00:00:00+05:30</updated><id>https://gagan93.me/blog/2024/04/19/titles-inflation-downlevelling</id><content type="html" xml:base="https://gagan93.me/blog/2024/04/19/titles-inflation-downlevelling.html">&lt;h2 style=&quot;box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 3px;&quot;&gt;&lt;img src=&quot;/blog/assets/images/2024-04-19-title-inflation-downlevelling.jpg&quot; alt=&quot;cover-photo&quot; /&gt;&lt;/h2&gt;

&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-jason-strull-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jasonstrull?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Jason Strull&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/man-holding-his-head-while-sitting-on-chair-near-computer-desk-KQ0C6WtEGlo?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;If you‚Äôre confused about career ladders in different organisations, then this post will help you understand semantics of job titles (or job roles, or designations, or levels). There are many stories out there where people switch from a large service-based company to a product company (or one of the FAANG companies) where their titles are different or down-levelled. If you don‚Äôt have this understanding, you might think - &lt;em&gt;Why would someone move from a current role of Tech lead to a Senior Software Engineer&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id=&quot;understanding-titles&quot;&gt;Understanding Titles&lt;/h2&gt;

&lt;p&gt;Titles are not standard across companies. And the reason is very obvious - you could open your own company and call yourself a Director/CEO. That might not have any significance unless you have some clients who pay you for the services you provide. As the company grows, you hire more people and/or get more customers. Only then the titles start making some sense. Applying the same example to the scenario where you might join a small company as a Founding engineer/Lead Engineer/VP of Engineering. Here, your initial title doesn‚Äôt matter because people in startups are &lt;a href=&quot;https://emeritus.org/blog/career-generalist-vs-specialist/&quot;&gt;generalists&lt;/a&gt;: You might be a Software developer by title but at times you could also be setting up servers, doing testing, and even doing customer support. Startups have flat hierarchy where most of the employees are less focussed on titles and more focussed on the mission.&lt;/p&gt;

&lt;p&gt;On the other end of this spectrum, we have medium to large organisations where leadership defines specific designations and salary bands. Here, people are very much concerned about their titles because their work and pay aligns with their bands. But that doesn‚Äôt mean that a Senior Engineer in one big tech does the same work and gets the same pay as the one working in another big tech. Although titles have a range of pay and not everyone on same title gets the same salary (even in a single company) but I hope you get what I‚Äôm saying - work and pay differs across companies. This is due to the variations in leadership styles, the complexity of work, and the specific skill sets and experience levels needed to attain a particular job title across different companies.&lt;/p&gt;

&lt;p&gt;The closest example in this concern is of my own. I work as a &lt;strong&gt;Staff Engineer&lt;/strong&gt; at &lt;a href=&quot;https://loconav.com/&quot;&gt;LocoNav&lt;/a&gt; that has a small engineering team of ~ 100 people. The complexity of my work is not at par with someone who is a &lt;strong&gt;Staff Engineer&lt;/strong&gt; at Google, Stripe, or Meta. So if I had to compare myself with a title in such companies, the closest one that aligns is of a &lt;strong&gt;Senior Software Engineer&lt;/strong&gt;. But the question is - how did I infer this, and how you can do the same for yourself?&lt;/p&gt;

&lt;h3 id=&quot;understanding-levels&quot;&gt;Understanding levels&lt;/h3&gt;

&lt;p&gt;If you want to understand where you currently are w.r.t big tech organisations, simply search something like ‚ÄúGoogle Software Engineer levels‚Äù (or Meta, or Uber). There are many articles already written by ex-employees that describe the responsibilities and expectations of each level. You can match the same with your current responsibilities and understand your level. This is helpful, specially if you‚Äôre targeting a role at that company.&lt;/p&gt;

&lt;p&gt;I hope the above explains something around titles.&lt;/p&gt;

&lt;h2 id=&quot;what-is-title-inflation&quot;&gt;What is Title Inflation?&lt;/h2&gt;

&lt;p&gt;There are some organisations that have a defined career ladder but you get promoted to the next level sooner. As an example, I‚Äôve seen people in small companies that have title of &lt;strong&gt;Principal Engineer&lt;/strong&gt; which is a really senior technical position if we compare the same title to people in large organisations. This is majorly for two reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Although the median tenure in the industry for software developers is ~ 4 years, there are people who do not change job for a 8-10 years. Organisations create new positions for such people so that they can be promoted (I‚Äôve seen this myself). In small teams, people with ~ 10 years of experience could be Principal Engineers, while large organisations usually consider people in the range of 12-15 years eligible for this position (although exceptions are always there).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes, organisations &lt;a href=&quot;https://en.wikipedia.org/wiki/Job_title_inflation&quot;&gt;inflate your title&lt;/a&gt; in order to retain you when you quit. This may or may not include a hike in your pay (based on your negotiation) but moves you to the next level. Not debating if this is right or wrong, fair or unfair but it is what it is :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second scenario is a typical case of title inflation. Advancing to the next level can boost your confidence, but it might not benefit you in the long term, especially if your current skills don‚Äôt align with that level. This situation could even lead to being down-levelled in your next position.&lt;/p&gt;

&lt;h2 id=&quot;down-levelling-explained&quot;&gt;Down-levelling explained&lt;/h2&gt;

&lt;p&gt;As the name suggests, it‚Äôs like getting a demotion (moving to a lower level). We need to understand when it actually concern us:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre in the same organisation and you‚Äôre getting down-levelled, then it might be a serious concern. You can talk to your manager to understand why this happened. If this is due to some performance concerns, then you might already be expecting this. Incase there is a major restructuring happening in the organisation and all the job roles are being redefined, this might be fine. It all depends on the situation and how you negotiate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre moving to some other organisation, you must learn about their levelling (as already explained above). If you are getting down-levelled while changing the organisation, it might not be wrong because of different role expectations in the next organisation. Although in all cases, you must negotiate with the hiring manager and understand the expectation of next level to see if you can move to the next it :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this clears up any confusion about different companies and their job titles.&lt;strong&gt;.&lt;/strong&gt; It‚Äôs mostly about the organisation, their expectations, and their team‚Äôs size that defines the levels. If you‚Äôre moving to a different organisation and are being considered at a lower level, don‚Äôt get sad. Understand their job role expectations. At the same time, if you feel that you meet the expectations of a higher level, never settle for less.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;</content><author><name>Gagandeep Singh</name></author><category term="title" /><category term="title-inflation" /><category term="downlevelling" /><category term="interview" /><summary type="html">If you&apos;re confused about career ladders in different organisations, then this post will help you understand semantics of job titles (or job roles, or designations, or levels). There are many stories out there where people switch from a large service-based company...</summary></entry></feed>