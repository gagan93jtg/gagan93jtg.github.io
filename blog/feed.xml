<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gagandeep&apos;s Blog</title>
    <description>Posts on Engineering, Culture and Productivity
</description>
    <link>https://gagan93.me/blog/</link>
    <atom:link href="https://gagan93.me/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 06 Jun 2025 17:14:03 +0530</pubDate>
    <lastBuildDate>Fri, 06 Jun 2025 17:14:03 +0530</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
      <item>
        <title>My Financial Journey</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-micheile-henderson-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@micheile?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;micheile henderson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/green-plant-in-clear-glass-cup-SoT4-mZhyhE?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I began working as a Software Engineer in June 2015, which means I‚Äôve been earning for nearly 10 years. But if you ask me when I seriously started investing, the answer is ‚Äúabout three years ago.‚Äù In this blog post, I‚Äôll share what happened around that time and how my views on money and expenses have changed over the years. This article might draw some ideas from the book ‚Äî &lt;a href=&quot;https://www.amazon.in/Psychology-Money-Morgan-Housel/dp/9390166268&quot;&gt;The Psychology of Money&lt;/a&gt;, but I won‚Äôt be acting as another financial influencer suggesting which stocks to buy üòÉ.&lt;/p&gt;

&lt;h1 id=&quot;three-mistakes&quot;&gt;Three mistakes&lt;/h1&gt;

&lt;p&gt;My first salary was for about 16 days of work as I joined the company on 15th of June. About Rs. 20000 was credited to my account and my aim (before reaching home) was to take out some money to give to my parents. I was not a kind of person who would reach home with some gifts for everyone (as shown in movies ü§£). The only struggle for me was to find the ATM of the same bank so that I can set the PIN of debit card and then do the first withdrawal. While my new schedule was tiring (including travel, ramping up at work, etc.), being employed and having a steady income was definitely motivating. With this steady income, I did the following things (that sound like mistakes today):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I wanted a new phone for myself but my sister also needed one. So I got one for her first (around August 2015) because the one I wanted was not yet launched. As both of us now had latest phones, I thought I should get one for my parents too. By September 2015, all four of us were having new phones. With a salary of ~ 40K/month, I got phones worth 55K within first four months to make everyone happy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As my father thought that I should start investing, I met someone who did &lt;a href=&quot;https://licindia.in/&quot;&gt;LIC policies&lt;/a&gt;. I got two policies done by them before end of financial year without doing any market research. In the next financial year, I took another one. Today, I have three running LIC policies that are mix of money back and long term policies. After that I also started putting some amount in PPF.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In 2019, I drove from &lt;a href=&quot;https://www.google.com/maps/dir/delhi/amritsar/@30.272817,74.7001136,8.22z/data=!4m14!4m13!1m5!1m1!1s0x390cfd5b347eb62d:0x52c2b7494e204dce!2m2!1d77.2088282!2d28.6139298!1m5!1m1!1s0x391964aa569e7355:0xeea2605bee84ef7d!2m2!1d74.8722642!2d31.6339793!3e0?entry=ttu&amp;amp;g_ep=EgoyMDI1MDEyOS4xIKXMDSoASAFQAw%3D%3D&quot;&gt;Delhi to Amritsar&lt;/a&gt; (and back) on our Hyundai Santro. After coming back, I thought of purchasing an automatic car without any strong reasons (okay, there was one reason ‚Äî a good salary increment). I purchased a brand new Honda Amaze CVT. In last 6 years, I‚Äôve driven it &amp;lt; 27000 Kms.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think many of you might be having very similar stories of such expenses, so I hope you can relate with these. Although my parents always recommended me to save money and avoid useless expenses, they never gave any serious financial advice. And I think the core problem is that the system we are raised in expects ‚Äúevery good and sensible thing to come from elders‚Äù. Ideally, if it‚Äôs &lt;em&gt;your money&lt;/em&gt;, then &lt;em&gt;you&lt;/em&gt; should take care of investing it (not your parents). I‚Äôll share my current perspective to the above expenses:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The amount I spent on phones was &amp;lt; 1.5month of my salary and half of it was on Credit card (because of No Cost EMI). To many of you, this might sound okay because even I have seen people earning a similar amount today, and still getting a iPhone Pro Max from their first cheque. While today I‚Äôm calling this as a mistake, it was not a very expensive mistake. And I think it was important for me to commit these mistakes so that I can learn from them and avoid making even bigger mistakes in future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My father‚Äôs friend who did my LIC policies is a very good family friend and also a very good gentlemen. He did not hide any details of the policies from me or my father. Being a senior citizen (~70 yrs at that time), he recommended me to invest in safer options rather than in private companies or stock market. Because I was influenced by my father and his friend, I decided to go for safer options (like FDs, PPF and LIC). For first 3-4 years these were the only instruments that I was investing in. I even had a C.A. (who was of my age) but he never recommended me any good options and was happy filing my tax at the end of financial year. Investing a good amount in LIC policies seems like a mistake because the XIRR is very low. Although these policies have terminal benefits too, but that‚Äôs insignificant unless you die young.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I got a very good increment in Feb 2019 that made me think that I should upgrade our car. As my father also likes cars, he didn‚Äôt stop me üòÜ. Both of us started seeing some pre-owned cars and finally landed to the top model, automatic Honda Amaze that costed 9.5L at that time. My father was retiring in the same year so I thought I‚Äôll use it to go to office later. With COVID kicking in and my remote role (since first COVID), we‚Äôve not driven it much. Today, I think that purchasing a new car is the fastest way to burn hard earned post-tax salary (okay - not the fastest, having an AWS account is still the &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/xkadmh/150k_bill/&quot;&gt;fastest&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;from-2019---2022&quot;&gt;From 2019 - 2022&lt;/h1&gt;

&lt;p&gt;I met another CA through a common friend who started advising me to invest in slightly riskier options, given my young age and risk taking ability. The best thing about this person was that he didn‚Äôt act like policy agents or middlemen who recommended you specific funds or schemes to invest in. He focused on basic investing knowledge ‚Äî the concept of &lt;strong&gt;asset classes&lt;/strong&gt;, returns that beat inflation and possible investment options in the market (like stocks, mutual funds). These things were pretty new for me at that time. He convinced me to invest in Mutual funds but due to some issue with my Identity card (Aadhar) to mobile linking, this didn‚Äôt happen. I still got introduced to financial literacy, that I could learn more about.&lt;/p&gt;

&lt;p&gt;That same year, my sister got engaged and married, and then COVID hit in early 2020, leading to salary cuts and a big drop in the market. Later in 2020, I got engaged too, and then married in 2021. After the wedding, my expenses went up for a few months (as you‚Äôd expect), and I started thinking seriously about investing. April 2022 was when I started my first set of &lt;a href=&quot;https://www.hdfcfund.com/learners-corner/systematic-investment-plan?utm_source=google_search&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=zklsip&amp;amp;utm_term=self_help_seekers_generic&amp;amp;utm_content=ad_copies_india&amp;amp;gad_source=1&amp;amp;gad_campaignid=22567274109&amp;amp;gbraid=0AAAAApURn3O2RX66uK_SlBtcisM6QrkLg&amp;amp;gclid=Cj0KCQjwgIXCBhDBARIsAELC9ZilSJjgPrzyaK7lcyH71FzXcutVFld6s4E63cNufHUgjxSsYH_l1jIaAiN5EALw_wcB&quot;&gt;SIPs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the past decade, financial literacy among salaried individuals has improved significantly. Back in 2015, most people I spoke with relied on traditional savings methods like FDs, RDs, PPF, and EPF. Now, even college graduates are trying their hand at trading (though that has a &lt;a href=&quot;https://www.reddit.com/r/kolkata/comments/1e6clwd/the_ft_story_about_indian_youth_piling_into/&quot;&gt;dark side&lt;/a&gt; too). A major reason for this change is mobile-first platforms like Zerodha and Groww, which have made investing more accessible and user-friendly. As a result, terms like expense ratio, asset allocation, LTCG, and STCG are no longer alien. Additionally, financial influencers, or ‚Äúfinfluencers,‚Äù have played a key role in educating the public, offering insights and tips on smart investing, and promoting a more informed approach to personal finance. I personally know folks who started earning in the past few years and are actively investing in stocks as well as IPOs. But again, this post is not to talk about which asset class is better so let‚Äôs talk about some fundamentals.&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-basics&quot;&gt;Understanding the basics&lt;/h1&gt;

&lt;p&gt;Managing money isn‚Äôt just about numbers, or creating plans on spreadsheets ‚Äî it‚Äôs about &lt;strong&gt;behaviour, mindset, and self-awareness&lt;/strong&gt;. You don‚Äôt need a finance degree to build wealth. What you really need is a good grip on a few timeless principles that most people overlook in the race for returns or status.
(Few of these draw ideas from Psychology of money that I read somewhere in 2023):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spend less than what you earn&lt;/strong&gt; - This is one of the most basic rules of personal finance, yet also the hardest to follow: don‚Äôt let your spending grow just because your income does. Real wealth begins when you resist that urge and continue living within your means. That doesn‚Äôt mean you need to give up all pleasures or avoid nice things‚Äîbut if you don‚Äôt draw a line somewhere, you‚Äôll always feel like it‚Äôs not enough, no matter how much you earn. Lifestyle upgrades can easily turn into a trap. The more you try to impress others, the more you link your happiness to appearances‚Äîand that‚Äôs a cycle that‚Äôs hard to break. When your self-worth depends on showing success, it can start to feel like you‚Äôre constantly falling behind. True financial peace comes when you no longer feel the need to prove anything to anyone‚Äînot even yourself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wealth is what you don‚Äôt see&lt;/strong&gt; - Just because someone drives a fancy car doesn‚Äôt mean they‚Äôre rich. In fact, it might mean the opposite. Wealth is invisible ‚Äî it‚Äôs not the &lt;strong&gt;money spent&lt;/strong&gt;, but the money sitting quietly in savings or investments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Money is more about psychology than just numbers&lt;/strong&gt; - The best financial plan isn‚Äôt the one with the highest returns. It‚Äôs the one you can stick to through good times and bad. Your ability to control impulses, stay patient, and avoid comparison matters more than technical knowledge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save beyond goals&lt;/strong&gt; -It‚Äôs great to have a recurring deposit or SIP in place for planned goals like your child‚Äôs education, a bigger home, or a new car. But life doesn‚Äôt always follow a plan. Many important or difficult expenses come without warning and that‚Äôs why you don‚Äôt need a specific reason to save. Saving gives you options, freedom and most importantly peace of mind when life takes an unexpected turn. Take layoffs, for example ‚Äî they‚Äôve become increasingly common and can affect anyone, regardless of their role or the size of the company. It‚Äôs never easy to navigate a layoff, especially in a tough job market. But the first thing you need during such a time is a financial cushion that helps you cover your expenses for the next few months. That safety net gives you breathing room to make thoughtful decisions, rather than desperate ones. Without it, people often experience serious mental stress and end up taking whatever job comes first (even if it pays less or doesn‚Äôt align with their goals).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don‚Äôt act like you‚Äôre in a race&lt;/strong&gt; - Money related matters are personal. Our goals, life circumstances, and risk appetite are unique, and so are your financial decisions. For instance, I bought my first car at 26. Around the same time, a few people I know bought their first homes (something I still haven‚Äôt done). On paper, they invested in an appreciating asset, while I spent on something that loses value over time. But both choices had their own place and purpose in our lives. That‚Äôs why comparing financial decisions doesn‚Äôt really help. What matters more is being clear about &lt;strong&gt;your&lt;/strong&gt; priorities and staying consistent with &lt;strong&gt;your&lt;/strong&gt; plan. It‚Äôs easy to get influenced by what others are doing, but real financial progress comes when you stop reacting to others and focus on what makes sense for you.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is a gist of what I learned from the books and blogs, but there are a few more personal lessons I want to share about saving and managing money:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;We usually learn by making mistakes.&lt;/strong&gt; It‚Äôs great if you can learn from other people‚Äôs mistakes, but when it comes to personal finance, most of us end up learning the hard way‚Äîafter making a few of our own. It‚Äôs generally less costly to make money mistakes when you‚Äôre younger and earning less, so don‚Äôt stress too much if you slip up early on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Have a clear idea of your monthly expenses.&lt;/strong&gt; At the beginning of the month (when your salary comes), know exactly how much you need for essentials: groceries, bills, rent, small luxuries, vacations, or any planned expenses. Add a small buffer on top, and then invest the rest. If you wait until the end of the month to invest, chances are you‚Äôll spend more than you intended. Money sitting idle in a savings account has a tendency to be consumed. Setting up automatic transfers for SIPs, RDs, or any other investments, just like your EMIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build an emergency fund.&lt;/strong&gt; Aim to set aside at least 4‚Äì6 months‚Äô worth of expenses‚Äînot your salary. So if your salary is ‚Çπ2L per month but monthly expenses are ‚Çπ1L, your emergency fund should be around ‚Çπ4‚Äì6L. Keep this in an easily accessible &amp;amp; safe place like a fixed deposit or a similar liquid fund, so that you can access it quickly when something unexpected happens.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don‚Äôt ignore insurance‚Äîespecially health insurance.&lt;/strong&gt; If you‚Äôre living in a Tier-1 city and your parents are aging or already retired, a medical emergency can shake your finances. Insurance won‚Äôt prevent health issues, but it‚Äôs a solid safety net when something unexpected happens. It‚Äôs not just about your parents; your own health cover also matters. Beyond this, if you can affort ‚Äî do also get a term insurance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Plan ahead for annual expenses.&lt;/strong&gt; Large annual expenses can feel like a sudden burden if you don‚Äôt prepare for them. For instance, if your parents‚Äô health insurance premium is ‚Çπ48K per annum, it‚Äôs a lot easier to save ‚Çπ4K every month than to part with ‚Çπ48K in one go. This works well for school fees, festival travel, or any other similar large planned purchase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Think &amp;amp; invest long-term.&lt;/strong&gt; Once you‚Äôve built your emergency fund, and have some financial stability, explore options for long-term investing based on your age and risk appetite. Mutual funds, for instance, aren‚Äôt great for short-term gains (except maybe debt funds), but over 10‚Äì20 years, the power of compounding really kicks in. The idea is to plant now and harvest later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Understand different asset classes‚Äîand diversify.&lt;/strong&gt; Inflation slowly eats away at your savings, so your goal should be to beat inflation, not just save. Learn about different investment options: fixed deposits, recurring deposits, ELSS, PPF, mutual funds, stocks, real estate, gold etc. Diversification protects your portfolio during market ups and downs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Look beyond shiny numbers‚Äîlook at real returns.&lt;/strong&gt; Few options may sound like a good investment but eat away at your returns. For example:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Gold:&lt;/strong&gt; We‚Äôve been buying gold for generations, but always buying jewellery as an investment isn‚Äôt smart. Making charges (10‚Äì20% or more) are sunk costs. If you buy something for ‚Çπ1.2L (‚Çπ1L gold + ‚Çπ20K making charges), you‚Äôll only get ‚Çπ1L or less if you sell it immediately. If you want to invest in gold, consider gold funds or gold bonds.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Mutual Funds:&lt;/strong&gt; In a bull run, short-term returns might tempt you to sell early. But remember, STCG (Short-Term Capital Gains Tax) at 15% and exit load (varies per fund) can reduce your actual gains.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Real Estate:&lt;/strong&gt; Buying and selling property within 1‚Äì2 years can be expensive. Taxes, broker fees, registration charges, and the hassle itself often outweigh any short-term profit.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Stay curious and keep learning.&lt;/strong&gt; Personal finance isn‚Äôt a one-time thing you learn and forget. As you grow, your income, goals, and responsibilities evolve. Revisit your financial plan every 1‚Äì2 years. Read blogs, listen to podcasts, talk to financially savvy friends, or even consult a planner once in a while. The more you learn, the fewer regrets you‚Äôll have later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Start now, however small.&lt;/strong&gt; Many individuals delay saving or investing, waiting for the ‚Äúright time‚Äù or a higher salary. However, the truth is that the earlier you begin, the more advantageous it is for your financial future. Even if you start with small amounts, investing consistently over a long period can significantly increase your wealth. This approach allows your investments to benefit from the power of compounding, where the returns on your investments generate their own returns over time&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Money can feel overwhelming, but it really doesn‚Äôt have to be. A few intentional habits, some patience, and regular check-ins can go a long way. I‚Äôm still learning and making some mistakes. But it‚Äôs better to learn with a plan than to keep drifting without one. If you‚Äôre reading this, chances are you‚Äôve had your own turning points too ‚Äî maybe it was the first time you ran out of money before the month ended, or when you impulsively spent your bonus on something that didn‚Äôt feel worth it later. Whatever your journey looks like, I‚Äôm sure you‚Äôve had moments of confusion, growth, or even regret when it comes to managing money. That‚Äôs perfectly normal‚Äîwe‚Äôve all been there in some way. The important thing is that we‚Äôre trying, learning, and doing a little better each year.&lt;/p&gt;

&lt;p&gt;I‚Äôd love to hear your story too‚Äîwhether it‚Äôs a mistake that taught you something valuable, a trick that helped you save more, or a mindset shift that changed the way you think about money. Drop your thoughts in the comments below.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.in/Psychology-Money-Morgan-Housel/dp/9390166268&quot;&gt;Psychology of money&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8nDjNn8ELCU&quot;&gt;One idiot - Short film on importance of Financial Planning&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 06 Jun 2025 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2025/06/06/my-financial-journey.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2025/06/06/my-financial-journey.html</guid>
      </item>
    
      <item>
        <title>Growth Through Unlearning</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-tim-mossholder-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@timmossholder?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Tim Mossholder&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/love-to-learn-pencil-signage-on-wall-near-walking-man-WE_Kv_ZB1l0?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice if you‚Äôre describing a problem in terms of a solution you‚Äôve already chosen ‚Äî this can be a mental block for a lot of engineers. We start out by comparing problems to solve, but find ourselves talking in terms of technology or architecture we ‚Äúshould‚Äù be using to make everything better.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;-Tanya Reilly, The Staff Engineer‚Äôs Path&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In 2022-2023, I spent at least two afternoons each week discussing architecture with two senior colleagues at my company. We had hired many people, expecting growth, and decided to transition from a &lt;a href=&quot;https://blog.gagan93.me/monolith-microservices&quot;&gt;monolith to microservices&lt;/a&gt;. During one discussion about a central authorization service, I kept drawing ideas from a system I had built in the monolith a few years ago. This is common among engineers: they often jump straight to solutions without fully understanding the problem, suggesting what they already know. This issue isn‚Äôt limited to engineering teams; even product and design teams can overlook problem details and plan to create solutions similar to what they‚Äôve done before.&lt;/p&gt;

&lt;p&gt;Many industry leaders like hiring people with similar past experience, but that shouldn‚Äôt stop you from finding better solutions. When you face a similar problem, some parts might be different, so the same solution might not work directly. If you overlook these small but important details, you might implement an unoptimized solution.&lt;/p&gt;

&lt;h1 id=&quot;the-tale-of-two-rbac-systems&quot;&gt;The tale of two RBAC systems&lt;/h1&gt;

&lt;p&gt;In the past, I had developed a &lt;a href=&quot;https://en.wikipedia.org/wiki/Role-based_access_control&quot;&gt;Role-Based Access Control (RBAC) system&lt;/a&gt; for a customer-facing application using SQL tables. This system was designed to manage user permissions efficiently by assigning roles to users and controlling access based on these roles. A few months after the implementation, we began optimizing the SQL queries for our application to enhance performance. During this process, we discovered that the tables associated with the RBAC feature were among the top 10 most frequently accessed tables. This was because the data from these tables was loaded before almost every API call, which significantly impacted the application‚Äôs performance.&lt;/p&gt;

&lt;p&gt;As an improvement, we decided to implement caching for this data. We set up a cache to store the this data and configured it to invalidate whenever a new role was assigned to a user. Since role assignments were not very frequent, this approach was feasible and effective. Within a month, we successfully eliminated 4-5 database queries that were previously executed @ 40 queries/sec.&lt;/p&gt;

&lt;p&gt;A few years later, I encountered another RBAC system in a different application, and here were the differences between the two:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The system was designed for internal users (instead of customers) and there was no chance that the customer side would need this functionality due to the nature of the business.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It was built using &lt;strong&gt;configuration files&lt;/strong&gt; and &lt;strong&gt;one SQL table&lt;/strong&gt;, instead of &lt;strong&gt;multiple&lt;/strong&gt; &lt;strong&gt;SQL tables&lt;/strong&gt; that use joins to get required data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the newer system, changing roles required a deployment because these configuration files were part of the repository code. In my old system, we had an admin page to update the database entry (and a callback to refresh the cache as well).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I first saw this new system, it seemed like a misnomer, but this is how it was perfect for their use case:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Since this was built for internal users, there was no need to update the data often. Plus, the number of internal users was under a thousand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There was no need for a caching layer because the configuration files were only loaded once, during app startup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The team wanted to track changes to the permission system, and they thought using Git was the best way to do it ü§ì. Sure, a maker-checker system could have been created for logging changes if SQL tables were used, but that requires separate effort.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So which system is better? The one built on SQL tables or the one that mostly used configuration files ü§î?Take a moment to think before you continue reading.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Seasoned engineers would sum it up in two words: &lt;em&gt;It depends&lt;/em&gt; üòÜ.&lt;/p&gt;

&lt;p&gt;Both systems worked well for their specific use cases without causing any issues for the end user. If I were to design the second system after creating the first one, I might have made the same mistake of using SQL tables and joins because that would have been the ‚Äústandard solution‚Äù I remembered. But now, looking at both, I see that each was built according to its &lt;strong&gt;requirements&lt;/strong&gt; without &lt;strong&gt;over-engineering&lt;/strong&gt; for the future. In fact, &lt;em&gt;over-engineering&lt;/em&gt; is very common in software engineering (been there, done that).&lt;/p&gt;

&lt;p&gt;Again quoting from the &lt;em&gt;Staff Engineer‚Äôs Path&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An engineer who is not busy can be inclined to make work for themselves. When you see a vastly over-engineered solution to a straightforward problem, that‚Äôs often the work of a staff engineer who should have been assigned to a harder problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this issue, building a solution based on SQL tables would be considered &lt;em&gt;over-engineering&lt;/em&gt; because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There was no need to update roles dynamically (without deployment).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implementing the same on the SQL layer would call for a separate maker-checker system to monitor the changelog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additionally, future work might involve developing a caching layer since the data rarely changed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;comfort-resists-innovation&quot;&gt;Comfort resists innovation&lt;/h1&gt;

&lt;p&gt;Over the past few years, a notable portion of my work has focused on simplifying systems that have become increasingly complex due to ongoing product changes implemented by various developers. As I work on enhancing these systems, it is crucial to first gain a thorough understanding of their current behavior. This often involves interviewing individuals who have been involved with the system for a long time. These individuals tend to be very &lt;strong&gt;familiar&lt;/strong&gt; and &lt;strong&gt;comfortable&lt;/strong&gt; with the system as it stands, having witnessed the gradual increase in complexity and understanding the reasons behind each modification.&lt;/p&gt;

&lt;p&gt;This sense of &lt;strong&gt;comfort&lt;/strong&gt; can be problematic because it prevents them from envisioning a newer, more streamlined version of the system that would be easier for everyone to comprehend. Their familiarity with the existing complexity, combined with limited exposure to effective design principles, often leads them to believe that the current state is the optimal way to construct the system. This mindset results in a lack of motivation to pursue &lt;a href=&quot;https://blog.gagan93.me/refactoring-lessons-learnt-so-far#heading-keep-changes-small-and-reversible&quot;&gt;incremental improvements&lt;/a&gt; that could make the system more efficient and user-friendly. Consequently, they may not plan or implement small, reversible changes that could gradually enhance the system‚Äôs design and functionality.&lt;/p&gt;

&lt;p&gt;In this case, &lt;strong&gt;unlearning&lt;/strong&gt; is important so that you can think of the system from a fresh perspective and think of an alternate, simplified architecture. This would help you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To recognize that some of what you ‚Äúknow‚Äù might not be &lt;strong&gt;universally correct&lt;/strong&gt; or &lt;strong&gt;applicable everywhere&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To let go of &lt;strong&gt;fixed patterns&lt;/strong&gt; that prevent you from adapting to new situations. In order to grow, it‚Äôs important to not rely on such patterns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To shed the confidence in solutions or methods simply because &lt;strong&gt;they worked in the past&lt;/strong&gt;. Assumptions based on past experiences can lead to flawed conclusions or solutions when circumstances change.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;some-personal-examples&quot;&gt;Some personal examples&lt;/h1&gt;

&lt;p&gt;Software Engineers need to constantly unlearn the old concepts so that they can build efficient systems. Throughout my career, I‚Äôve encountered numerous instances that have taught me the importance of being willing to &lt;strong&gt;unlearn&lt;/strong&gt; outdated methods.&lt;/p&gt;

&lt;p&gt;These are some instances where &lt;strong&gt;unlearning&lt;/strong&gt; helped me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre used to working with monolithic systems and switch to microservices (or join a team using microservices), you need to unlearn some habits and adopt new ones. In a monolithic system, you rarely deal with timeouts because all the data is usually in one database that your app is always connected to. But in a system that constantly gets data from other services, you have to consider timeouts, retries, and fallbacks (if available). You‚Äôll also learn new concepts like circuit breakers, centralized logging, inter-service authentication, etc. If you stick to the old monolithic way of coding in a microservices setup, you‚Äôll create inefficient solutions. (Learn more &lt;a href=&quot;https://blog.gagan93.me/monolith-microservices&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The simplest and slowest way to build a module is to execute all statements sequentially. For instance, in an e-commerce system, when an order is placed, tasks like sending notifications to the user, notifying the warehouse, and processing the payment are often performed one after the other. This sequential approach can cause inefficiencies and delays. By adopting asynchronous processing frameworks, you can enhance performance by allowing each step to be handled independently and concurrently. It‚Äôs crucial to unlearn traditional methods and embrace the intricacies of asynchronous distributed systems to develop scalable and efficient solutions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My first company operated in a ‚Äúwork from office‚Äù mode. During my second role, we transitioned from being ‚Äúin-office‚Äù to ‚Äúwork from home‚Äù due to the COVID pandemic. Now, I am part of a fully remote team with members spread across different time zones. The skills required to thrive in these varied work environments differ significantly. For instance, in a remote setting, effective written communication is crucial to ensure that messages are clear and not misinterpreted by colleagues from diverse cultural backgrounds. Additionally, it‚Äôs important to recognize that team members may not always be available simultaneously. Therefore, it‚Äôs essential to plan your workday strategically. Tasks requiring input from others in different time zones should be scheduled when they are available, while you can focus on tasks that can be completed independently during other times. This approach helps maintain productivity and ensures smooth collaboration across the team.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The transition from on-premise to cloud virtual machines, and now to Kubernetes pods, has introduced a more ephemeral nature to what we consider a &lt;em&gt;server&lt;/em&gt;. I recall a high-rate ingestion service in our old organisation that buffered data temporarily to disk when the consumer was down. This application ran on AWS EC2 machines, which are less ephemeral than Kubernetes pods, and the design worked well despite using &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html&quot;&gt;instance stores&lt;/a&gt; that do not persist through EC2 stop/start cycles. In a Kubernetes environment, designing this would require a different approach because pods can be terminated for various reasons and with higher frequency. To handle this, you might need to implement persistent storage solutions like using Persisted volumes, StatefulSets or external storage systems such as Amazon EBS to ensure data durability and availability when pods are frequently restarted or rescheduled. This shift necessitates a rethinking of how data persistence and application state are managed in cloud-native architectures.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unlearning old habits was crucial for my growth as it allowed me to adapt to new technologies and methodologies. By shedding outdated practices and embracing continuous learning, I was able to contribute to the development of more efficient and scalable systems.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this brief blog post, I‚Äôve highlighted the significance of &lt;strong&gt;unlearning&lt;/strong&gt; and its vital role in fostering innovation and adaptability for professionals across various fields. By letting go of preconceived notions and outdated solutions, we can tackle problems with fresh perspectives, resulting in more efficient and context-appropriate outcomes. Embracing unlearning as a practice can significantly contribute to personal and professional growth, enabling individuals to stay agile and responsive in an ever-evolving landscape.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, please read these too:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This is my second blog post related to &lt;strong&gt;growth&lt;/strong&gt;. The first one talks about &lt;a href=&quot;https://blog.gagan93.me/habits-productivity-deep-work&quot;&gt;habits, productivity and deep work&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It‚Äôs important to manage your time when you‚Äôre thinking about growth. I shared &lt;a href=&quot;https://blog.gagan93.me/cost-of-time&quot;&gt;my thoughts&lt;/a&gt; on the same an year ago.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre transitioning from monolith to microservices and are looking for a scalable way to migrate data, read &lt;a href=&quot;https://blog.gagan93.me/migrating-data-across-services&quot;&gt;this post&lt;/a&gt; once.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 26 Jan 2025 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2025/01/26/growth-through-unlearning.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2025/01/26/growth-through-unlearning.html</guid>
      </item>
    
      <item>
        <title>Habits, Productivity &amp; Deep work</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-carl-heyerdahl-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@carlheyerdahl?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Carl Heyerdahl&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/silver-imac-with-keyboard-and-trackpad-inside-room-KE0nC8-58MQ?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I resigned from my first company in December 2018 when I decided to switch from a &lt;strong&gt;services company&lt;/strong&gt; to an &lt;strong&gt;early-stage product startup&lt;/strong&gt;. Although the previous company wasn‚Äôt treating me badly, there was a trend of people leaving after 2-4 years, which was on my mind, along with other factors. My previous project, which I worked on for more than 2.5 years, was almost wrapped up, and I was being assigned random tasks that I didn‚Äôt enjoy. Finally, I joined this product startup, &lt;a href=&quot;https://loconav.com/&quot;&gt;LocoNav&lt;/a&gt;, on February 5th, 2018.&lt;/p&gt;

&lt;p&gt;While onboarding at my current organization, &lt;a href=&quot;https://branchapp.in/&quot;&gt;Branch&lt;/a&gt;, took almost a week due to extensive documentation and mature processes, the situation at LocoNav was completely different at that time. Within the first four hours, I was logged into their production server using my new laptop to check a &lt;a href=&quot;https://www.crowdstrike.com/en-us/cybersecurity-101/next-gen-siem/log-rotation/&quot;&gt;log rotation&lt;/a&gt; issue. This might seem unusual to those who haven‚Äôt experienced the early startup environment, but for those who have, it‚Äôs not surprising. You need to be productive from day one and ensure your efforts align with everyone else‚Äôs. With all this hustle came a lot of stress, and there were many reasons for this stress. Here are a few:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I had moved from a services company. Although it was also a startup, its processes and hierarchies were more formal. Sometimes, I would think, &lt;em&gt;We should have the ‚Äúxyz process‚Äù from my old company to avoid this problem&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not just me, but most of us came from service or stable companies. So, working at this fast pace was totally new for us. Everyone found it tough to deal with the uncertainty, juggling different tasks, and the ever-changing requirements. When I joined, there were no product managers. So, we were building a &lt;strong&gt;product&lt;/strong&gt; without a &lt;strong&gt;product manager&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I aimed for perfection in many tasks, and that was a bit of a mistake. I didn‚Äôt realize that in early-stage startups, much of what we build might be discarded, so aiming for perfection from the start isn‚Äôt necessary. Trying to balance perfection and delivery, I ended up stressing myself and sometimes overworking. (Though many APIs I wrote in 2018-19 are still running in their production üòÄ).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog, I‚Äôm sharing what I‚Äôve learned from working in both early-stage and mature startups. This will cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Finding a balance between &lt;strong&gt;perfection, speed&lt;/strong&gt;, and the &lt;strong&gt;stress&lt;/strong&gt; of delivering.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How much &lt;strong&gt;context-switching&lt;/strong&gt; is beneficial and its impact on your &lt;strong&gt;productivity&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The value of &lt;strong&gt;deep work&lt;/strong&gt; and how most of our jobs require it, but our environment isn‚Äôt set up for it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How your &lt;strong&gt;habits&lt;/strong&gt; and &lt;strong&gt;environment&lt;/strong&gt; affect your work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many of these insights are common to any corporate role. However, based on my experience as a Software Engineer, most examples will pertain to software design. So, let‚Äôs start üöÄ&lt;/p&gt;

&lt;h1 id=&quot;perfection--speed&quot;&gt;Perfection &amp;amp; Speed&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-01-05-habits-productivity-deepwork-perfection.jpg&quot; alt=&quot;Image from Unsplash&quot; style=&quot;display: block; margin: 10px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was quite a perfectionist when I joined LocoNav. Out of stress, I would write emails to my founder, VP, and a few teammates, sharing my thoughts and asking for their suggestions on the problems we were facing. These weren‚Äôt product-related issues but suggestions on solving team problems (e.g., &lt;em&gt;Should we hire more?&lt;/em&gt;) or individual problems (e.g., &lt;em&gt;How to improve productivity?&lt;/em&gt;). While everyone appreciated my efforts to address these issues, not everyone was interested in solving them. Everyone has a unique perspective, and what seemed problematic to me might have seemed normal to someone else, possibly due to their past experience with similar situations.&lt;/p&gt;

&lt;p&gt;The question for the need of perfection is tricky, and is very subjective to your current working environment. For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre a billion-dollar stock exchange firm or bank, perfection in your work is a basic requirement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre a startup dealing with money, most of your work needs to be perfect. However, your idea of &lt;em&gt;perfection&lt;/em&gt; will likely be &lt;strong&gt;less strict&lt;/strong&gt; than that of a billion-dollar company because your processes are less mature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre a company manufacturing medical equipment, even one defect can be dangerous or life-threatening. So, your standards for perfection will be very high.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre a company not heavily regulated due to the nature of your business, your standards for perfection might not be very high. Doing things in a better way takes time and money, and no one wants to spend that money unless necessary.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;do-you-really-need-perfection-everywhere&quot;&gt;Do you really need perfection everywhere?&lt;/h3&gt;

&lt;p&gt;I think most of the companies that build something new or cutting edge do not face a lot of compliance (at least initially). For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Stock companies that started between 2010-2020 can show how compliance has become stricter over time. In 2010, they didn‚Äôt take all the measures they do now. Each step requires time and money, which startups often lack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SaaS companies in Europe, or those handling European user data, had to change how they store, process, and delete user data after GDPR was introduced. Making these changes is expensive, especially for large products.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many AI startups have been creating amazing products since ChatGPT appeared, but there isn‚Äôt a governing body to set limits on AI use to ensure it‚Äôs safe. For example, the CTO of OpenAI &lt;a href=&quot;https://www.youtube.com/watch?v=lS0G2D6MKGw&quot;&gt;wasn‚Äôt sure&lt;/a&gt; if YouTube‚Äôs public videos were used to train Sora, their video generation model.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Startups often operate in fast-paced environments where speed and innovation are prioritized over strict processes and documentation. Without external regulatory requirements setting clear quality benchmarks, teams lean towards quick fixes and ad-hoc solutions rather than building for long-term stability and scalability. This lack of enforced structure can lead to inconsistent practices, technical debt, and overlooked edge cases in both product and operational workflows. No one wants to shutdown their company or go to jail for doing something that‚Äôs illegal (at least, most of us don‚Äôt want to!). So if you‚Äôre under a governing body, ensure perfection accordingly. Otherwise feel free to experiment and take some risks (or technical debts).&lt;/p&gt;

&lt;p&gt;I think this gives you an idea that the level of perfection depends on kind of business you‚Äôre building.&lt;/p&gt;

&lt;h1 id=&quot;stress--context-switching&quot;&gt;Stress &amp;amp; Context switching&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-01-05-habits-productivity-deepwork-context_switch.png&quot; alt=&quot;Image from Unsplash&quot; style=&quot;display: block; margin: 10px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Handling stress in a startup requires balance and resilience. In the early days, we worked six days a week, with one day from home and five in the office. This wasn‚Äôt a set rule, but many of us followed it. I didn‚Äôt burn out quickly, but I made sure to rest when needed. Negotiate and align priorities with your teammates and manager because time is the most valuable asset for a startup. It‚Äôs crucial to have leaders who are supportive and practical. While everyone is expected to work quickly and deliver almost daily, not everyone will be a 5x or 10x developer.&lt;/p&gt;

&lt;p&gt;I remember many days when I would come home utterly exhausted, unable to even hold a conversation with anyone. My family was concerned and thought I had made a mistake by leaving a stable job to join a startup. At that time, I also had little idea of what the future held for me. Despite this, I was driven by the motivation and support I received from my team and the leaders around me. There were two major sources of stress during this period:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the first 3 months, I mainly worked on building the API layer for their new Android app. We were designing screens, building APIs, and developing the mobile frontend all at once. This simultaneous work caused a lot of back and forth, leading to &lt;strong&gt;rework&lt;/strong&gt;. While redoing tasks is common in startups, it caused frustration for everyone. Too much parallel work can be counterproductive, showing our inexperience with working at such a fast pace.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since everyone needed to handle multiple roles and most things were unstable, I was involved in many tasks besides just building the API layer. I had to switch between different tasks, which sometimes meant I accomplished &lt;strong&gt;nothing concrete&lt;/strong&gt; on a particular day. This was very discouraging for me.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One clear lesson I learned from observing my day was that to &lt;strong&gt;make an impact&lt;/strong&gt;, I needed to &lt;strong&gt;prioritize&lt;/strong&gt; tasks. In my previous role, this kind of prioritization wasn‚Äôt necessary because things were stable, and the layers of management above me handled it. Gradually, I became someone who learned to say ‚Äò&lt;strong&gt;No&lt;/strong&gt;‚Äô when something couldn‚Äôt be done in a given time frame or when I was already overloaded with tasks. In some teams, this might be seen negatively, but in our small team, where everyone was making honest efforts, people understood that if I said &lt;em&gt;no&lt;/em&gt;, it truly meant I was busy.&lt;/p&gt;

&lt;h3 id=&quot;can-we-get-a-lot-done-with-lots-of-context-switching&quot;&gt;Can we get a lot done with lots of context switching?&lt;/h3&gt;

&lt;p&gt;The short answer is ‚ÄúNo‚Äù, but I have two takes here. Both of these conclusions come from my personal experience and what I learnt by reading.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you often switch between tasks while working, you might initially feel more stressed and frustrated, as you‚Äôll see small progress in many tasks but nothing substantial by the end of the day. Over time, you‚Äôll learn to choose fewer tasks and complete some of them. From my personal experience, trying to handle 10 tasks a day was never effective for me. However, focusing on 3-5 tasks that needed minimal input before completion made me happier. When starting something new, I found that I needed 2-4 uninterrupted hours (without &lt;strong&gt;context switching&lt;/strong&gt;) to create a solid plan for the coming days or weeks. I‚Äôve worked closely with people who can‚Äôt switch between tasks as efficiently as I do. This behaviour is explained by Robin Sharma in the book ‚Äú&lt;em&gt;The 5 AM Club&lt;/em&gt;‚Äù, where he highlights the brain‚Äôs amazing &lt;strong&gt;neuroplasticity&lt;/strong&gt; (an ability to adapt, rewire, and grow with consistent effort and habits). So, context switching works for me because my mind has &lt;strong&gt;adapted&lt;/strong&gt; to this pattern over months and years of practice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not everyone can handle a lot of stress, so not everyone can switch tasks efficiently. It‚Äôs wrong to expect everyone to multitask well. I‚Äôve written about efficient multitasking in a &lt;a href=&quot;https://blog.gagan93.me/multi-tasking-is-not-so-cool&quot;&gt;separate blog&lt;/a&gt; if you want more details. As a colleague, if I see someone struggling with multiple tasks, I always recommend prioritizing a few and completing those instead of making little progress on all of them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;deep-work&quot;&gt;Deep work&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-01-05-habits-productivity-deepwork-deep_work.jpg&quot; alt=&quot;Image from Unsplash&quot; style=&quot;display: block; margin: 10px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôve been working remotely since March 2020, so I stay connected with my colleagues through instant chat apps like Slack. When Facebook was launched in 2004, ‚Äúonline connections‚Äù were seen positively, but over time, people realized how addictive these sites can be. While you can cut down on using apps like Facebook, Instagram, Twitter, and Snapchat, you can‚Äôt stop using tools like Slack, Zoom, Meet, and Teams because you‚Äôre expected to be &lt;strong&gt;online&lt;/strong&gt; during work hours and respond to calls and messages. You might be wondering - &lt;em&gt;Why is this guy comparing Facebook to Slack?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is simple - all these apps steal your attention and reduce your ability to perform &lt;strong&gt;Deep Work.&lt;/strong&gt; Apps like Slack are designed with instant notifications and visual cues (eg. red badges and notification sound) that trigger our brain. Each notification creates a sense of urgency, pulling us away from focused tasks. The fear of missing out (FOMO) on important updates further compels us to check messages frequently. Additionally, the platform‚Äôs design encourages constant context-switching, &lt;strong&gt;fragmenting our attention&lt;/strong&gt; and &lt;strong&gt;reducing cognitive capacity&lt;/strong&gt; for deep, uninterrupted work. Over time, these repeated interruptions diminish our ability to &lt;strong&gt;focus deeply&lt;/strong&gt;, making us more reactive and less capable of sustained, meaningful problem-solving. If you find it challenging to advance in your role, your &lt;strong&gt;weak attention span&lt;/strong&gt; might be a significant factor. Referring to the career progression of software engineers, it‚Äôs relatively straightforward to advance from a Software Engineer to a Senior Software Engineer. However, progressing beyond the Senior Engineer level requires demonstrating a &lt;strong&gt;broader impact&lt;/strong&gt;, which can only be achieved through focused, uninterrupted time dedicated to cognitively demanding tasks. Deep work fosters a systems-level perspective, enabling the identification of patterns, anticipation of potential challenges, and proposal of innovative improvements. It also provides the opportunity to learn and refine expertise in critical areas that contribute to organizational success. Without consistent deep work, engineers may become ensnared in reactive workflows, unable to deliver the strategic value expected at the Senior+ level.&lt;/p&gt;

&lt;h3 id=&quot;do-our-jobs-encourage-deep-work&quot;&gt;Do our jobs encourage Deep work?&lt;/h3&gt;

&lt;p&gt;Unfortunately, many work environments, especially startups, don‚Äôt really encourage deep work. With tasks often feeling urgent, we tend to reward &lt;strong&gt;visibility over impact&lt;/strong&gt;, which unintentionally promotes shallow work, like responding to emails, attending long meetings, or giving constant status updates. These activities can create an illusion of productivity because they are &lt;strong&gt;easy to measure&lt;/strong&gt; and &lt;strong&gt;immediately visible&lt;/strong&gt;. On the other hand, the focused, uninterrupted effort needed for solving complex problems often doesn‚Äôt show immediate results and can be overlooked in places focused on short-term goals. In my opinion, we need more mature managers who appreciate deep work for its long-term benefits.&lt;/p&gt;

&lt;h3 id=&quot;some-personal-productivity-hacks&quot;&gt;Some personal productivity hacks&lt;/h3&gt;

&lt;p&gt;These habits have helped me to get more work done without overworking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Whether it‚Äôs email or Slack, I‚Äôve set up filters everywhere. If you‚Äôre in a channel that no longer interests you, or if there are emails you‚Äôre not interested in but are sent to a group, create filters for them. Check these messages occasionally instead of getting notified every time a new message arrives. Similar optimisations include muting channel notifications, leaving those channels, unsubscribing to some newsletters that you no longer need, or setting up email filters to ensure emails with certain subjects or sender IDs don‚Äôt land in your inbox (allowing you to check them later).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I typically begin my workday around 8:00 - 8:30 am. This routine has been a part of my life for more than five years now, and it has significantly contributed to my ability to focus on crucial tasks before the rest of the team starts their day (given flexible working hours and distributed teams).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Although I get a lot done in the morning, I also set up Do Not Disturb (DND) on Slack when needed. It‚Äôs better to clearly indicate that you‚Äôre busy rather than ignoring messages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I keep my mobile internet off during work hours (except at lunch) to avoid distractions from push notifications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I keep a simple text file open in my editor all the time. It‚Äôs got a list of stuff I need to focus on, plus all the raw notes about how things are going. Since the list covers everything from my own tasks to PR reviews, design document reviews, and other things, it‚Äôs my go-to spot for figuring out what to do next. Prioritizing is just a matter of moving a few lines around. This setup also makes it easy to pick up where I left off after vacations or long weekends without feeling overwhelmed or lost.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I push all shallow work to a specific part of my day. These are minor tasks with medium to low priority, which I can tackle after completing deep work. On another note, there are often tiny tasks that take less than two minutes. I choose to do these tasks immediately because scheduling them actually wastes more time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I maintain a clutter-free physical workspace, ensuring that my desk and surrounding area are organized and tidy. This helps me focus better and reduces distractions. Additionally, I relocated to a quieter place a few months ago, which has significantly improved my ability to concentrate and work efficiently (more details in the next section).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;habits-and-environment&quot;&gt;Habits and environment&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-01-05-habits-productivity-deepwork-cluttered_desk.jpg&quot; alt=&quot;Image from Unsplash&quot; style=&quot;display: block; margin: 10px auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your room is a reflection of your mind. The state of your room, whether it‚Äôs organized, cluttered, or decorated in a specific way, can often reveal aspects of your personality, thought process, and overall mental state. A tidy room signifies a clear mind and a messy room indicates a more chaotic inner world. I‚Äôm sharing this because I moved to a cleaner workspace in October 2024, and it has improved my focus. Having worked from home for a long time, it was important for me to set up a space away from regular household distractions, which I had become accustomed to working with.&lt;/p&gt;

&lt;p&gt;During the time I set up my new desk, I added three books to my bookshelf: &lt;strong&gt;Atomic Habits&lt;/strong&gt;, &lt;strong&gt;Deep Work&lt;/strong&gt;, and &lt;strong&gt;Zero to One&lt;/strong&gt;. While the third book focuses on entrepreneurship, the first two helped me adjust my &lt;strong&gt;habits&lt;/strong&gt; and &lt;strong&gt;work patterns&lt;/strong&gt; to be more productive.For example, I used to struggle to read regularly and would save reading for the weekends because my weekdays were busy. However, in &lt;em&gt;Atomic Habits&lt;/em&gt;, the author shares a simple but useful tip:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It‚Äôs easy not to practice the guitar when it‚Äôs tucked away in the closet. It‚Äôs easy not to read a book when the bookshelf is in the corner of the guest room. It‚Äôs easy not to take your vitamins when they are out of sight in the pantry. When the cues that spark a habit are subtle or hidden, they are easy to ignore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He suggests placing a book under your pillow to encourage more frequent reading, and that‚Äôs exactly what I did. In the morning, I would wake up and spend 10 minutes reading, repeating the same before bed. I thought I was ‚Äúbusy‚Äù during the week, but making this small change wasn‚Äôt difficult since I was using that time to scroll through social media anyway. As a result, I finished reading these three books in just &lt;strong&gt;9 weeks&lt;/strong&gt; (something that would have taken me at least 16-20 weeks if I only read on weekends). Some days, I got so interested in the topic that I spent 20-30 minutes reading instead of just 10. It was definitely better than spending those 20-30 minutes on Instagram üòâ. This habit lasted for about 4 months, but now the streak is broken, so I read 3-4 nights a week instead of 6-7 (still much better than just weekend reading). One reason for this change is that I switched back to technical books, which require more focus and the right mood to read.&lt;/p&gt;

&lt;p&gt;While it‚Äôs important to have good habits, it‚Äôs even more crucial to learn &lt;strong&gt;how to fit them&lt;/strong&gt; into your schedule, so you don‚Äôt struggle with prioritizing what‚Äôs important. Reading &lt;em&gt;Atomic Habits&lt;/em&gt; really helped me with that. Let me share two more habits I‚Äôve developed over the years that I believe have helped me grow:&lt;/p&gt;

&lt;h3 id=&quot;boredom-is-important&quot;&gt;&lt;strong&gt;Boredom is important&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Many people who struggle to grow beyond a certain point often claim they are extremely busy‚Äîwhether genuinely or by filling their time with low-impact tasks that create an illusion of ‚Äúbusyness.‚Äù While constant activity might feel satisfying, it often leaves little room for &lt;strong&gt;strategic thinking or mental clarity&lt;/strong&gt;. Surprisingly, boredom plays a vital role in growth. It‚Äôs in these quiet, unoccupied moments that your mind can wander, reflect, and make unexpected connections. Boredom is not idleness. it‚Äôs about giving your brain the space to process thoughts, spark creativity, and identify priorities. Without moments of stillness, you risk being trapped in a cycle of reactive tasks, never pausing to think deeply or plan effectively for the future. Sadly, social media apps &lt;a href=&quot;https://blog.gagan93.me/cost-of-time#heading-technology-addiction&quot;&gt;eliminate boredom&lt;/a&gt; by constantly feeding quick dopamine hits through endless scrolling, notifications, and bite-sized content. This prevents our minds from wandering, reflecting, or engaging in deeper thought.&lt;/p&gt;

&lt;h3 id=&quot;simplicity-is-clarity&quot;&gt;Simplicity is clarity&lt;/h3&gt;

&lt;p&gt;This habit is deeply rooted in my mindset, drawing inspiration from both &lt;strong&gt;religious beliefs&lt;/strong&gt; and &lt;strong&gt;practical experiences&lt;/strong&gt;. On the religious side, there‚Äôs an emphasis on leading a &lt;strong&gt;simple and minimal life&lt;/strong&gt;, free from unnecessary complications. This perspective has taught me the value of clarity &amp;amp; focus, which extend far beyond personal life. Similarly, as an engineer, simplicity isn‚Äôt just a preference while building large systems ‚Äî it‚Äôs a functional necessity. Simple systems are inherently easier to understand, debug, and improve. They lower the cognitive load on those working with them, allowing teams to collaborate effectively, onboard faster, and make informed decisions with confidence. On the flip side, I‚Äôve also worked on (and even built ü´£) systems that were architected in a way that they were not only hard to understand but harder to extend. So seek simplicity as a principle in every aspect of your life.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this article, I shared my journey transitioning from a services company to an early-stage product startup, highlighting the challenges and lessons learned along the way. We explored the delicate balance between perfection and speed, the impact of stress and context switching on productivity, and the importance of deep work for personal and professional growth. Additionally, I shared personal productivity hacks and the significance of habits and environment in enhancing work efficiency. By reflecting on these experiences, I hope to provide valuable insights for those navigating similar paths in dynamic work environments.&lt;/p&gt;

&lt;p&gt;Before ending this blog post, I‚Äôd like to share photos of my &lt;strong&gt;existing setup&lt;/strong&gt; (that was in the middle of our living room) and &lt;strong&gt;current setup&lt;/strong&gt; (isolated on a separate floor where I use to work out during COVID).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-01-05-habits-productivity-deepwork-my_desk.jpg&quot; alt=&quot;Image from Unsplash&quot; style=&quot;display: block; margin: 10px auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre interested to seriously read about &lt;a href=&quot;https://www.amazon.in/dp/0349413681?ref=ppx_yo2ov_dt_b_fed_asin_title&quot;&gt;Deep work&lt;/a&gt; or &lt;a href=&quot;https://www.amazon.in/dp/1847941834?ref=ppx_yo2ov_dt_b_fed_asin_title&quot;&gt;Habits&lt;/a&gt;, and their impact on your life, read the respective books.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I‚Äôve shared my opinions about &lt;a href=&quot;https://blog.gagan93.me/multi-tasking-is-not-so-cool&quot;&gt;multi-tasking&lt;/a&gt; some time ago on my blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Despite working in startup throughout my career, I hated overworking (and almost never did it). In a &lt;a href=&quot;https://blog.gagan93.me/eight-productive-hours&quot;&gt;blog post&lt;/a&gt;, I shared common reasons that cause you to work beyond eight working hours.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apart from &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;Interview related content&lt;/a&gt; (that‚Äôs always most viewed), there are plenty of technical blog posts that I‚Äôm sure you‚Äôll like (few of my favourites are &lt;a href=&quot;https://blog.gagan93.me/avoid-redundant-complexity&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://blog.gagan93.me/cloud-pricing-vendor-lock-ins&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://blog.gagan93.me/things-code-reviewers-hate&quot;&gt;this&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you for reading this. Please leave your thoughts in the comments üòä&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jan 2025 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2025/01/05/habits-productivity-deep-work.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2025/01/05/habits-productivity-deep-work.html</guid>
      </item>
    
      <item>
        <title>Refactoring: Lessons Learnt So Far</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-nina-mercado-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@nina_mercado?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Nina Mercado&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/silver-and-black-round-coins-5Y8NrzPya-w?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Refactoring is the process of restructuring code, without changing its original functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the past three years, my role has allowed me to pick a lot of refactoring tasks, which have enhanced my skills and understanding around &lt;em&gt;Refactoring&lt;/em&gt;. Despite its proven benefits, many developers and teams approach refactoring with hesitation, weighed down by myths that it is &lt;strong&gt;risky, time-consuming, or equivalent to a complete rewrite&lt;/strong&gt;. However, refactoring is none of these. When done correctly, it can significantly reduce technical debt, improve readability, enhance test coverage, and simplify debugging.&lt;/p&gt;

&lt;p&gt;This blog aims to demystify refactoring by exploring its importance, addressing common misconceptions, and providing practical guidelines for approaching it the right way. Whether you‚Äôre tackling a legacy codebase or refining new code, understanding the essence of refactoring can empower you to build more sustainable software. Let‚Äôs delve into &lt;strong&gt;why&lt;/strong&gt; and &lt;strong&gt;how&lt;/strong&gt; refactoring should be a regular part of your development process, not an intimidating task.&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-refactor-code&quot;&gt;Why should you refactor code?&lt;/h2&gt;

&lt;p&gt;After nearly a decade of writing software, I‚Äôve learned that &lt;strong&gt;refactoring is unavoidable&lt;/strong&gt;. While it‚Äôs possible to delay it, putting it off only makes the task costlier and more complicated down the line. Ignoring refactoring may offer short-term relief, but in the long run, the cost of addressing the accumulated technical debt grows exponentially.. The below points should help you understand why you need to prioritize refactoring regularly:&lt;/p&gt;

&lt;h3 id=&quot;to-untangle-code-ownership&quot;&gt;To untangle Code Ownership&lt;/h3&gt;

&lt;p&gt;One common complaint among developers working in a &lt;em&gt;fast-paced&lt;/em&gt; startup environment is that the code for different modules often becomes tightly coupled, sometimes even within a single file. This situation arises because, in the beginning, the business logic is straightforward. Each time a developer needs to make a change, they perceive it as &lt;em&gt;just another simple change&lt;/em&gt;. Over the years, this approach results in a file that resembles a &lt;a href=&quot;https://en.wikipedia.org/wiki/God_object&quot;&gt;god object&lt;/a&gt;, which seems to know everything but has lost sight of its original purpose. Refactoring plays a crucial role in untangling this complex web of code. By doing so, it allows different teams to take ownership of specific files or modules. This can be effectively managed using tools like &lt;a href=&quot;https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners&quot;&gt;GitHub CodeOwners&lt;/a&gt;, which help assign responsibility and maintain clarity in code management. Through refactoring, the codebase becomes more organized, enabling teams to work more efficiently and reducing the risk of errors when changes are made.&lt;/p&gt;

&lt;h3 id=&quot;to-reduce-cost-of-debugging&quot;&gt;To reduce cost of debugging&lt;/h3&gt;

&lt;p&gt;Recently, I was on a call with another engineer, and we were trying to find problem in the production code. A section of the application wasn‚Äôt functioning correctly, so we started by reading the code starting from the controller to trace the potential path a user might have taken. The controller file was cluttered, containing most of the business logic in one file. It was filled with numerous methods that called one another, each with lengthy lists of arguments that were difficult to guess. We spent over an hour trying to pinpoint the issue, but even after all that time, we weren‚Äôt entirely confident about the root cause. Having dealt with debugging production issues in the past where the code was better organized, I realized that these engineers were losing countless hours every time a problem like this came. If you find yourself in a similar situation where valuable productive time is being wasted on debugging due to tangled code, it‚Äôs crucial to have a conversation with your managers. Discuss the importance of planning for refactoring in the future. By doing so, you can improve the code structure, making it easier to identify and fix issues, ultimately saving time and resources in the long run.&lt;/p&gt;

&lt;h3 id=&quot;to-reduce-techical-debt&quot;&gt;To reduce techical debt&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Technical debt is the cost of future rework that results from prioritizing speed over long-term design in software development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Companies often ship code that needs more work before adding new features. While launching the initial product is the top priority, addressing tech debt often gets delayed. For example, when working on a new module, you might hardcode values in an existing class. As more requirements come in, adding more hardcoded values or if-else statements just creates a mess. This means you need to refactor the code before building more on it. Remember this quote: &lt;a href=&quot;https://news.ycombinator.com/item?id=33059910&quot;&gt;&lt;em&gt;First make the change easy, then make the easy change&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;to-improve-engineering-culture&quot;&gt;To improve engineering culture&lt;/h3&gt;

&lt;p&gt;The cleaner and more well-structured your code is, the better it becomes as a reference for others. When you take the time to improve and maintain high-quality code, it not only benefits the project at hand but also sets a positive example for the rest of the team. New team members will be motivated by its clarity and organization, inspiring them to adopt similar practices in their own work. This fosters a culture of excellence, where everyone strives to write better code. On the flip side, if the codebase is cluttered and unorganised, there‚Äôs a high likelihood that others will follow that same pattern and create similarly messy code. It becomes a cycle, where poor practices multiply. As the team grows, this culture of quality spreads, impacting the overall productivity and the risk of technical debt based on the shape of initial code.&lt;/p&gt;

&lt;p&gt;The habits you instill in your codebase today can shape the quality of work throughout the entire team tomorrow. Before we learn how to refactor, let‚Äôs clear up some myths about refactoring.&lt;/p&gt;

&lt;h2 id=&quot;myths-around-refactoring&quot;&gt;Myths around refactoring&lt;/h2&gt;

&lt;h3 id=&quot;its-another-name-for-rewriting&quot;&gt;It‚Äôs another name for ‚ÄúRewriting‚Äù&lt;/h3&gt;

&lt;p&gt;Before we talk more about refactoring, it‚Äôs important to understand basic differences between &lt;em&gt;Complete Rewrite&lt;/em&gt; and &lt;em&gt;Refactoring&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Aspect&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Complete Rewrite&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Entire codebase is discarded and rebuilt.&lt;/td&gt;
      &lt;td&gt;Improves the existing code incrementally.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Risk&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;High risk of introducing new bugs or missing features.&lt;/td&gt;
      &lt;td&gt;Lower risk as existing functionality is preserved.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Time &amp;amp; Cost&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Time-consuming and often more expensive.&lt;/td&gt;
      &lt;td&gt;Typically faster and more cost-effective.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Goal&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Start fresh with a new design or approach.&lt;/td&gt;
      &lt;td&gt;Improve code quality, maintainability, and performance.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Disruption&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Can cause significant disruption to development and team workflow.&lt;/td&gt;
      &lt;td&gt;Less disruptive, as changes are small and incremental.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I‚Äôve seen developers (of all experience ranges) raising PRs with thousands of lines of changes across multiple files, claiming they‚Äôve ‚Äútested everything thoroughly‚Äù. They think this one PR will solve all their problems, but that‚Äôs rarely true. In most cases, the real issues begin after merging the PR. Don‚Äôt take this negatively if you‚Äôre following the same approach currently. Even I‚Äôve been that developer who has merged large PRs without breaking anything on production, and I‚Äôve seen others do it too, because they took the mental stress of testing every case and fixing all review comments on the large PR (and again test everything). The only problem with this approach is that &lt;strong&gt;it doesn‚Äôt scale&lt;/strong&gt; for everyone in the team. While everyone can raise large PRs,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Not everyone can &lt;strong&gt;test&lt;/strong&gt; them thoroughly. And even if they do it once, they don‚Äôt do it with the same effort after fixing the review comments where they might have changed something in logic or in design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also, not everyone can &lt;strong&gt;review&lt;/strong&gt; large PRs. As a result, many such large changes go live without a good code review. In my experience, reviewing large PRs can easily take more than an hour and not everyone is ready to put that much effort. These days I often don‚Äôt review large PRs. I spent ~ 5 minutes in understanding the structure of changed files and then leave a comment suggesting how the author can raise smaller PRs that are easy to review.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Due to how developers have been approaching ‚Äúrefactoring‚Äù, management and leadership have started seeing it in the same way as ‚Äúrewriting.‚Äù While raising a large PR for a new feature is safer (since most of the code is new), it is considered very risky for refactoring. If your code change breaks a stable module in production, it will confirm your manager‚Äôs belief that &lt;em&gt;refactoring is as risky as rewriting&lt;/em&gt;. So, make sure you avoid the ‚Äúbig bang‚Äù approach.&lt;/p&gt;

&lt;h3 id=&quot;its-meant-for-legacy-applications&quot;&gt;It‚Äôs meant for legacy applications&lt;/h3&gt;

&lt;p&gt;Refactoring is linked to &lt;strong&gt;legacy systems&lt;/strong&gt; because legacy systems often accumulate large technical debt over time, but it‚Äôs just as important for &lt;strong&gt;new and evolving applications&lt;/strong&gt;. Even in modern codebases, you can gather small debts like long classes/methods, duplicate code, unclear variable names, etc. Refactoring lets developers improve and optimize code continuously without a major overhaul. I often refactor code I wrote last week or last month. When a change makes a method or class messy, I find better ways to rewrite that code. It gives a different kind of satisfaction üòå.&lt;/p&gt;

&lt;h3 id=&quot;its-risky-hard-and-unscoped&quot;&gt;It‚Äôs risky, hard and unscoped&lt;/h3&gt;

&lt;p&gt;The favorite thing for an engineer to do is build new features. The second favorite (for a lot of us) is doing a big-bang rewrite of an old system. But there are two issues with large rewrites:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;They have more chances of breaking production because of size of change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They have less chances of getting shortlisted by your manager, again, because of it‚Äôs size. And because such tasks do not create any immediate business value, they gets shelved.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your manager has been a Senior IC person in the past, there might suggest you to split the project in order to get it prioritized. But if they are someone who‚Äôs not much into tech these days, and they do not suggest something like this, your refactoring project won‚Äôt get picked ever. So irrespective of how &lt;strong&gt;technical&lt;/strong&gt; your manager is, it‚Äôs your role to understand the scope of the project and break it into parts that can be shipped. If you‚Äôve never done it, please start doing it from now. Shipping new features can go in large PRs (although I don‚Äôt recommend you doing that) but refactoring projects should &lt;strong&gt;never&lt;/strong&gt; go as large PRs. And because many developers have been executing them wrongly, refactoring is seen as &lt;strong&gt;risky, hard and unscoped&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;its-a-one-time-event&quot;&gt;It‚Äôs a one time event&lt;/h3&gt;

&lt;p&gt;A significant amount of technical debt shows that your team hasn‚Äôt focused on refactoring for a long time. If you compare the cost of refactoring a system today with the cost three years from now, you‚Äôll see that doing it today is easier and cheaper (unless the product is being retired in the next three years). This is because if experienced team members leave, new ones will struggle to understand the messy code that has built up over the years. Refactoring is a skill that everyone develops over time. Once you successfully complete a small refactoring project, you gain the confidence to handle more tasks and improve the system further. As you master this skill, it‚Äôs important to share your knowledge with others, so everyone can help improve the existing codebase. Ideally, refactoring shouldn‚Äôt be something you do only once or twice a year. It should be a &lt;strong&gt;continuous&lt;/strong&gt; and &lt;strong&gt;intentional&lt;/strong&gt; effort to keep technical debt from becoming too much to handle.&lt;/p&gt;

&lt;h3 id=&quot;refactoring-is-moving-code-across-files&quot;&gt;Refactoring is ‚Äúmoving code across files‚Äù&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúDon‚Äôt mistake motion for progress‚Äù - Alfred A. Montapert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In web applications, there is a common principle that your controllers should remain small and focused. This means they should primarily call the service layer and handle the response based on the service‚Äôs output. As a result, developers who find themselves writing extensive code within controllers might feel compelled to move that code elsewhere. While this instinct is understandable, it is crucial to approach this task with careful consideration and planning. Instead of simply &lt;em&gt;cutting and pasting lengthy methods&lt;/em&gt; from one file to another, which only addresses the superficial goal of reducing controller size, a more thoughtful strategy is required. True refactoring involves a deeper analysis of each method‚Äôs purpose and determining the most appropriate location for it. This process requires developers to think critically about the design and structure of their classes, ensuring that each method is placed in a context where it logically belongs. By engaging in a well-planned refactoring activity, developers can achieve more than just &lt;em&gt;smaller controllers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I believe you now have a solid understanding of what refactoring is‚Äîand what it isn‚Äôt. Now, let‚Äôs dive deeper into how to approach refactoring and explore the key challenges to watch out for during the process.&lt;/p&gt;

&lt;h2 id=&quot;approaching-refactoring&quot;&gt;Approaching Refactoring&lt;/h2&gt;

&lt;h3 id=&quot;it-is-done-in-isolation&quot;&gt;It is done in isolation&lt;/h3&gt;

&lt;p&gt;When someone is working on a feature, they‚Äôre often motivated to fix the code around it. As a result, we get to see PRs where someone lints an entire file rather than the method they changed, or improved the logic of the methods that is getting called from their code. Their intention is to improve or optimise the code but the change could probably be taken up in a separate PR. Just like you don‚Äôt mix &lt;strong&gt;drinking&lt;/strong&gt; with &lt;strong&gt;driving&lt;/strong&gt;, avoid mixing &lt;strong&gt;feature changes&lt;/strong&gt; with &lt;strong&gt;refactoring.&lt;/strong&gt; Make sure that if you want to do the noble act of improving the existing code, raise a separate PR for it so that it can be individually tested, reviewed and released (and even reverted, incase something goes wrong). This will ensure that your &lt;strong&gt;feature changes&lt;/strong&gt; do not get blocked due to review comments on this &lt;strong&gt;refactoring changes&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;it-should-be-guided-by-tests&quot;&gt;It should be guided by tests&lt;/h3&gt;

&lt;p&gt;Test cases are incredibly important when you are refactoring any part of a system. They serve as a &lt;strong&gt;safety net&lt;/strong&gt;, ensuring that the changes you make do not unexpectedly break an existing functionality. For example, if you have a comprehensive set of unit tests for a large file, these tests can guide you through the process of splitting the file into smaller, more manageable pieces. With unit tests in place, you can confidently refactor, knowing that any errors introduced during the process will be quickly identified. This allows you to focus on improving the code‚Äôs structure and readability without worrying about unintended side effects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if I don‚Äôt have test cases for some code? -&lt;/strong&gt; Incase you don‚Äôt have test cases, I recommend building a strong automated test suite first, or find ways to manually test the system to confirm everything works after refactoring. Please do not prioritize refactoring without a good way of testing out changes. I‚Äôve been moving code from controllers to services, and from large services to smaller, more manageable services using this approach. I make sure my controller tests cover 100% of the controller and service code. Once that‚Äôs done, I know that any changes I make will be caught if they break any part of the API contract.&lt;/p&gt;

&lt;h3 id=&quot;refactoring-should-use-established-patterns&quot;&gt;Refactoring should use established patterns&lt;/h3&gt;

&lt;p&gt;While many believe that code is poetry ‚Äî and I wholeheartedly support the idea of creative problem-solving, it‚Äôs equally important to follow established patterns and best practices when refactoring code. These patterns have been developed and refined by the community over decades of experience while solving similar problems. They encapsulate lessons learned from solving common challenges, ensuring solutions are robust, efficient, and easier for others to understand. Established patterns, like &lt;strong&gt;design patterns&lt;/strong&gt; (e.g., Singleton, Strategy, Factory), &lt;strong&gt;architectural styles&lt;/strong&gt; (e.g., modular monoliths, microservices), solutions to &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;&lt;strong&gt;common code smells&lt;/strong&gt;&lt;/a&gt; (like long class, long methods, data clumps), and practices specific to a &lt;strong&gt;language&lt;/strong&gt; or &lt;strong&gt;framework&lt;/strong&gt; act as a shared vocabulary among developers. When you follow these patterns, you‚Äôre not just solving a problem, you‚Äôre solving it in a way that others can immediately recognize, adapt, and build upon. This reduces cognitive overhead for team members, accelerates onboarding, and improves collaboration. While building a solution in way that it feels ‚Äúuniquely yours‚Äù is a tempting feeling, these (overly creative) solutions can become difficult for others to maintain, debug, or extend over time. By grounding your refactoring efforts in proven patterns, you ensure the code remains accessible and future-proof.&lt;/p&gt;

&lt;h3 id=&quot;avoid-premature-abstraction&quot;&gt;Avoid Premature abstraction&lt;/h3&gt;

&lt;p&gt;Abstraction is a great concept, but premature abstraction makes things complex. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_\(computer_programming\)&quot;&gt;common rule&lt;/a&gt; in software engineering suggests to avoid having an abstraction till there are at least &lt;strong&gt;three repetitions&lt;/strong&gt; of the code fragment that you‚Äôre planning to abstract out. While ‚Äúthree‚Äù might not be an appropriate number for everyone, it should be a good starting point for you if you don‚Äôt have anything else in mind. Waiting for a few repetitions of the code ensures that you have some data around what to generalize and what not to. While duplication of code is considered bad, generalizing prematurely might lead to speculative designs that are very different from the real world needs. Write code that is clear, direct, and solves the immediate problem effectively. Refactor and abstract &lt;strong&gt;only when&lt;/strong&gt; the need becomes evident‚Äîwhen similar patterns emerge across different parts of the system, or when a particular piece of functionality needs to be reused or extended.&lt;/p&gt;

&lt;h3 id=&quot;keep-changes-small-and-reversible&quot;&gt;Keep changes small and reversible&lt;/h3&gt;

&lt;p&gt;I think we‚Äôve already discussed about the benefits of small PRs, so keeping the changes &lt;strong&gt;small&lt;/strong&gt; is an obvious thing. Another important thing is to ensure that changes are &lt;strong&gt;reversible&lt;/strong&gt;. As refactoring can touch very critical parts of your application, it is important to &lt;strong&gt;plan for failure&lt;/strong&gt;. The simplest &lt;em&gt;rollback plan&lt;/em&gt; would be to turn off the feature flag incase something goes wrong (or rollback the previous release). But that only works for deployments that didn‚Äôt modify any data. If you‚Äôve modified some data in your database, it might be hard to rollback. As a precaution, try to follow an approach where rolling back data changes is also easy. For example, split your deployments like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add a new column that has new data. Push the new code along with this but don‚Äôt flip the feature flag yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Back populate the data in new column and add relevant callbacks in the system to ensure new data gets copied.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When previous data is also copied, flip the feature flag and see if everything is going well. If something goes wrong, immediately turn off the feature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After few weeks/months (based on amount of testing you need), drop the old column, delete the old code and drop the if-else code handling the feature flag.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on the scale of data and complexity of project, the above approach can sound normal or an overkill to you. But trust me, I‚Äôve seen things going wrong just because developers didn‚Äôt plan well for rollbacks for &lt;strong&gt;data related changes.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;document-changes&quot;&gt;Document changes&lt;/h3&gt;

&lt;p&gt;Documenting changes during refactoring is essential for maintaining clarity, ensuring team alignment, and supporting future development. It captures the &lt;strong&gt;rationale&lt;/strong&gt; behind the changes, helping others understand why specific decisions were made, especially if they impact dependencies or architectural patterns. Documentation preserves &lt;strong&gt;context&lt;/strong&gt; to avoid undoing improvements and provides a historical record for long-term projects. It also simplifies onboarding by giving new team members a clear view of the code‚Äôs evolution. Good documentation highlights &lt;strong&gt;what was refactored, why it was needed, and how it aligns with the project‚Äôs goals&lt;/strong&gt;, helping avoid confusion and duplication of effort. Including notes in commit messages, pull requests, or internal wikis ensures the refactoring‚Äôs intent is communicated effectively. This practice not only fosters collaboration but also aids debugging by clarifying the purpose and impact of the changes, ensuring the refactored code remains accessible and adaptable.&lt;/p&gt;

&lt;h3 id=&quot;monitor-performance-check-for-bugs&quot;&gt;Monitor performance, check for bugs&lt;/h3&gt;

&lt;p&gt;When refactoring, it‚Äôs crucial to &lt;strong&gt;monitor performance&lt;/strong&gt; and &lt;strong&gt;check for bugs&lt;/strong&gt; to ensure stability and identify unintended side effects. While refactoring doesn‚Äôt guarantee performance improvements or fewer bugs, it can pave the way for these by simplifying the codebase and addressing inefficiencies. A well-refactored codebase should also make future optimizations (such as adding a caching layer) easier to plan and implement. Additionally, cleaner code helps in debugging and enhances maintainability (as already explained above). Use comprehensive test suites to validate changes and check for regressions and APM tools to monitor real-world performance after deployment.&lt;/p&gt;

&lt;h3 id=&quot;value-contributions&quot;&gt;Value contributions&lt;/h3&gt;

&lt;p&gt;This message is for team leads and engineering managers: one of the most common reason why developers struggle with refactoring tasks is &lt;strong&gt;a lack of motivation&lt;/strong&gt;. And often, this lack of motivation comes from how teams undervalue &lt;strong&gt;refactoring&lt;/strong&gt; compared to &lt;strong&gt;business deliverables&lt;/strong&gt;. As Eileen pointed out in her &lt;a href=&quot;https://www.youtube.com/watch?v=olxoNDBp6Rg&quot;&gt;latest RailsConf talk&lt;/a&gt;, a good engineering culture starts at the top. Many of us have worked at organizations where messy code is shipped in the name of urgency, and the architecture becomes too complex to maintain over time. If we‚Äôre to take actionable insights from her experience, here‚Äôs what leadership can do to address these challenges:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prioritize Refactoring -&lt;/strong&gt; Treat refactoring tasks with the same importance as product development. Assign dedicated bandwidth for these efforts. Spending ‚Äúfew hours a day‚Äù don‚Äôt work and often lead to half-hearted results.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Align Teams&lt;/strong&gt; - Ensure engineers, product managers, and other stakeholders understand that refactoring is just as crucial as building features. A healthy codebase supports long-term business goals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Invest in Education -&lt;/strong&gt; Not all team members naturally excel at refactoring. If specific skills are needed to address technical debt or architectural issues, invest time and resources to train your team.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eileen, with over a decade of experience at companies like Basecamp, GitHub, and Shopify, emphasized these points from her journey. While I haven‚Äôt worked at large organizations, I‚Äôve faced similar challenges in small-to-medium startups. And seeing the comments on her talk, these problems persist even in teams following microservices architecture. So we can conclude that the challenges of maintaining a clean, scalable codebase are universal.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While refactoring is essential for maintaining a clean and efficient codebase, it‚Äôs important to respect the existing code, even if it appears messy. This code was often written under tight deadlines to meet urgent business needs, and it has successfully supported the business for &lt;strong&gt;months and years&lt;/strong&gt;. Recognizing the value of this ‚Äúmess‚Äù is crucial, as it reflects quick thinking of developers who ensured the continuity and success of the business, which is crucial for any organisation.&lt;/p&gt;

&lt;p&gt;Thank you for reading this post, have a good day üòä.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre not yet thorough with design patterns and code smells, use this &lt;a href=&quot;https://refactoring.guru/&quot;&gt;free resource&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/paying-down-tech-debt&quot;&gt;this post&lt;/a&gt; by The Pragmatic Engineer around tech debt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find a book around refactoring for your specific programming language. For example, I read &lt;a href=&quot;https://www.amazon.in/Refactoring-Ruby-Addison-Wesley-Professional/dp/0321984137&quot;&gt;this book&lt;/a&gt; for Ruby.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I already linked &lt;a href=&quot;https://www.youtube.com/watch?v=olxoNDBp6Rg&quot;&gt;this talk&lt;/a&gt; in one of the points above, but adding this again incase you missed that!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 24 Nov 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/11/24/how-to-refactoring.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/11/24/how-to-refactoring.html</guid>
      </item>
    
      <item>
        <title>1:1 conversations with 10 Software Engineers</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-dylan-ferreira-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@dylanferreira?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Dylan Ferreira&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/person-in-red-and-black-plaid-long-sleeve-shirt-using-black-laptop-computer-HJmxky8Fvmo?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I‚Äôm always looking for opportunities to engage with people who share similar interests and experiences. Recently, I shared a &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7236405029618774016/&quot;&gt;Google Form&lt;/a&gt; to connect with others, and I was thrilled to receive about 10 responses! Most of the engineers were based in India, with one from Switzerland. It was great to chat about their work, challenges, and career growth, and I learned a lot from these conversations.&lt;/p&gt;

&lt;p&gt;After some of these discussions, I posted a few &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7243656624869949440/&quot;&gt;interesting insights&lt;/a&gt; from our calls. I‚Äôm now writing this (detailed) post to share some highlights and reflections, as many of the conversations included requests for advice that could benefit a wider audience.&lt;/p&gt;

&lt;h2 id=&quot;what-all-we-discussed&quot;&gt;What all we discussed?&lt;/h2&gt;

&lt;p&gt;In this section, I am sharing all the key points that we discussed during our calls. Each of these points will be explored in detail in the sections that follow. Most of the engineers had 4-7 years of experience and wanted advice on career growth along with potential future work and challenges. Here‚Äôs what we talked about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why am I doing this for free? Do I offer paid mentorship? -&lt;/strong&gt; Not everyone asked this but two separate people asked each of these questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to prepare for Interviews?&lt;/strong&gt; - Half of them were either in their notice period or actively searching for new opportunities. I was able to provide detailed insights on this topic, having recently gone through a job transition myself. Additionally, I shared thoughts on various learning resources because all available content is not of good quality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How do large teams work?&lt;/strong&gt; - It‚Äôs fascinating to observe how massive products like YouTube, Amazon S3, or Uber are developed and maintained. These platforms are supported by extensive teams that collaborate across different regions and time zones. Understanding the dynamics of such large teams can provide valuable insights into how complex projects are managed and delivered successfully.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How do I hire people?&lt;/strong&gt; - I‚Äôve given interviews at about 6-8 companies before switching this time. But at LocoNav, I had interviewed &amp;gt; 200 people for various engineering roles including Senior Engineers, Managers, QA engineers, Devops. So I shared some insights here based on my experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What are cultural differences between Indian and non-Indian teams?&lt;/strong&gt; - I discussed this with someone working outside India who also had experience working in India. Many others have shared similar insights, especially those who have dealt with ‚Äúnot so good‚Äù bosses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How do you handle/convey delays across layers of stakeholders?&lt;/strong&gt; - Handling this can be challenging, especially when it involves end customers. We‚Äôll discuss a framework that helps keep everyone satisfied.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Are Big Tech engineers are superior to us?&lt;/strong&gt; - Someone had this in their mind, so had to discuss around this inferiority complex. Another guy had a question - &lt;em&gt;Why my friends in big tech companies get paid so much if they do same work as we do?&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to grow as an Engineer (not a Java Engineer or Ruby Engineer)&lt;/strong&gt; - It‚Äôs important to be skilled in at least one language, but it‚Äôs even more important to stay flexible and ready to learn anything new that comes your way.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to know about scale without working on scale&lt;/strong&gt;? - Not everyone gets a chance to work on scale or work on certain things like Devops, but many companies seek that experience. How to counter that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How I generally approach learning anything new?&lt;/strong&gt; - I was asked this question in an interview also. I‚Äôll also share what I call as &lt;strong&gt;continuous learning&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How often your managers sync and how does it impact your growth?&lt;/strong&gt; - I‚Äôve been managed by all sorts of people ‚Äî from those who didn‚Äôt sync in months to the current org where managers mostly sync weekly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to know about team‚Äôs culture before joining?&lt;/strong&gt; - While salary details are clear before you join, it‚Äôs tough to understand a company‚Äôs culture until you start working there. However, there‚Äôs a simple trick you can use to learn about the company before accepting an offer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How to be good at real world HLD?&lt;/strong&gt; - As I spoke with mid-level engineers aiming to become senior engineers, they were eager to learn about real-world system design. In many companies, you rarely get the chance to design large systems because high-level designs are costly to redo, and most people work on systems that are already designed. Despite this, it‚Äôs crucial to understand core system design concepts so that even when making small changes to an existing design, you are aware of their implications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I‚Äôm not working on Kubernetes or Microservices, will I be easily able to switch? -&lt;/strong&gt; While I believe that it‚Äôs not important to get your hands dirty in every single hot technology to be relevant in the current market, you must remain updated with a few things.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let‚Äôs discuss about each of these one by one. This is going to be a long blog post because it‚Äôs summary of more than 13 hours of discussion. If you find this really long or parts of it not relevant to you, feel free to read specific parts using table of contents on the top.&lt;/p&gt;

&lt;h2 id=&quot;why-am-i-doing-this-for-free-do-i-offer-paid-mentorship&quot;&gt;&lt;strong&gt;Why am I doing this for free? Do I offer paid mentorship?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Many engineers, especially those at Big Tech companies, offer paid mentorships through platforms like Topmate, charging varying fees. While having a second income is fine, I‚Äôve received help throughout my 9-year career without being charged. It doesn‚Äôt feel right to start charging for sharing the same knowledge. My religious beliefs also motivate me to offer help for free. I‚Äôve encouraged others to help for free whenever possible. My job pays well, so I don‚Äôt want to charge for an hour of conversation. Additionally, not all calls are about mentorship; some people just want honest chats about work, experiences, productivity, team culture, and more. As of now, I don‚Äôt plan to offer paid mentorship services. Feel free to message me on LinkedIn if there‚Äôs anything I can help with.&lt;/p&gt;

&lt;h2 id=&quot;how-to-prepare-for-interviews&quot;&gt;How to prepare for Interviews?&lt;/h2&gt;

&lt;p&gt;As half of the engineers were in their notice period, this was a pretty common question ‚Äî How to prepare for interviews and what all things to study. I‚Äôve already written in detail about my &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;interview experiences&lt;/a&gt;, &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;resume improvement journey&lt;/a&gt;, &lt;a href=&quot;https://blog.gagan93.me/low-level-design-interviews&quot;&gt;low level design interviews&lt;/a&gt; and &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;job titles&lt;/a&gt;. I‚Äôll still share more based on their specific questions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Learn about different companies&lt;/strong&gt; &lt;strong&gt;and target accordingly&lt;/strong&gt; - Talking specifically about engineering roles, there are different types of companies like services companies, consultant companies, early/mid-age startups (Seed/Series-A/Series-B), Scale-ups (Series C+, post IPO), and Big-Tech companies. To explain a bit about each of them:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Services companies&lt;/strong&gt; typically include (but not limited to) Infosys, TCS, Accenture, Cognizant etc.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Consultant&lt;/strong&gt; companies could include &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Three_\(management_consultancies\)&quot;&gt;MBB&lt;/a&gt;, Thoughtworks, etc. Similar to the first one, you are working for others (not on your own products) but the role consultant-based where you completely handles client, not just code.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Early/mid age startups&lt;/strong&gt; could include any company that is going 0-1 (building MVP) or 1-10 (secured some funding and building for real customers). People in such companies are expected to be &lt;strong&gt;generalists&lt;/strong&gt;, who can wear multiple hats and can get work done really fast.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Scale ups&lt;/strong&gt; could include public listed companies. I could categorize them as young, agile, fast-moving but having lot of governance and processes because of being a public entity.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Big Tech&lt;/strong&gt; (as you‚Äôd expect) includes FAANG, and similar sized companies like Atlassian, Uber, Stripe etc. I‚Äôd call any other company as BigTech if they have &amp;gt;1000 engineers. In comparison to any other kind of company, here you‚Äôd find a lot of internal tooling.&lt;/p&gt;

        &lt;p&gt;There‚Äôs a trend of people moving from services companies and startups to Big Tech companies, but I‚Äôve also seen people move from startups to other startups or from Big Tech to startups. For example, I started at a services company (not as big as the ones mentioned) and then moved to startups. So I‚Äôd recommend you to decide types of companies you want to target and prepare for them accordingly. There are many websites, videos, and interview experience blogs that explain the interview processes for each of these.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Process familiarity&lt;/strong&gt; - All companies have their own process for selecting candidates. While common rounds like DSA, LLD, HLD, and HM exist in most companies, always get the details from your recruiter. If you‚Äôre interviewing with a large company, the recruiter will likely give you a document explaining the process with resources to help you prepare. In smaller companies, you often need to ask questions to get clarifications. I‚Äôve met engineers who didn‚Äôt know the total number of rounds because the recruiter didn‚Äôt explain, and they didn‚Äôt ask. You must ask these questions to understand what is expected in each round so you can prepare accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt; &lt;strong&gt;for preparation&lt;/strong&gt; - A lot of my work over the past 2-3 years has focused on refactoring and migrating systems, which has improved my low-level design skills. One way to prepare is by taking on similar work in your current role to naturally enhance your design skills. However, this approach doesn‚Äôt work for DSA and HLD rounds. That‚Äôs why I view the LLD round differently from the DSA/HLD rounds. Generally, people in roles like SE, SSE, or Staff, who are individual contributors, are involved in building or maintaining systems, writing, and deleting a lot of code. Engaging in similar work will automatically improve your low-level design skills as you create and refine system designs. On the other hand, most of us don‚Äôt use the advanced data structures that are tested in interviews, making DSA a topic specifically for interview preparation. Similarly, few engineers get the opportunity to build or modify high-level designs, so they don‚Äôt improve practically in System Design. Working at an early-stage startup in my last role gave me a solid understanding of cloud and system design, which many engineers don‚Äôt get. To succeed in these rounds, I recommend spending a few weeks or months (depending on your current skills and preparation time) to master the basics of these areas:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Resume building&lt;/strong&gt; - &lt;strong&gt;Please please please&lt;/strong&gt; spend time in building and continuously improving your resume. Eliminate all spelling mistakes, punctuation errors, and any other beginner mistakes. For a detailed overview on how I did it, read &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;DSA&lt;/strong&gt; - Leetcode helped me improve my DSA skills, but for my role (Senior/Staff) the questions were mostly easy-medium level. Based on your level and companies you‚Äôre targeting, you might be asked a combination of easy/medium/hard questions, so prepare accordingly.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;LLD&lt;/strong&gt; - I studied from multiple youtube channels and solved some problems in Ruby and Java (available &lt;a href=&quot;https://github.com/gagan93jtg/lld-learning&quot;&gt;here&lt;/a&gt;) so that I can solve them on a decent speed during the interview. I did not spend a single penny on a paid resource for LLD. If you want to know more about different kinds of LLD interviews I gave, I‚Äôve written a &lt;a href=&quot;https://blog.gagan93.me/low-level-design-interviews&quot;&gt;detailed blog&lt;/a&gt; on it already. Feel free to check it out.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;HLD&lt;/strong&gt; - I was skeptical on my HLD skills so I took a paid course but that was badly structured. It was enough to confuse any beginner but having a good idea of those concepts already, I was able to navigate through it and complete about 70% of it before giving interviews. Later, someone told me about Educative.io and it looked much better organised. I‚Äôm not pushing you to use the same resource because of a few reasons. First of all, it‚Äôs a paid course and I do not promote anything paid on my blogs. Secondly, it‚Äôs a text based course while most of the other courses are video based. I‚Äôm fond of reading so I purchased it, you may not like it if you‚Äôre not into reading. And third, their well-known system design course (Grokking) is very long. So I‚Äôd recommend this only if you want to learn the concepts beyond interviews and the course falls within your budget. Although I don‚Äôt endorse it, I can vouch for the quality of content.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Behavioural / Hiring manager&lt;/strong&gt; - Watch some free youtube videos to understand the structure of this round and what people generally ask. Beyond that, just be true to yourself and be good at communicating your thoughts. You might struggle here if you‚Äôre not an efficient communicator.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Where to apply? -&lt;/strong&gt; There are plenty of websites could help you. Again, I didn‚Äôt spend anything for my job search but these are the websites I used - LinkedIn jobs (set relevant job alerts), Tophire (I got Branch‚Äôs offer through them), Bigshyft (I still get calls from them üòÇ), Instahyre (Atlassian reached out through this) and Hirist. I also registered on Indeed and Naukri but never got relevant openings through them. You can find and register on more platforms but at least register yourself on these.&lt;/p&gt;

    &lt;p&gt;I hope this helps for interview preparation. Moving on to the next topic üòé.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-large-teams-work&quot;&gt;How do large teams work?&lt;/h2&gt;

&lt;p&gt;Let me add more context to this question ‚Äî This was asked by someone who was working for a startup for about 4 years, and was wondering how things would unfold if their team scaled 2x-3x in strength. How would the projects be managed and what challenges would exist for them being an old member of the team who is transitioning more towards a managerial role. This is a common question for people working in small teams. They sometimes wonder how large teams operate to make something as large as Youtube, Google Maps, or Amazon S3.&lt;/p&gt;

&lt;p&gt;I‚Äôve been in a habit of reading a lot of content in the past few years from which I shared the following insights:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First of all, no large system is built in a day, or week, or even a month. Smart engineers start building things in the most stupid way, and iterate on them as they find bottlenecks in the system that prevents it from scaling further, so that they can replace those specific parts of the system. I remember my last company‚Äôs co-founder (who was also a Ruby engineer) using a hacky way for partitioning tables in Postgres 9.3. If you‚Äôve used that version of Postgres vs Postgres 12+, you‚Äôd know that the current partitioning features didn‚Äôt even exist in that version. But at that time we didn‚Äôt have enough choices because we were pretty early stage and had limited exposure to good tech. Once it was no longer scalable for us and the cost became very high, the team handling that system redesigned the same into a separate data layer that used a suitable technologies. It‚Äôs very important to start stupid initially and satisfy the business needs so that you can sell whatever you made. For example, it would be hard to assume that YouTube used MySQL to begin with, and they made it work till a &lt;a href=&quot;https://www.reddit.com/r/programming/comments/1d4u12d/how_youtube_was_able_to_support_249_billion_users/&quot;&gt;massive scale&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having large systems doesn‚Äôt mean that you have really large teams that run them in a monolith fashion. For example, Amazon‚Äôs &lt;a href=&quot;https://aws.amazon.com/executive-insights/content/amazon-two-pizza-team/&quot;&gt;two pizza rule&lt;/a&gt; is very popular in the software industry that says ‚Äî &lt;em&gt;No team should be big enough that it would take more than two pizzas to feed them&lt;/em&gt;. &lt;em&gt;Ideally, this is a team of less than 10 people: smaller teams minimize lines of communication and decrease overhead of bureaucracy and decision-making.&lt;/em&gt; Also, because we‚Äôre talking about large teams and about Amazon, &lt;a href=&quot;https://highscalability.com/behind-aws-s3s-massive-scale/&quot;&gt;this article&lt;/a&gt; is a great reference. The most popular blob storage service, Amazon S3 alone is composed of more than 300 micro-services, and you cannot assume all the teams building them to come in one giant standup thrice a week to talk about their work. It‚Äôs obvious that a lot of engineers and managers would be managing these services so that they can focus on specific areas. At the same time, it‚Äôs very easy to talk about good engineering management at that scale, than doing it efficiently. So I always appreciate how these large organisations remain agile and build massive applications for their customers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your company is building really large systems, they also invest in building Internal tools so that developers in different teams follow same standards and do not reinvent the wheel for solving similar problems. In my previous role, I‚Äôve worked in the developer productivity team for more than one year. As our team was scaling in strength and developers were breaking the system into microservices, we were building internal tools for configuration management and deployment so that we could easily deploy the applications to EC2 machines, dockers or kubernetes. We were required to support multiple deployment systems because we had not transitioned fully to kubernetes and different applications (both old and new) were getting deployed to different platforms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not all the processes of large organisations make sense for small organisations, or for those organisations that are scaling to a larger one but I‚Äôd like to emphasize on one very important rule that impacts the success of projects ‚Äî &lt;a href=&quot;https://daily.stoa.com/newsletter/single-threaded-leadership&quot;&gt;Amazon‚Äôs Single threaded leadership principle&lt;/a&gt;. In startups, we generally don‚Äôt hire people as new initiatives begin. As a result, same set of people are juggling (and sometimes struggling) with multiple initiatives. If there are some gaps in the quality of delivered products, it‚Äôs acceptable to the leadership because they know that people are trying their best. With teams scaling to a larger strength, it is important to revisit this culture. If it is not acceptable going forward, it‚Äôs important to improve the team‚Äôs culture in a way where people are not overwhelmed with projects and whatever they deliver is of much better quality. The &lt;strong&gt;Single Threaded Leadership&lt;/strong&gt; &lt;strong&gt;Principle&lt;/strong&gt; might make some sense for the scaling organisation because at a specific point, teams might be catering enterprise clients where quality is very important.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-i-hire-people&quot;&gt;How do I hire people?&lt;/h2&gt;

&lt;p&gt;I‚Äôve been contributing to hiring efforts from my second year as a Software Engineer, where I use to take DSA round. I‚Äôve taken hundreds of interviews since that time, which include the same for Engineers (junior / senior / lead), Managers, QAs and Devops. I personally believe that it‚Äôs very important to understand the candidate and their aspirations, rather than just throwing a problem in front of them and talking about it for an hour. Interviews of a candidate should happen in a way where each interview helps you to paint a clearer picture of their behaviour and skills rather than every round starting with the old ‚Äúplease introduce yourself‚Äù question. To hire anyone in future, I‚Äôd look for these things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical excellence&lt;/strong&gt; - If it‚Äôs a hands-on technical role, it‚Äôs very important to ensure that the candidate understands code and should be fluently coding in one language of their choice. I always focus on the basics rather than evaluating someone on a fancy leetcode problem. As an example ‚Äî while interviewing Devops people, my favorite interview question use to be &lt;em&gt;‚ÄúYou‚Äôre trying to SSH to a machine but the command is unresponsive unless you cancel it. How would you debug this?‚Äù.&lt;/em&gt; I want to see how people respond to such basic questions ‚ÄîWhat clarifications do they take on this small question? Do they talk about network barriers like security groups or VPC route tables? Do they consider the fact that if the authentication key is wrong, then you immediately get an error rather than having a hung connection. I appreciate good debugging skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ability to break a problem&lt;/strong&gt; - You could learn about this while evaluating design rounds, or when they explain some of their projects. IMO, if someone can break problems into parts, they can work on things incrementally rather than doing big-bang releases/refactors. Also, these people estimate projects better than those who do not understand the &lt;a href=&quot;https://blog.gagan93.me/classify-your-codebase&quot;&gt;power of small changes&lt;/a&gt;. This is an under-rated technical skill.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Programming language agnostic&lt;/strong&gt; - I‚Äôve done one wrong hiring in the past where the candidate was too much tied with Spring boot framework (not just Java). They told about the same after joining but I was not managing projects that were Java based. In the end I had to move them in some other team because the other option was to let them go. As a learning, I‚Äôd not expect a person to be &lt;a href=&quot;https://www.techtarget.com/searchsoftwarequality/definition/polyglot-programming&quot;&gt;polyglot&lt;/a&gt; already, but open enough to work in any language.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quality of work -&lt;/strong&gt; When evaluating their solution in any round, check if their solution meets the ask of the problem statement. How well do they handle the edge cases? Do they ask enough clarifications where required (or they just assumed those)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Getting things done -&lt;/strong&gt; While quality of work matters, I‚Äôve seen people getting stuck on small things and not having enough bias for action. Having worked in startups, I think this is something I‚Äôd look for all kinds of roles. If you‚Äôre a good engineer who writes optimised code but do you not push the barriers that come your way, you might not be able to release something real that gets used by the customers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cultural aspects&lt;/strong&gt; - In small organizations, while we may not conduct formal behavioral interviews, all interviewers are vigilant about observing a candidate‚Äôs behavior throughout the interview process. This careful observation is crucial to ensure that we do not end up hiring someone who might not be a good fit for the team. From my experience, I have witnessed the consequences of hiring the wrong person, ranging from fresh graduates to Heads of Engineering (HOEs). Depending on their role and influence within the team, a poor hiring decision can lead to significant negative impacts, even within a short timeframe.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Good basics + great debugging skills.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ability to break problems and some past experience working on quality projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bias for action, humble and eager to learn.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-are-cultural-differences-between-indian-and-non-indian-teams&quot;&gt;What are cultural differences between Indian and non-Indian teams?&lt;/h2&gt;

&lt;p&gt;I think all of you have heard of a few cases in the recent past where employees died at work or committed suicide due to work pressure. It‚Äôs very unfortunate to see the same companies having great working culture outside India and highly toxic culture in India. I wrote about &lt;a href=&quot;https://blog.gagan93.me/blameless-culture&quot;&gt;blameless culture&lt;/a&gt; recently where I shared some examples of how good or bad culture propagates from the top to bottom, or from old employees to new employees. It all boils down to a few people on the top that we call as &lt;strong&gt;the leadership.&lt;/strong&gt; These people define:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Code values and principles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Quality of work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Communication Style.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response to mistakes / failures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And most importantly - Work life balance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For me, the 16-hour workday philosophy is nonsense. If I don‚Äôt have time to think about other things in life, I can‚Äôt grow personally or professionally. I‚Äôve worked with US teams in my first organization, and now I work with both US and Africa teams (in addition to the India team). Fortunately, the overall culture encourages taking leave whenever needed, whether for a personal emergency, rest, or vacation. People in the US don‚Äôt work beyond a certain limit, but that doesn‚Äôt mean they haven‚Äôt created good products or scaled companies.&lt;/p&gt;

&lt;p&gt;In a nutshell,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Do not over-work regularly. Doing the same for a few days should be fine based on the business needs and your physical/mental health.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you or your team overworks everyday, figure out what could be wrong (some ideas &lt;a href=&quot;https://blog.gagan93.me/eight-productive-hours&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://blog.gagan93.me/efficient-fullstack-delivery&quot;&gt;here&lt;/a&gt; for engineering teams).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not value any work or opportunity above your health or family.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fix the company culture if something is wrong. If the leaders do not support you, find a new job.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Take your work seriously. In the 8-9 hrs you put, give your 100%.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-you-handleconvey-delays-across-layers-of-stakeholders&quot;&gt;How do you handle/convey delays across layers of stakeholders?&lt;/h2&gt;

&lt;p&gt;Let‚Äôs consider this hierarchy: developers (including you) ‚Üí project manager ‚Üí business teams ‚Üí customer. Anyone who has successfully launched a product knows that initial estimates are often inaccurate. The accuracy of your estimates depends on many factors, such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How &lt;strong&gt;undefined&lt;/strong&gt; is the problem? - Do we need to check if it‚Äôs feasible? Are there dependencies on other teams?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How much &lt;strong&gt;experience&lt;/strong&gt; does our team have in building something like this? - This includes the experience of senior engineers, product managers, and designers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How well did we &lt;strong&gt;break down the problem&lt;/strong&gt; while estimating? - If you break it down well, you‚Äôll likely complete half of the software design, and your estimates will be closer to accurate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How &lt;strong&gt;new&lt;/strong&gt; is the team? - If there are many new members, there is a possibility of inaccurately estimating their speed in developing production-ready systems.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beyond this, each layer should understand that the previous layers might exceed their estimates, so they should include their own buffers. For example, if developers estimate 6 weeks, managers should say 7-8 weeks, and the business team should assume 8-10 weeks. It‚Äôs okay to &lt;em&gt;under-commit and over-deliver&lt;/em&gt; (but not the reverse).&lt;/p&gt;

&lt;p&gt;If your team can follow this kind of framework, that‚Äôs excellent. It means you won‚Äôt have to struggle as much to convince customers who have been waiting for a feature. A note for managers: your team might sometimes struggle with accurate estimations. However, that doesn‚Äôt mean you should provide your own estimates to the business team. Non-engineers should avoid estimating on behalf of engineers. If you find that the team‚Äôs estimates often miss the mark, take the time to discuss and reflect with them.&lt;/p&gt;

&lt;h2 id=&quot;are-big-tech-engineers-are-superior-to-us&quot;&gt;Are Big Tech engineers are superior to us?&lt;/h2&gt;

&lt;p&gt;I respect great engineers and managers who have built really large systems without which the world would have been very different. At the same time, do not think that they are of a different breed. I think engineers in startups typically work in environments with fewer resources, less structure, and more uncertainty. They wear multiple hats, tackling everything from backend to frontend, cloud and even take product decisions. This exposure forces them to develop a holistic understanding of technology and the business. In contrast, engineers at Big Tech firms may specialize in a narrow domain within a larger system, where their role and responsibilities are more clearly defined. While specialization can lead to deep expertise in specific areas, it may also mean less exposure to the end-to-end development process, product strategy, or direct customer interaction.&lt;/p&gt;

&lt;p&gt;The perception of Big Tech engineers being superior is often tied to the prestige of working at a well-known company and the assumption that these engineers have passed rigorous technical interviews. Another key difference is the sense of ownership and impact. In startups, engineers are closer to the product and customers. The features they build, the bugs they fix, and the architectural decisions they make have a direct influence on the company‚Äôs trajectory. This proximity to the business side creates a different kind of pressure but also provides unique learning opportunities that many Big Tech engineers may not experience. Ultimately, the skills and experiences gained in startups can be just as valuable as those acquired in Big Tech. Both environments have their strengths, and neither is inherently superior to the other. So the engineers in startups shouldn‚Äôt view themselves as ‚Äúinferior‚Äù simply because they don‚Äôt work for a large company.&lt;/p&gt;

&lt;p&gt;On the other hand, big tech companies manage vast products, extensive business operations, and significant overall revenue. In such environments, even small optimizations made by engineers can lead to substantial financial benefits. For instance, a minor improvement in code efficiency or system performance can save millions of dollars due to the scale at which these companies operate. Therefore, it‚Äôs important not to assume that engineers in big tech are performing the same tasks as those working on an app serving only 1,000 users. The scale, complexity, and potential impact of their work are vastly different. Engineers in big tech often deal with challenges related to scalability, security, and global user bases, which require a different set of skills and approaches compared to those needed in smaller-scale applications.&lt;/p&gt;

&lt;h2 id=&quot;how-to-grow-as-an-engineer-not-a-java-engineer-or-ruby-engineer&quot;&gt;&lt;strong&gt;How to grow as an Engineer (not a Java Engineer or Ruby Engineer)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I‚Äôve been fortunate to be mentored by someone who was a polyglot programmer. Although I‚Äôve majorly written only Ruby in production throughout my career, I‚Äôm mentally aligned to think about problems without tying them with language specific constructs. Knowing multiple languages help you to apply good things of one language in another language and build something in a unique way. With this knowledge, you can also plan to build certain parts of a system in a different language that is more optimised for the use case, especially when you get a chance to split them into services.&lt;/p&gt;

&lt;p&gt;In many of these discussions that I had with these engineers, I told them to start thinking of solving problems without talking about the language. Also, whenever given a chance, do not shy away from learning a new programming language. The maturity that comes with this mindset also helps you to write build documentations where you use more generic / industry standard terms rather than using the names of specific libraries that were used to implement the same (eg. calling part of system as &lt;strong&gt;background job processor&lt;/strong&gt; rather than &lt;a href=&quot;https://github.com/celery/celery&quot;&gt;celery&lt;/a&gt;, &lt;a href=&quot;https://www.jobrunr.io/en/&quot;&gt;jobrunnr&lt;/a&gt; or &lt;a href=&quot;https://github.com/sidekiq/sidekiq/&quot;&gt;sidekiq&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;how-to-know-about-scale-without-working-on-scale&quot;&gt;How to know about scale without working on scale?&lt;/h2&gt;

&lt;p&gt;This question came from someone who was asked about database query optimisation in an interview. While they knew about indexes and a few other things that help you optimise queries, they had never done something like this in the past. I think there are two ways to learn about scale:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build something (in a company or as a personal project) that scales to millions of users.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or, see how others did it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By ‚Äúothers,‚Äù I mean learning from the experiences and mistakes of other people. Almost all large tech companies have blogs where they publish case studies, failure stories, and success stories. In addition, there are independent bloggers who write about their experiences in building and debugging large systems. Subscribe to some of these blogs, and you‚Äôll notice a difference in your knowledge in the next three months.&lt;/p&gt;

&lt;p&gt;If you‚Äôre not sure where to start from, I‚Äôll give you some ideas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Think of the big tech companies that your admire (examples - &lt;a href=&quot;https://github.blog/engineering/&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://engineering.atspotify.com/&quot;&gt;Shopify&lt;/a&gt;, &lt;a href=&quot;https://stripe.com/blog/engineering&quot;&gt;Stripe&lt;/a&gt;, &lt;a href=&quot;https://instagram-engineering.com/&quot;&gt;Instagram&lt;/a&gt;, &lt;a href=&quot;https://slack.engineering/&quot;&gt;Slack&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow some good substack newsletters. I really like &lt;a href=&quot;https://www.pragmaticengineer.com/&quot;&gt;Pragmatic engineer‚Äôs&lt;/a&gt; newsletter (although a lot of content is paid).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A lot of people reading this might already be familiar with &lt;a href=&quot;https://www.youtube.com/@AsliEngineering&quot;&gt;Arpit‚Äôs youtube&lt;/a&gt; channel. I really admire the quality of this content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You could consider subscribing to &lt;a href=&quot;https://blog.gagan93.me/newsletter&quot;&gt;my blog&lt;/a&gt; if you find the content good enough ü´£.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-i-generally-approach-learning-anything-new&quot;&gt;&lt;strong&gt;How I generally approach learning anything new?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are generally two kinds of things that anyone is learning:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre learning something to quickly build a prototype where you do not care about quality, use any source to learn. It could be a 10 minute youtube video, or a brief documentation, or ChatGPT prompts, that help you write some code, or understand a few basic concepts about a new technology.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre serious about learning that topic, still follow step 1 so that you build some interest and then &lt;strong&gt;learn from a book&lt;/strong&gt;. I‚Äôm old an school guy here, who would prefer books over videos. I think these days, anyone can put their camera on a tripod stand to record a video after a little bit of research. Here the quality of content might be good, average, or bad. But if you‚Äôre picking a book of a good publisher, the chances of getting a good quality content are much higher. This is my own theory, feel free to disagree üòÇ.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I learnt docker back in 2022 using this method. Earlier I just created a Dockerfile for one microservice that I was building. It wasn‚Äôt optimised at all (I copied it from somewhere). Later I read &lt;a href=&quot;https://www.manning.com/books/learn-docker-in-a-month-of-lunches&quot;&gt;DIAMOL&lt;/a&gt; to get a deeper understanding of Docker, after which I did a lot of optimisations in different Dockerfiles and wrote this &lt;a href=&quot;https://blog.gagan93.me/optimising-docker-builds&quot;&gt;detailed article&lt;/a&gt; to help the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous learning&lt;/strong&gt; - Your work might be very challenging, but it can still limit your learning to certain areas. Make sure to set aside some time regularly (weekly or monthly, if not daily) for learning. I understand that not every day is the same. Some days are more stressful, while others are more relaxed. Create a list of blogs you want to read or videos you want to watch, and learn from them whenever you have some free time.&lt;/p&gt;

&lt;h2 id=&quot;how-often-your-managers-sync-and-how-does-it-impact-your-growth&quot;&gt;How often your managers sync and how does it impact your growth?&lt;/h2&gt;

&lt;p&gt;In my first organization, there was no formal manager hierarchy in my team. We all reported to one of the three founders. Our project was in maintenance mode, so we didn‚Äôt have a senior resource like a Tech Lead assigned, as they were in other teams. I wouldn‚Äôt say my growth was halted because of this, but now that I have managers who sync weekly, I see the benefits of regular manager check-ins. Many people in these calls mentioned their managers don‚Äôt sync with them regularly. Here, &lt;em&gt;regular&lt;/em&gt; doesn‚Äôt mean weekly but rather on a fixed schedule. This depends on factors like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The company culture might not encourage managers to have regular meetings with all their direct reports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your manager might be on a technical role like tech lead and not a ‚Äúmanager-only‚Äù role where they have a tight schedule with their own deliverables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You might be part of a fast-paced team where these meetings aren‚Äôt prioritized because delivering products is the main focus. The team may be learning a lot during this process, but that doesn‚Äôt ensure your goals align with the company‚Äôs goals.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my previous role, I met with my manager once every 2-3 months, and I was managing a team of 7 people myself. Since I hadn‚Äôt experienced regular meetings with my managers before and wondered, ‚ÄúWhat would we even discuss every week?‚Äù I didn‚Äôt schedule regular meetings with my team. Instead, I told them to reach out to me at least once a month if they felt the need. In my current role, all managers meet with their direct reports weekly. They discuss everything from professional to personal topics to help you feel comfortable and aligned for growth. In short, managers should set up regular meetings (weekly, every two weeks, or at most monthly) to ensure that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Their direct reports do not feel disconnected from them, especially in a remote setup. A strong connection is important to ensure that employees are motivated and feel comfortable enough to give feedback for the team‚Äôs overall improvement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If there are performance issues or expectation gaps, they should be addressed early, rather than during the appraisal cycle. This ensures you have enough time to fix those gaps promptly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your career goals are aligned with the company‚Äôs goals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;These meetings can also cover topics beyond work, like how you are planning an extended weekend or how everyone is doing at home. After all, a healthy team is like a family :)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-i-know-about-teams-culture-before-joining&quot;&gt;&lt;strong&gt;How do I know about team‚Äôs culture before joining?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;A strong team culture fosters productivity by creating a supportive environment, while a toxic culture can decrease morale, leading to disengagement, lack of collaboration, and ultimately, low productivity. More than compensation, culture is crucial, yet many people overlook it before joining a company. If you‚Äôve only experienced companies with good culture, you might not recognize bad culture till you get to see it first-hand. It‚Äôs important to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If the team engages in productive meetings or they just setup long meaningless meetings with a lot of folks. Do meetings have agenda and end with either action items or followup meetings?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How is failure handled? Does the team engage in blame game or fixes the root cause and learns from it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do people generally feel about the product they‚Äôre working on? Are they proud of it?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do people encourage sharing feedbacks openly or does everyone think ‚Äúthey‚Äôre right‚Äù?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, you might be thinking ‚Äî how do I know about these things before joining? It‚Äôs not that hard. I‚Äôd do all this to confirm the same:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;During your interviews, pay attention to how organized and punctual the interviewers are. Notice their communication style, how they evaluate your solutions, and the feedback they provide. A big red flag for me in design rounds is when people have fixed solutions in mind and &lt;strong&gt;force&lt;/strong&gt; you to change your design to match theirs. Such people won‚Äôt let you innovate even after you join the team.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check online reviews on some websites to get a sense of the company. Remember, some reviews can be biased, so this should &lt;strong&gt;not be the only thing&lt;/strong&gt; you consider.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talk to current or former employees to see how they feel about their work. Ask specific questions (like those listed above) instead of just asking, ‚ÄúHow do you feel working at &amp;lt;company_name&amp;gt;?‚Äù Make sure you &lt;a href=&quot;https://blog.gagan93.me/asking-good-questions&quot;&gt;ask good questions&lt;/a&gt;. If they‚Äôre unhappy, they likely won‚Äôt want someone else to join and be unhappy too. To get a better idea, talk to at least two people.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In discussions with your recruiter or hiring manager, ask about work-life balance, leadership principles, and other factors that affect productivity. Compare their responses to what employees have shared about their experiences.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-be-good-at-real-world-hld&quot;&gt;&lt;strong&gt;How to be good at real world HLD?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This response slightly overlaps with a &lt;a href=&quot;https://blog.gagan93.me/11-conversations-with-10-software-engineers#heading-how-to-know-about-scale-without-working-on-scale&quot;&gt;previous section&lt;/a&gt;. You don‚Äôt easily get the chance to build something large or join a team scaling their systems. The best thing you can do without much investment is to learn from others‚Äô designs and mistakes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;IIf you work for a company with large systems, talk to the people who built them or have been working on them for a long time. Read documentation to understand design decisions and how they‚Äôve evolved. Look for &lt;a href=&quot;https://github.com/joelparkerhenderson/architecture-decision-record&quot;&gt;ADR&lt;/a&gt; documents in large companies to learn the reasons behind these decisions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre on a small team with scaling products, it‚Äôs a great opportunity to learn how to optimize the system for scaling without overspending. Understand how indexes speed up queries and which types you need. Learn about caching and cache invalidation (the &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;second hardest thing in computer science&lt;/a&gt;). Learn how you can write modular code to make future changes easier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre on a team with unstable products, find out what causes outages and read past outage postmortems. You‚Äôll learn more from outage calls than from regular work. Don‚Äôt miss this learning opportunity (I‚Äôve also shared my insights from &lt;a href=&quot;https://blog.gagan93.me/debugging-production-downtimes&quot;&gt;debugging production outages&lt;/a&gt; here).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If none of these apply to you, learn from others through newsletters, blogs, and videos that explain these concepts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Being good at HLD is not building scalable systems on day 1, but starting with a stupid solution and innovating on the go. And in this process, you should know (or learn) what part of systems can potentially be a bottleneck so that you plan your changes accordingly.&lt;/p&gt;

&lt;h2 id=&quot;im-not-working-on-kubernetes-or-microservices-will-i-be-easily-able-to-switch&quot;&gt;&lt;strong&gt;I‚Äôm not working on Kubernetes or Microservices, will I be easily able to switch?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;No system needs micro-services architecture, an EKS cluster or Kafka to begin with. Even when they acquire real customers, they still might not need these technologies. Mature technical leaders know the challenge of introducing fancy parts in the infrastructure, and they make sure that you do not have them unless you can pay for the operational cost of running and maintaining them. It‚Äôs easy to spin a Redis cluster, an EKS cluster or even an API gateway with a few clicks on your favourite cloud provider. But it‚Äôs not easy to get away with these technologies once you‚Äôre in. For example, an EKS cluster has a starting cost of ~ $70-$80. In a similar cost, you can launch 2 small EC2 machines behind an Application loan balancer along with a small RDS. While EKS solves for your ‚Äúscaling needs‚Äù, you don‚Äôt need to solve them on day 1. I remember my last company was running a single EC2 server that was also running background jobs in a 4 core, 16G machine when I joined in 2018. It worked pretty well for them at that time and we didn‚Äôt introduce an ALB till late 2018 because that has a fixed monthly cost + data transfer cost that no one wants to pay from the first day.&lt;/p&gt;

&lt;p&gt;This question came from someone who had 5+ YOE experience but no experience working on microservices. My suggestion here is that you should read about microservices and when it‚Äôs good to have them in your system. I‚Äôve worked on transitioning monolith to microservices after reading &lt;a href=&quot;https://www.amazon.in/Monolith-Microservices-Sam-Newman/dp/1492047848&quot;&gt;this book&lt;/a&gt;, and trust me that it‚Äôs not everyone‚Äôs cup of tea. You need a dedicated team to work on it rather than a few engineers working on it part-time. Even then, there are high chances that you end up building a more convoluted architecture (some thoughts shared &lt;a href=&quot;https://blog.gagan93.me/monolith-microservices&quot;&gt;here&lt;/a&gt;). For you as an engineer, it‚Äôs important to know all the challenges so that whenever you get a chance to do such a migration, your chances of being successful are high.&lt;/p&gt;

&lt;p&gt;Working on distributed systems isn‚Äôt something everyone gets to do, but it‚Äôs important to understand their pros and cons. This way, future interviewers can assess your knowledge, and you won‚Äôt appear uninformed about these systems. So be it microservices, kubernetes or containers ‚Äî know little bit about everything even when you don‚Äôt get to work on them in production.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thank you for taking the time to read through this post. I hope the insights were worth the time you spent. Hearing firsthand about the diverse challenges, growth experiences, and problem-solving approaches was a reminder of how valuable open dialogue is for learning and professional development. Whether you‚Äôre navigating similar paths or different ones, I hope these reflections offer useful perspectives. Do share this with your friends who are looking for similar advice. Let me know your thoughts in the comments. See you in the next blog post üöÄ.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Oct 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/10/15/1-on-1-with-10-software-enginers.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/10/15/1-on-1-with-10-software-enginers.html</guid>
      </item>
    
      <item>
        <title>Problems with generic code</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-kier-in-sight-archives-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kierinsightarchives?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Kier in Sight Archives&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/black-and-white-heart-sketch-4bhhwmsYl-c?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I‚Äôm a Senior Engineer with nearly 9 years of experience in the software industry. In one of my previous projects, I had to migrate the background job processing engine of a Ruby-based application from &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot;&gt;delayed-job&lt;/a&gt; to &lt;a href=&quot;https://github.com/sidekiq/sidekiq/&quot;&gt;sidekiq&lt;/a&gt;. For those not familiar with Ruby, think of these as two libraries that help you run async jobs in a distributed system, similar to &lt;a href=&quot;https://www.jobrunr.io/en/&quot;&gt;JobRunr&lt;/a&gt; in Java projects or &lt;a href=&quot;https://docs.celeryq.dev/en/stable/&quot;&gt;Celery&lt;/a&gt; in Python projects. We encountered several issues with the old library and realized that Sidekiq would be a much better option as we scaled. To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sidekiq runs multiple threads per process to execute jobs, while Delayed Job runs one thread per process. This means Delayed Job uses more memory for executing the same set of jobs per unit time, especially if your workloads are IO-bound.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delayed Job uses SQL table to store jobs, whereas Sidekiq uses Redis. Redis, being an in-memory database, is much faster than traditional disk-based SQL databases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sidekiq is a very popular Ruby library, so there are many extensions available for performing other common tasks. These include &lt;a href=&quot;https://github.com/sidekiq-cron/sidekiq-cron&quot;&gt;running crons&lt;/a&gt; and ensuring &lt;a href=&quot;https://github.com/mhenrixon/sidekiq-unique-jobs&quot;&gt;unique jobs&lt;/a&gt;. Additionally, Sidekiq‚Äôs author has &lt;a href=&quot;https://github.com/sidekiq/sidekiq/wiki/Using-Dragonfly&quot;&gt;started supporting&lt;/a&gt; a drop-in &lt;a href=&quot;https://www.mikeperham.com/2024/02/01/supporting-dragonfly/&quot;&gt;replacement for Redis&lt;/a&gt; for storing jobs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While many open-source extensions exist for Sidekiq, companies can get more features and premium support with &lt;a href=&quot;https://sidekiq.org/products/pro.html&quot;&gt;Sidekiq Pro&lt;/a&gt;.Migration phase&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We added both libraries together for a few months and gradually migrated from DJ to Sidekiq. The two most common uses of background jobs were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Calling an instance method asynchronously, like loading a model entry from the database and calling a method on it asynchronously (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.find(some_id).process_it_async&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Calling a class method asynchronously, which might initialize more classes or call methods as needed (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeClass.process_class_method_async(some_data&lt;/code&gt;).)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At that time, I was a typical &lt;strong&gt;startup engineer&lt;/strong&gt; with limited knowledge of code quality, focused primarily on &lt;strong&gt;getting things done.&lt;/strong&gt; Consequently, I wrote a small class that facilitated the migration of many usages to Sidekiq:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericAsyncWorker&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not the exact code but gives an idea of what I wrote. In short:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt; had an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, I loaded the model object and called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If not, I called the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class method&lt;/code&gt; with the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For non-Ruby developers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include Sidekiq::Worker&lt;/code&gt; makes this class a background job processor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; loads a table row from the database based on ID. It‚Äôs part of Rails‚Äô ORM.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; dynamically calls methods of a class.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was a very kind Senior Engineer who reviewed my code later and said, ‚Äú&lt;em&gt;this is not good, this is too generic&lt;/em&gt;.‚Äù I didn‚Äôt understand what they meant at the time. My thought process was ‚Äî &lt;em&gt;it‚Äôs working and it helped complete the migration faster, so what‚Äôs the problem?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before you read on, take a moment to think about whether this is good or bad.&lt;/p&gt;

&lt;h2 id=&quot;the-problems&quot;&gt;The Problems&lt;/h2&gt;

&lt;p&gt;Even though the code above works, it breaks key principles of good, maintainable code:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;According to the &lt;strong&gt;S&lt;/strong&gt; in &lt;strong&gt;SOLID&lt;/strong&gt; principles, a class should have one reason to change. I also apply this to methods ‚Äî a method should do one thing really well. This method is trying to do two things. You might think the method is small and only doing two things, so what‚Äôs the issue? Read on to understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The code inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement expects to load the model object and then call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; on it. What if someone wants to pass arguments to that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; also? Would we add another argument or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement to handle that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What if this class is a plain Ruby class (not a Rails model) that needs to initialize the constructor and then call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;? Another flag to handle that?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you might know, we assign &lt;strong&gt;queues&lt;/strong&gt; to process &lt;strong&gt;specific jobs&lt;/strong&gt;. Queues are chosen based on the urgency of the task. If many tasks start running with this generic code, how do we determine the urgency of this job class?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By just looking at the code for a minute, I quickly spotted these problems. I laugh now, thinking I wrote this back in 2019. But that‚Äôs a good sign because if you don‚Äôt like your old code, it means your design skills are matured üòá.&lt;/p&gt;

&lt;p&gt;The above is an example of &lt;strong&gt;Generic Code.&lt;/strong&gt; Such classes evolve into &lt;a href=&quot;https://refactoring.guru/smells/long-method&quot;&gt;long methods&lt;/a&gt; with a &lt;a href=&quot;https://refactoring.guru/smells/long-parameter-list&quot;&gt;lot of arguments&lt;/a&gt;, creating a mess. Over time, multiple developers change the code in these classes to fit new use-cases, often breaking existing ones. There are only two ways to solve such problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Don‚Äôt create such classes in the first place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you created them somehow, gradually move to specific classes and delete the old one later.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don‚Äôt suggest spending time untangling the mess built up over the years by different developers unless you have test cases and very strong reasons to do so. It‚Äôs better to create specific classes for each use case and migrate to them slowly.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about-testing&quot;&gt;Let‚Äôs talk about testing&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Many developers and teams don‚Äôt write unit tests. If you‚Äôre one of them, I strongly recommend you start. They make future maintenance easier and provide feedback on your design.&lt;/p&gt;

&lt;p&gt;If you write tests regularly, you‚Äôll see that this class is hard to test. The reason is simple - it has a lot of generic behavior, making it difficult to identify all the combinations you need to test. From my past experience, &lt;strong&gt;if a class is hard to test, it likely needs refactoring&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I still see developers writing generic code for production projects. This isn‚Äôt necessarily a problem, as they are on the same learning journey I once experienced. When I encounter this, I take the time to discuss it with them. I emphasize the importance of writing specific, maintainable code. I share my experiences and lessons learned over the years.&lt;/p&gt;

&lt;h3 id=&quot;extending-the-same-thought-process-to-tables&quot;&gt;Extending the same thought process to ‚Äútables‚Äù&lt;/h3&gt;

&lt;p&gt;Developers love writing code that goes beyond their current needs. As we saw earlier, they often create solutions that are more complex than necessary. But this issue isn‚Äôt just limited to classes ‚Äî we also tend to generalize tables and columns to handle more problems than they were meant to solve.&lt;/p&gt;

&lt;p&gt;Let‚Äôs imagine a developer named ‚ÄúJohn‚Äù created a table called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; to handle authentication for their app. At first, this table had only six columns:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                 Table &quot;public.users&quot;

Column         |            Type             | Nullable  |         Default
---------------+-----------------------------+-----------+----------+-----------------------
 id            | integer                     | not null  | nextval(&apos;users_id_seq&apos;::regclass)
 first_name    | character varying           |           |
 last_name     | character varying           |           |
 email         | character varying           | not null  |
 created_at    | timestamp without time zone | not null  |
 updated_at    | timestamp without time zone | not null  |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As time went by, they realized they needed more columns like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;middle_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country_code&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone&lt;/code&gt;. So, they added those columns as needed (sounds good, right?). As their product expanded to multiple countries, they needed to track specific attributes for each country. They decided to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonb&lt;/code&gt; column to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; table to handle these ‚Äúcountry-specific‚Äù attributes because some keys were valid in one country but not in another. Adding separate columns for each attribute seemed like overkill. Thinking ahead, they named this field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_attributes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A month later, another developer, Lee, decided to add their data to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_attributes&lt;/code&gt; column since it was a similar use case (but not dependent on country). Within a year, this column had different values for different users, and no one knew all the use cases for this column. This is why I sometimes don‚Äôt like NoSQL schemas ‚Äî they are too flexible unless you have proper safeguards. To avoid this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;John could have named this column something other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_attributes&lt;/code&gt; to indicate it was for storing country-specific attributes only (better naming).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;John could have created different tables with a 1:1 relation to users for such use cases. Anyone could check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country_code&lt;/code&gt; column and figure out which table(s) are relevant for a specific country‚Äôs user (better design).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whenever we introduce a bit of &lt;strong&gt;generic behavior&lt;/strong&gt; in our code or database design, it is likely to be misused later. This happens because everyone thinks differently and wants to deliver quickly üöÄ.&lt;/p&gt;

&lt;p&gt;This is just the first level of misuse. Another common &lt;strong&gt;generic mistake&lt;/strong&gt; is creating tables like &lt;strong&gt;tags&lt;/strong&gt; or &lt;strong&gt;attachments&lt;/strong&gt;. Once these tables exist, everyone adds their own use cases, making them very large. I‚Äôve seen cases where more than 50% of data is in a generic table, just to avoid adding a column to the primary table. While querying the primary table is easy, querying this table requires a large index, which can be even bigger than the table itself. The problems with large generic table are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You can‚Äôt archive old data even if the index and table size keep growing. So you end up paying the cost of keeping all this data in hot storage (eg. SSDs).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can‚Äôt partition the table easily.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Queries become slower over time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Internal tasks like &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-vacuum.html&quot;&gt;Vacuuming&lt;/a&gt; take longer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you upgrade your database, these tables take more time to analyze and start serving data.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And all these problems exist because there are too many use cases being served, and you have no idea how your solution could affect the users. Just like with generic classes, the solution is to eliminate this table and gradually migrate the data to specific columns (or perhaps specific tables).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While generic code and database design can offer flexibility and quick solutions in the short term, they often lead to significant long-term challenges. Over-reliance on generic patterns makes testing difficult, as it‚Äôs hard to test all the supported cases. Similarly, abusing generic database structures can result in performance bottlenecks, scalability issues, and maintainability problems. The key takeaway is to strike a balance between flexibility and specificity. While some level of generalization is beneficial for code reuse and rapid development, it is essential to maintain a clear structure, define boundaries, and optimize for performance and future growth to avoid technical debt.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Have a good day.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, please read these too:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.gagan93.me/multi-tasking-is-not-so-cool&quot;&gt;Multitasking is not that cool&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are you planning to transition from monolith to microservices? Read &lt;a href=&quot;https://blog.gagan93.me/monolith-microservices&quot;&gt;this&lt;/a&gt; once.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you‚Äôre planning data migration from one system to another, read &lt;a href=&quot;https://blog.gagan93.me/migrating-data-across-services&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 22 Sep 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/09/22/problems-with-generic-code.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/09/22/problems-with-generic-code.html</guid>
      </item>
    
      <item>
        <title>Blameless culture</title>
        <description>&lt;h2 style=&quot;text-align: center;font-size: 0.8em&quot; id=&quot;photo-by-krakenimages-on-unsplash&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@krakenimages?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;krakenimages&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/man-in-white-dress-shirt-sitting-beside-woman-in-black-long-sleeve-shirt-376KN_ISplE?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Mistakes are inevitable in any project, especially when it comes to complex software projects. However, the way we respond to those mistakes can make or break the motivation and productivity of our teams. This post discusses how fostering a blameless culture can enhance team productivity.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-blameless-culture&quot;&gt;What is a Blameless Culture?&lt;/h2&gt;

&lt;p&gt;Have you ever heard of teams where individuals blame each other when a product release is delayed? Or perhaps, unfortunately, worked with such teams? It is quite disheartening to be part of a team where such inefficiencies outweigh productive work. A few reasons why this happens are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If managers do not invest sufficient time in designing a system that promotes transparency,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or when most of the team members encourage the blame-game, and no one steps up to highlight that this approach harms team motivation,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Or where it is normal to delay releases or shift responsibilities, rather than maintaining clarity.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is exactly opposite of how &lt;strong&gt;Blameless culture&lt;/strong&gt; looks like. In a Blameless culture, we emphasize on &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;improving&lt;/strong&gt; but &lt;strong&gt;without pointing fingers&lt;/strong&gt;. So when a mistake happens, the focus is on analysing the &lt;strong&gt;root cause&lt;/strong&gt; and &lt;strong&gt;fixing it&lt;/strong&gt;. In such a culture, people are open to communicate and accept their mistakes rather than hiding them or shifting blames.&lt;/p&gt;

&lt;h2 id=&quot;role-of-processes&quot;&gt;Role of processes&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say you work in a startup with less than 10 people. There are high chances that you won‚Äôt have a process defined for anything. So if you are working in the leadership team and someone comes and asks for a leave, or wants to get their laptop repaired, or needs a comfortable chair ‚Äî you will need to define a process for them. On the contrary, in a large organisation you will see a process and budget defined for almost everything. While processes are important for any organisation, startups can‚Äôt prioritise defining these processes, as their goal is to get the first few paying customers for their product(s). At the same time, they can‚Äôt even inherit the processes from a large company because a lot of those will not make sense for a startup.&lt;/p&gt;

&lt;p&gt;As of now, I have over 9 years of industry experience, all in startups (including one at a &lt;strong&gt;very early stage&lt;/strong&gt;). I believe that team members should be open to learning new processes to tackle new challenges. They shouldn‚Äôt have a fixed mindset that makes them think in just one way. What worked at your previous company might not work at the next one. So, having an open mindset helps you adapt to the environment and come up with new, specific, and innovative solutions.&lt;/p&gt;

&lt;p&gt;Processes in startups evolve as the company grows. For instance, they determine which leave plan is effective and what kind of release schedule works best for their software. The evolution of these processes also addresses many cultural issues. I recall in my previous role, we began to develop a culture of shifting blame to individuals and teams when our product manager inquired ‚Äú&lt;strong&gt;Why is the Android release delayed?‚Äù&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the frontend team, it was the QA team that approved the API too late.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the QA team, it was the backend team whose estimates were off by days or weeks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the backend team, it was the product team that didn‚Äôt consider all scenarios, leading to changes in the code design after they started building the backend..&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We saw this as a chance to improve our processes. It took us 3-4 retrospective meetings to identify what needed improvement. Our &lt;strong&gt;open mindset&lt;/strong&gt; helped us eliminate the &lt;strong&gt;wrong culture&lt;/strong&gt; and address the &lt;strong&gt;root cause&lt;/strong&gt; of our problem. I also wrote a detailed &lt;a href=&quot;https://blog.gagan93.me/efficient-fullstack-delivery&quot;&gt;blog post&lt;/a&gt; about it many years later.&lt;/p&gt;

&lt;h2 id=&quot;culture--accountability&quot;&gt;Culture &amp;lt;&amp;gt; Accountability&lt;/h2&gt;

&lt;p&gt;Blameless culture doesn‚Äôt mean avoiding accountability; it means redefining it. Accountability is about ownership of tasks and outcomes. When an issue arises, the goal is to improve the process and systems that allowed the problem to occur, rather than penalizing the individual (or team) involved. This empowers team members to take responsibility without fear.&lt;/p&gt;

&lt;p&gt;Another story I remember is from a recent interaction with a junior colleague in my last role. Both of us were in our notice period at that time. I met them face to face for the first time on their last working day üòÖ. They were moving to a large investment bank as a Software Engineer. Moving from a startup to a big company that deals with money, they were worried about what would happen if their code caused a loss of real money in production. My shortest answer to them was ‚Äî&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;If it‚Äôs easy to cause loss of money in their systems, it‚Äôs a process problem and not an engineer‚Äôs fault. There should be sufficient processes and checks in place to make sure this doesn‚Äôt happen very easily&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, every now and then, I see a meme where an intern claims to accidentally destroy the production database. The problem is not the intern, but the policies that gave them write access to production database üòÑ.&lt;/p&gt;

&lt;h2 id=&quot;founding-teams-impact&quot;&gt;Founding Team‚Äôs Impact&lt;/h2&gt;

&lt;p&gt;The founding team has a profound impact on a company‚Äôs culture and processes, Founders establish the core values that reflect their work ethic and vision, setting the tone for how employees interact, make decisions, and solve problems. Whether intentional or not, the founding team‚Äôs leadership style influences the company‚Äôs norms ‚Äî whether it encourages open communication, innovation, or strict hierarchy. I recently interacted with an old friend who works as a Senior Business analyst. They recently changed their job and told that the culture is very poor. In their words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our managers do not treat their reportees well. If you don‚Äôt answer their Slack messages quickly, they‚Äôll ping others in the team asking, ‚ÄúWhere is XYZ person and why aren‚Äôt they responding?‚Äù It doesn‚Äôt matter if the person went to the washroom for five minutes. They expect immediate responses to everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I asked about their skip manager‚Äôs behavior, they said, &lt;em&gt;‚ÄúEveryone is the same here. Skip managers shout at managers, and managers shout at us.‚Äù&lt;/em&gt; üòø This shows how a bad culture spreads from top to bottom. Another example is a story shared by &lt;em&gt;The Pragmatic Engineer&lt;/em&gt; in &lt;a href=&quot;https://newsletter.pragmaticengineer.com/p/stripe-part-2&quot;&gt;their blog&lt;/a&gt;. It‚Äôs about Stripe‚Äôs &lt;strong&gt;strong writing culture&lt;/strong&gt;. Because their CEO and CTO write a lot, it encourages everyone to do the same. As a result, all engineers and managers write long internal documents. I wrote about the impact of the founding team on the rest of the team on &lt;a href=&quot;https://www.linkedin.com/posts/gagan93_culture-writing-team-activity-7170322475212374016-UjEc/&quot;&gt;my LinkedIn&lt;/a&gt; a few months ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you‚Äôre an old member of a team, your work is beyond your work profile. One major role is to ensure a positive team culture. Culture propagates in two ways:&lt;/p&gt;

  &lt;p&gt;1. Vertically (CEO -&amp;gt; Dept leads -&amp;gt; managers -&amp;gt; seniors -&amp;gt; freshers).
2. Horizontally (Among peers / among old and new people).&lt;/p&gt;

  &lt;p&gt;If there is a blame-game culture in a team of 10 members, then chances are that 11th member will also start doing that, or will leave. On the positive side, if there‚Äôs a bar of ‚Äúhigh quality‚Äù code or processes in a team, then the new member will have to match that in order to survive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you work in a team with cultural issues, collaborate with your peers and manager to improve it. If you‚Äôre in a startup or a growing team, make sure the culture develops positively. Small habits have a big impact when others follow them, whether good or bad.&lt;/p&gt;

&lt;p&gt;Thank you for reading! Have a good day.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 22 Sep 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/09/22/blameless-culture.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/09/22/blameless-culture.html</guid>
      </item>
    
      <item>
        <title>Unseen risks of Inheritance</title>
        <description>&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@flyd2069?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;FlyD&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/text-5lU_WmKVus4?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I started learning Object-Oriented Programming (OOP) with C++ during my college days, and &lt;strong&gt;Inheritance&lt;/strong&gt; is one of the key concepts you can‚Äôt miss when learning OOP. In fact, inheritance is one of the four core principles of OOP, along with &lt;strong&gt;Encapsulation&lt;/strong&gt;, &lt;strong&gt;Abstraction&lt;/strong&gt;, and &lt;strong&gt;Polymorphism&lt;/strong&gt;. In our textbooks, the examples of inheritance were quite simple. The one I remember involved a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, where classes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Square&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; inherited from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape&lt;/code&gt; and override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;area&lt;/code&gt; method. Unfortunately, real-life classes are never that simple üòÑ.&lt;/p&gt;

&lt;h2 id=&quot;problems-with-inheritance&quot;&gt;Problems with Inheritance&lt;/h2&gt;

&lt;p&gt;I have written a significant amount of code using the Inheritance pattern, which complicated the overall design of my system over time. A common issue was that many classes in the hierarchy contained methods that were not useful to them. These methods were inherited from somewhere in the inheritance chain. This problem often arises when you use this pattern early in the design and fail to refactor the design when things become more complicated. So basically, if you stick with the design and keep adding more behavior to the classes without rethinking the design for new requirements, you‚Äôll end up with the same problem. As a result, your classes might have methods that don‚Äôt make much sense for them. A few other problems that come with Inheritance are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tight coupling&lt;/strong&gt; - Inheriting classes from each other inevitably increases coupling. While changes in a subclass do not affect the parent class, the reverse is not true. In a lengthy inheritance chain, any modifications to the base class design can impact all subclasses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Long chain -&lt;/strong&gt; Inheritance is beneficial only when the chain is kept short. In a long chain of classes, it becomes challenging to trace the origin of method definitions and understand where they are overridden. Such a design complicates debugging and maintenance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rigid design&lt;/strong&gt; - Because of the coupling introduced by inheritance, the design becomes less flexible and more rigid. When you make modifications to the base class, these changes can unintentionally affect all derived classes. This can lead to unexpected bugs or require changes in multiple places throughout the codebase.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-people-still-use-it&quot;&gt;Why people still use it?&lt;/h2&gt;

&lt;p&gt;We all know that &lt;strong&gt;low coupling&lt;/strong&gt;, &lt;strong&gt;ease of debugging&lt;/strong&gt; and &lt;strong&gt;flexibility&lt;/strong&gt; are the traits of a good design. So why should we use Inheritance if we do not get all of this? The answer to this is &lt;strong&gt;‚Äî&lt;/strong&gt; Inheritance is beautiful, only if you know how to do it nicely. For example, the Java‚Äôs collection framework hierarchy neatly implements inheritance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-08-25-unseen-risks-inheritance-java-collections.jpg&quot; alt=&quot;Java collections framework - Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above design is better because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Clean Abstraction&lt;/strong&gt; - It uses abstract classes and interfaces. Your language might not provide the same functionality (e.g., &lt;strong&gt;Ruby&lt;/strong&gt; doesn‚Äôt have &lt;strong&gt;interfaces&lt;/strong&gt;), but the general idea of breaking down the functionality should help.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; - They clearly define the role of each level, and they have been heavily refactoring the hierarchy since the collections framework was released in 1998.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design Patterns&lt;/strong&gt; - Beyond just inheritance, the framework also uses some design patterns internally to simplify the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inheritance Chain&lt;/strong&gt; - Although there is no strict rule on how long or wide your inheritance hierarchy should be, it‚Äôs good to keep an eye on it so you don‚Äôt end up with 10-20 levels of inheritance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beyond these points, the classes in the Java collection framework adhere to the SOLID principles, which are crucial for maintaining a robust and flexible design.&lt;/p&gt;

&lt;h2 id=&quot;clean-inheritance&quot;&gt;Clean Inheritance&lt;/h2&gt;

&lt;p&gt;There‚Äôs an excellent talk by &lt;a href=&quot;https://sandimetz.com/&quot;&gt;Sandi Metz&lt;/a&gt; from RailsConf 2014 (&lt;a href=&quot;https://www.youtube.com/watch?app=desktop&amp;amp;v=8bZh5LMaSmEhttps://www.youtube.com/watch?app=desktop&amp;amp;v=8bZh5LMaSmE&quot;&gt;link&lt;/a&gt;) where they explain how they refactored a code with high cyclomatic complexity to a much simpler design using Inheritance. While they are on it, they also explain when inheritance is good. Quoting from the same talk:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Despite of what you have have heard, Inheritance is not evil, and I can tell you exactly when it‚Äôs safe to use it. Here‚Äôs what you want - You want a shallow, narrow hierarchy. You don‚Äôt want it to be deep, and you don‚Äôt want it to be wide, alright? If that‚Äôs the problem you have, there‚Äôs no better solution that inheritance and you‚Äôre free to use it. Inheritance is not, evil but sometimes we are.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although I‚Äôve provided the gist of the talk in context of inheritance, there are a lot of other good things that you can learn from the talk, so you must watch it.&lt;/p&gt;

&lt;h2 id=&quot;other-patterns&quot;&gt;Other patterns&lt;/h2&gt;

&lt;p&gt;I also wrote a bit about the use of design patterns in the Java collections framework. That‚Äôs something I‚Äôd like to explain further. As a developer, you should always look for better ways to write cleaner, simpler code. So beyond inheritance, try these things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Small classes&lt;/strong&gt; - The entire idea of maintainable software comes from writing small, extensible classes that can work together to complete a task. Make sure that your classes do a single task nicely. If you feel that the new requirements are leading to some bloat in the existing class, plan to refactor it rather than adding behaviour that doesn‚Äôt belong to it. I‚Äôll touch on &lt;em&gt;refactoring safely&lt;/em&gt; in my next blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Design patterns&lt;/strong&gt; - There‚Äôs nothing new that I‚Äôm suggesting here. It‚Äôs important for all engineers to read about design patterns at least once so that you do not make the same mistakes that these patterns solve. I‚Äôve personally found &lt;a href=&quot;https://refactoring.guru/design-patterns&quot;&gt;this website&lt;/a&gt; excellent for design patterns (and &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;code smells&lt;/a&gt;) but it‚Äôs ok if you‚Äôve read &lt;a href=&quot;https://www.amazon.in/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8&quot;&gt;GOF&lt;/a&gt; or some other book. I‚Äôve personally used Facade, Adapter, Decorator, Proxy, Strategy and a few more design patterns in my projects to simplify the design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Composition over Inheritance&lt;/strong&gt; (&lt;a href=&quot;https://www.geeksforgeeks.org/favoring-composition-over-inheritance-in-java-with-examples/&quot;&gt;more here&lt;/a&gt;) - A lot of code that we write using Inheritance can be simplified using Composition pattern. By composing objects from simpler, reusable components, you create more flexible and maintainable code. Composition allows you to change or extend behaviours dynamically without altering existing code, unlike inheritance that leads to rigid hierarchies and tight coupling.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While inheritance has been a cornerstone of Object-Oriented Design, it‚Äôs important to recognise its limitations and explore alternatives that offer more flexibility and maintainability. As your software evolves, adopting these approaches can lead to more maintainable code.&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Aug 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/08/25/unseen-risks-of-inheritance.html</guid>
      </item>
    
      <item>
        <title>Branch International Interview Experience</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;After giving a lot of interviews in small and large companies, I‚Äôve &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7203321685398212609/&quot;&gt;joined Branch International&lt;/a&gt; this month. As I‚Äôve shared my past interview experiences &lt;a href=&quot;https://blog.gagan93.me/tag/interview&quot;&gt;here&lt;/a&gt;, I‚Äôm sharing this one too. My profile was shortlisted for the position of &lt;strong&gt;Senior Software Engineer&lt;/strong&gt; through the &lt;a href=&quot;https://tophire.co/&quot;&gt;Tophire&lt;/a&gt; platform. After that, their account executive contacted me. Once they finished, I was connected to a recruiter from Branch, who explained the company and the role to me. Those who do not know much about the company:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Branch is a &lt;strong&gt;registered non-banking financial company&lt;/strong&gt; (NBFC) regulated by the RBI, offering services in India and select international markets&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Branch‚Äôs &lt;strong&gt;fully-remote team&lt;/strong&gt; is spread across India, the US, and Africa, bringing together diverse expertise.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We offer a range of financial solutions, including &lt;strong&gt;micro-loans&lt;/strong&gt; and &lt;strong&gt;investment products&lt;/strong&gt;, to help you achieve your financial goals&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interview-process&quot;&gt;Interview Process&lt;/h2&gt;

&lt;p&gt;After speaking with the Tophire account manager and the company‚Äôs recruiter, these were the interview rounds:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hiring Manager Conversation&lt;/strong&gt; - This round was scheduled with the Chief Technology Officer. The aim of this round was to understand my current role, aspirations and what I am looking for in the next role. We discussed about my projects and about a few more technical things briefly. I took this as a chance to learn more about the company and their tech stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical Screening Round&lt;/strong&gt; - This round was scheduled with a Senior Engineer from the India team. It consisted of two parts - a data structures problem (easy) and rapid questions and answers based on web. I solved the data structures problem on &lt;a href=&quot;https://coderpad.io/&quot;&gt;Coderpad platform&lt;/a&gt; where I could choose any language to implement the solution. I was able to wind up with a working solution in 18-20 mins. There were no modifications done in the problem statement to make it harder so we moved to the next part. The rapid fire QnA part was quite unique. The questions were related to databases, security, scalability, low-level design, authentication mechanisms, etc. No coding was required to answer these questions, but they were great for assessing someone‚Äôs experience in backend development.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Low Level Design Round&lt;/strong&gt; - This round was scheduled with a Senior Engineer from the US team. The problem statement was designed in a way to see how would someone design APIs. I did not write any code in this round. We picked one problem and discussed how the APIs would look for that problem. Apart from a few APIs, rest of them were quite simple. In these (slightly complex) APIs, there were multiple ways to implement but I chose the RESTful method and explained the reasoning behind my decision. For a very specific requirement, I was also asked to write a SQL query.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;High Level Design Round&lt;/strong&gt; - This round was scheduled with an Engineering Manager from the India team. The problem statement was around one of their products. I started sketching the system after understanding the initial requirements. They asked about the role of each box (the service) in my design, the choice of database, protocols etc. After discussing each design decision in detail, we also discussed how I would test, deploy and monitor this system. We winded up the discussion in an hour.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Presentation Round&lt;/strong&gt; - This round was very unique where I was asked to prepare a presentation on my past projects and present that in front of a panel. The panel included all the previous round interviewers, and a few more people. I had submitted the presentation to company recruiter few days before the round. I presented 3-4 major projects and the panel cross questioned me wherever they needed more details. According to their job description, this round was to better understand:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Verbal and written communication skills, and ability to handle questions,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Complexity and scale of work,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ability to execute on a project, in particular around evaluating tradeoffs and making decisions&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Final Discussion Round&lt;/strong&gt; - After clearing all the rounds, the company recruiter informed me that they want to extend an offer and scheduled a call with the hiring manager again. During this call, the hiring manager asked for any feedback I had about the overall process. They explained the compensation structure, and I asked a few questions that I had noted down. They gave me time to think before accepting the offer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After careful consideration, I accepted the offer and resigned from my position at LocoNav where I had worked for over six years. It was a tough decision to leave after spending such a long time. I joined Branch on June 3, 2024, and it has been great since then.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jun 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/06/27/branch-interview-experience.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/06/27/branch-interview-experience.html</guid>
      </item>
    
      <item>
        <title>Tech Interview Mistakes</title>
        <description>&lt;p style=&quot;text-align: center;font-size: 0.8em&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/@francisco_legarreta?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Francisco De Legarreta C.&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/a-man-with-glasses-is-looking-at-a-laptop-hHg9MC-G8_Y?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;There are a lot of mistakes people make while preparing for and giving technical interviews. Like everyone else, I also made a lot of mistakes during my interview journey and learned the hard way (by getting rejected). Generally speaking, rejections shouldn‚Äôt hurt you because they teach you a lot. But in tech interviews, there are scenarios when things are outside your control, despite the best preparation. We‚Äôll discuss about such scenarios in the end of this post.&lt;/p&gt;

&lt;p&gt;To start with, I‚Äôll divide this post into two parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Preparation mistakes (during preparation).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Execution mistakes (during interview).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;during-preparation&quot;&gt;During Preparation&lt;/h3&gt;

&lt;p&gt;When I started looking out, I was completely unaware of industry expectations. I got in touch with a few people who had switched roles in last few years to understand the same. Apart from industry expectations, there were many other things that I had to know, like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How titles work in different companies?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to prepare for the specific rounds? What sources are good (free / paid)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How interviews are different from real work?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Will the companies hire me if my tech stack doesn‚Äôt overlap much with theirs?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The more you know about all these things, the better you can prepare and manage your expectations. Let‚Äôs talk about all these things one by one:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not understanding industry expectations&lt;/strong&gt; - There are two types of companies (or roles that are open). Some roles explicitly mention that you need to be an expert in a specific technology stack to even get shortlisted. The other category is of roles that require you to be a good problem solver who can learn the tech stack and get things done. Both the roles have their own significance and we cannot blame the hiring team for being stringent in the first case. If the product is in early stage, the company would prefer to hire someone who is familiar with the stack so that they can contribute fast without the need of ramping up. If the product is in later stage, it‚Äôs upto the choice of hiring team - they could hire people from a different technology stack, or they may still prefer to hire people with the same stack only. It depends on the stack also - incase they‚Äôre using something very niche (for which developers are not available easily), the hiring team relaxes the tech stack expectations. But incase hiring for that tech stack is easy, they‚Äôd prefer someone who knows the stack. In my experience, it‚Äôs easier for companies to find Java developers so rather than hiring for &lt;em&gt;Senior Software Engineer&lt;/em&gt;, they put the job title as &lt;em&gt;Senior Java Engineer&lt;/em&gt;. For medium-large organisations, the positions are tech stack agnostic for candidates who are good at problem solving. In the first case, some interview rounds focus on specific technologies (e.g., Core Java, Spring Boot). In the second case, you can choose your favorite programming language for the coding rounds.
 The above information is from my job hunt experience in the last 6-8 months. Obviously, exceptions are always there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Strong tech stack inclination&lt;/strong&gt; - This point is interesting because, deep down, programmers have strong opinions about languages. For example, some people hate PHP (&lt;a href=&quot;https://www.reddit.com/r/PHP/comments/1fy71s/why_do_so_many_developers_hate_php/&quot;&gt;example&lt;/a&gt;) while some make fun of java for it‚Äôs verbosity (&lt;a href=&quot;https://www.youtube.com/watch?v=kdMG40wUCm4&quot;&gt;example 1&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=m4-HM_sCvtQ&quot;&gt;example 2&lt;/a&gt;, &lt;a href=&quot;https://github.com/Hello-World-EE/Java-Hello-World-Enterprise-Edition/tree/master/src/com/example&quot;&gt;example 3&lt;/a&gt;). This could still be seen as a personal choice. The bigger issue comes when people &lt;strong&gt;associate themselves&lt;/strong&gt; with one tech stack only. Let‚Äôs take my example - I‚Äôve been majorly writing Ruby for the past 9 years but I‚Äôve also written a little bit of C, Java for Android, Powershell, Bash, jQuery, BackboneJS, and a few other languages in my current and previous role. While I too have opinions about what languages to avoid, I did not limit my job search to Ruby/Rails openings only. Limiting my job search to only Ruby/Rails positions would have been stupid, especially in the current market where openings are less. I‚Äôd recommend the same to everyone - do not call yourself a Ruby developer, Java developer or GoLang developer. Call yourself a Software Engineer who can learn syntax and be productive in any language. Having this mindset helps a lot in the long run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confusion in job titles&lt;/strong&gt; - This is the most important thing to know when you‚Äôre searching for a new role. Some websites allow you to search jobs with years of experience, while some websites (like LinkedIn) allow you to search with job titles. LinkedIn also helps you to set job alerts for specific titles. Based on multiple factors, you could be eligible for multiple roles. Taking my example again - I work as a Staff Software Engineer in a small team but when it comes to job search, I search for Software Engineer, Senior Software Engineer, Staff Engineer, Team lead and Engineering manager roles. All these roles overlap with my experience range based on the size of organisation where I‚Äôm applying. I‚Äôve already explained this point in a &lt;a href=&quot;https://blog.gagan93.me/titles-inflation-and-down-levelling&quot;&gt;detailed blog post&lt;/a&gt;, so I‚Äôll rather leave you with a link to read the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Building Resume only once&lt;/strong&gt; - Resume building is an underrated exercise. When you‚Äôre looking out, there are high chances that you‚Äôre applying to many positions without a referral. In such cases, your resume is your first impression. If you‚Äôve not spent enough time in build the same, there are high chances that you‚Äôll not get calls from good companies. Resume building is not a one time effort. You need to work on it continuously to reword your tasks in a more impactful manner. Just like job titles, I‚Äôve already written a &lt;a href=&quot;https://blog.gagan93.me/improving-your-resume&quot;&gt;detailed blog post&lt;/a&gt; on how I did more than 5 iterations on my resume in past 8-9 months. Even today, I don‚Äôt think my resume is the best it can be, so I keep improving it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not preparing an Introduction&lt;/strong&gt; - In all the companies, the first thing people ask is to introduce yourself. In some companies, each interviewer asks this question (although that sounds repetitive). Generally, you get a minute or less to talk about yourself before they ask about your specific projects or give you a problem to solve. You might have built a lot of products but it‚Äôs important to summarise your journey in this one minute and talk about everything that you find important. Write a long introduction of yourself, use AI to summarise it and keep improving it (just like your resume). I skipped this initially and found myself struggling while explaining my role/journey. I clearly remember that I forgot to explain to one employer that I manage a team of seven people in my current role. So my role might have sounded more of an &lt;strong&gt;IC&lt;/strong&gt; than a &lt;strong&gt;Manager&lt;/strong&gt; that could have good/bad impact based on what they were hiring for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applying directly to dream companies&lt;/strong&gt; - If you‚Äôre interviewing after a long time, do not get discouraged by rejections. Despite building a lot of things and being hands-on after 9 years of total experience (6+ in my current role), I faced a lot of rejections in the beginning. The current way of tech hiring is not the best way to hire good candidates, it‚Äôs a way to filter out candidates who are not interview ready. And being interview ready means something else for technical roles. You might not have built anything in real world but if you are prepared for the interviews, you‚Äôll get the job. And the reverse is also true. For this reason, it is important to not apply for your dream companies directly (in case you are targeting some). Do many interviews at different companies to see if you can handle the questions under pressure before applying to your target company. Given the competitive nature of the market, I‚Äôve heard from many experienced people that you should give a few interviews every year even if you‚Äôre not looking out. It‚Äôs just to bridge the gap between your current preparation and market expectations.Another way of practising to a decent level is by taking mock interviews. While there are many paid websites for the same, a free solution for the same is by using ChatGPT as your interviewer. I‚Äôve tried it and it is decently good, if not the best. You need to do some initial conversation with it to explain what it is supposed to do (otherwise it will give you both question and answer). I‚Äôll share my prompt for reference:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/images/2024-05-24-tech-interview-mistakes-chatgpt.png&quot; alt=&quot;chatgpt&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The above screenshot is of my conversation with ChatGPT when I was preparing for my final round at Bain &amp;amp; Co (read the &lt;a href=&quot;https://blog.gagan93.me/bain-and-company-interview-experience&quot;&gt;complete interview experience&lt;/a&gt;). It‚Äôs important to set context for ChatGPT before you start the conversation. You can modify the above prompt for technical roles as well. I also prepared for System Design interview using this format.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Overconfidence&lt;/strong&gt; - Assuming that you already know everything can be bad. It happened with me when I was learning LLD and HLD. Because the problems seemed familiar/simple, I thought I‚Äôll be able to crack the rounds (till I failed 1-2 of them initially). Everything demands your time and some practice. Tech interviews demand even more practice because you‚Äôre expected to build (LLD) or talk about a MVP (HLD) within a period of 40-50 minutes. Although problems seem simple, thinking about the models, APIs, writing code, or talking about high level design, databases, protocols, challenges within this time period is very hard if you‚Äôve not spent time in practising the same. I always recommend everyone to solve at least 5-10 problems for both LLD/HLD (without looking at the solutions) before appearing for any company.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the top six things that came to my mind from my experience. Now let‚Äôs talk about mistakes during interviews.&lt;/p&gt;

&lt;h3 id=&quot;during-interviews&quot;&gt;During Interviews&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Not talking enough / talking a lot&lt;/strong&gt; - In an interview, you have an hour to talk about yourself and showcase your skills. It‚Äôs important that you portray best of your skills. A good technical interview is a collaborative exercise where you and your interviewer solve a particular problem. In most of the cases, the interviewer has a fair idea around possible solution(s) because they have asked the same problem many times. A good candidate would ask questions (not cleverly seek hints) to understand the problem in depth before jumping towards the solution. There are generally three technical rounds - Data Structures, LLD and HLD. While Data structures question is a mathematical question (i.e. can be judged as right or wrong), the other two are somewhat open-ended. In many cases, ambiguities are present in the problem statement (even in DS round) to see how the candidate interprets the problem and asks questions. It‚Äôs our responsibility to make sure that we‚Äôre querying the interviewer to frame the problem better, scope the boundaries of the problem and present a solution that works for it. It‚Äôs quite possible that some iterations are needed to tailor the solution to cover edge cases or changing requirements. I‚Äôll just recommend to keep on talking with your interviewer to make share what‚Äôs going on your mind. On the opposite side, don‚Äôt keep talking so much that you don‚Äôt leave space for them to talk or share their feedback on your solution. A balance is important here. In my experience as an interviewer, very few candidates talk more than what is required, but talking less is a common problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Assuming without discussing&lt;/strong&gt; - While you‚Äôre talking, make sure that you don‚Äôt &lt;strong&gt;assume&lt;/strong&gt; anything in your mind. Assumptions can lead to different solutions, hence it is important to speak about your assumptions. If that assumption is wrong, your interviewer will point out the same. For example: In most of the LLD problems if I‚Äôm talking about APIs, I assume that authentication is always in place and some header is coming in all the requests that is interpreted by the server for identifying the user. While most of the interviewers agree to this assumption, one of the interviewer asked this question- &lt;em&gt;What are the different authentication mechanisms you know about, and which one you‚Äôd like to use here (and why)?&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Design Interviews) Stubborn with choices&lt;/strong&gt; - In design interviews, you try to solve a problem by using some components like Databases, Load balancers, API Gateways, Firewalls, Protocols, API Servers, etc. Let‚Äôs take an example of a System Design interview. The most common discussion that happens in almost all the interviews is around the choice of database - SQL vs NoSQL (let‚Äôs assume we‚Äôre comparing SQL databases with Document oriented databases like Mongo/Elastic). We need to have strong reasons to choose one kind of database for the specific use case rather than &lt;a href=&quot;https://www.youtube.com/watch?v=b2F-DItXtZs&quot;&gt;this guy&lt;/a&gt; who is a MongoDB fan. There are many more places in a design interview where we need to make choices (eg. protocols). Just choosing one side is not enough - you need to justify your choice (or your interviewer will ask you to). Stubborn candidates leave a very bad impression on the interviewer and usually get rejected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;(Design Interviews) Finding the core problem / not catching hints -&lt;/strong&gt; In both LLD and HLD interviews, there is &lt;strong&gt;one core problem&lt;/strong&gt; that we‚Äôre solving. As we talk more with our interviewer and frame the actual problem from that &lt;em&gt;one liner ambiguous problem statement,&lt;/em&gt; we get closer to the problem. For example:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;In a cab booking platform like Uber, matching the driver with rider could be a core problem because you need to choose the drivers using some algorithm (you can‚Äôt just search them based on displacement as they might be a river apart).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;In a movie booking platform like BookMyShow, holding the seats while user is in process of paying for the tickets, or releasing the seats when payment fails / times out could be the core problems.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;Similarly, your problem statement has one core problem which you need to identity. Although other parts of the systems are also important but this is one part that interests the interviewer. While you‚Äôre talking with your interviewer, try to see if they‚Äôre impressed with your design or are they like - &lt;em&gt;there‚Äôs something more to the problem.&lt;/em&gt; Incase you‚Äôre missing something important or are going wrong, they try to give you a hint (eg. &lt;em&gt;How are you making sure that &amp;lt;this&amp;gt; problem is also addressed?&lt;/em&gt; ). Do not miss these inputs, they may impact your overall design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bad luck -&lt;/strong&gt; In the beginning of this post, I wrote about a problem that is outside your control. That‚Äôs bad luck. I‚Äôll share some scenarios to explain this:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Untrained interviewers -&lt;/strong&gt; This usually happens in small companies where they‚Äôre trying to expand the team. The interviewers might not be trained to conduct the discussion properly. Generally, some senior person &lt;a href=&quot;https://www.metaview.ai/resources/blog/interviewer-shadowing-the-secret-of-the-most-effective-hiring-machines-in-the-world&quot;&gt;shadows the new interviewer&lt;/a&gt; to make sure they are ready to interview but in small companies (due to multiple things running in parallel) such processes are not mature and training is not sufficient.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Stubborn interviewers&lt;/strong&gt; - Not only candidates, interviewers can be stubborn. It‚Äôs hard not only to work with them but even harder to do an interview. Such interviewers have one approach in mind and would expect you to give exactly same solution. I‚Äôve faced this once where despite doing everything well, I was rejected. And this was because there was &lt;strong&gt;one thing&lt;/strong&gt; that they wanted to happen in a certain way and I suggested something else (with a valid reason). This person also gave me feedback (I generally ask for the same at the end of interview) that I should have asked about scale of system (in a LLD problem) so that I had modified that one thing in my solution early. I‚Äôve &lt;strong&gt;never seen&lt;/strong&gt; anyone else talking about ‚Äúscale of system‚Äù in a LLD interview. We generally go into details of API design, database design and the core problem.
 The best part - they were junior to me by designation, years of experience, and attitude towards better solutions :)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from this, many other things (like mood of the interviewer) can impact your performance. Such things are generally not in your hands. Just like for candidates, interviewers also need training and feedback. In the organisations where interview process is more formalised and where interview calls are recorded, there are high chances that the interviewer would get feedback(s) if they need to improve on certain axes. In many organisations the feedback process is completely missing, which leads to bad candidate experience. If you face such a situation, you can also share your feedback with the recruiter / hiring manager. Make sure your tone is professional and not rude if you want them to consider your feedback.&lt;/p&gt;

&lt;p&gt;I hope the above points would help you to avoid mistakes that people (including myself) generally make. Good luck for your preparation üëç.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 May 2024 00:00:00 +0530</pubDate>
        <link>https://gagan93.me/blog/2024/05/24/tech-interview-mistakes.html</link>
        <guid isPermaLink="true">https://gagan93.me/blog/2024/05/24/tech-interview-mistakes.html</guid>
      </item>
    
  </channel>
</rss>
